<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>通知！</title>
    <url>/2023/02/18/%E9%80%9A%E7%9F%A5%EF%BC%81/</url>
    <content><![CDATA[<p>这个网址更新了，因为我的github用户名改成了Li-Jihong，本网址是通过github创建的，所以之前的域名无法访问，要通过下面的域名访问：</p>
<blockquote>
<p><a href="https://li-jihong.github.io/">https://li-jihong.github.io/</a></p>
</blockquote>
<p><a href="https://li-jihong.github.io/">谨以此网页，献给一个女孩 (li-jihong.github.io)</a></p>
]]></content>
      <categories>
        <category>通知</category>
      </categories>
      <tags>
        <tag>更新</tag>
      </tags>
  </entry>
  <entry>
    <title>算法代码1~2</title>
    <url>/2023/01/13/%E7%AE%97%E6%B3%95%E4%BB%A3%E7%A0%811-2/</url>
    <content><![CDATA[<h1>第一阶段：</h1>
<h2 id="快速排序：">快速排序：</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> q[N];</span><br><span class="line"></span><br><span class="line"><span class="comment">//快速排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">quick_sort</span><span class="params">(<span class="type">int</span> s[], <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//Swap(s[l], s[(l + r) / 2]); //将中间的这个数和第一个数交换 </span></span><br><span class="line">        <span class="type">int</span> i = l, j = r, x = s[l];</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(i &lt; j &amp;&amp; s[j] &gt;= x) <span class="comment">// 从右向左找第一个小于x的数</span></span><br><span class="line">                j--;  </span><br><span class="line">            <span class="keyword">if</span>(i &lt; j) </span><br><span class="line">                s[i++] = s[j];</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span>(i &lt; j &amp;&amp; s[i] &lt; x) <span class="comment">// 从左向右找第一个大于等于x的数</span></span><br><span class="line">                i++;  </span><br><span class="line">            <span class="keyword">if</span>(i &lt; j) </span><br><span class="line">                s[j--] = s[i];</span><br><span class="line">        &#125;</span><br><span class="line">        s[i] = x;</span><br><span class="line">        <span class="built_in">quick_sort</span>(s, l, i - <span class="number">1</span>); <span class="comment">// 递归调用 </span></span><br><span class="line">        <span class="built_in">quick_sort</span>(s, i + <span class="number">1</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> 	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q[i]);</span><br><span class="line">	<span class="built_in">quick_sort</span>(q, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, q[i]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;	</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h2 id="第k个数：">第k个数：</h2>
<p>给定一个长度为n的整数数列，以及一个整数k，请用快速选择算法求出数列的第k小的数是多少。</p>
<p>输入格式</p>
<p>第一行包含两个整数n和k。</p>
<p>第二行包含n个整数(所有整数均在1~1e9范围内)，表示整数数列。</p>
<p>输出格式</p>
<p>输出一个整数，表示数列的第k小数。</p>
<p>数据范围</p>
<p>1 ≤ n ≤ 100000,</p>
<p>1 ≤ k ≤ n</p>
<p>输入样例:</p>
<p>5 3</p>
<p>2 4 1 5 3</p>
<p>输出样例:</p>
<p>3</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100000</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, k;</span><br><span class="line"><span class="type">int</span> q[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">quick_sort</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span> q[l];</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> x = q[l], i = l - <span class="number">1</span>, j = r + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; j)&#123;</span><br><span class="line">        <span class="keyword">while</span>(q[ ++i] &lt; x);</span><br><span class="line">        <span class="keyword">while</span>(q[ --j] &gt; x);</span><br><span class="line">        <span class="keyword">if</span>(i &lt; j) <span class="built_in">swap</span>(q[i], q[j]);</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="type">int</span> sl = j - l + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(k &lt;= sl) <span class="keyword">return</span> <span class="built_in">quick_sort</span>(l, j, k);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">quick_sort</span>(j + <span class="number">1</span>, r, k - sl);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =  <span class="number">0</span>; i &lt; n; i++) cin &gt;&gt; q[i];</span><br><span class="line">    cout &lt;&lt; <span class="built_in">quick_sort</span>(<span class="number">0</span>, n - <span class="number">1</span>, k) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="二分查找-：">二分查找 ：</h2>
<p><strong>输入：</strong></p>
<blockquote>
<p>测试数据的第一行输入n，m表示数组的长度和询问的次数(1&lt;=n,m&lt;=105)</p>
<p>接下来一行是 n 个数字A0 . . . An-1 满足 Ai&lt;=Ai+1 (1&lt;=Ai&lt;=109)</p>
<p>然后输入m行，每行是一个数字Qi表示询问(1&lt;=Qi&lt;=109)</p>
</blockquote>
<p><strong>输出：</strong></p>
<blockquote>
<p>对于每个询问，如果Qi在数组中出现过，</p>
<p>输出两个数字分别第一次出现和最后一次出现的位置，</p>
<p>如果Qi在数组中没有出现，则输出“-1 -1”</p>
</blockquote>
<p><strong>输入样例：</strong></p>
<blockquote>
<p>10 3</p>
<p>3 3 3 5 5 5 6 7 7 7</p>
<p>5</p>
<p>6</p>
<p>10</p>
</blockquote>
<p><strong>输出样例：</strong></p>
<blockquote>
<p>3 5</p>
<p>6 6</p>
<p>-1 -1</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> q[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q[i]);</span><br><span class="line">	<span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = n- <span class="number">1</span>;<span class="comment">//下面查找左边界</span></span><br><span class="line">        <span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">            <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;<span class="comment">//mid=(l+r)/2   向下取整;</span></span><br><span class="line">            <span class="keyword">if</span>(q[mid] &gt;= x) r = mid;</span><br><span class="line">            <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(q[l] != x) cout&lt;&lt;<span class="string">&quot;-1 -1&quot;</span>&lt;&lt;endl; <span class="comment">//找不到 </span></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            cout&lt;&lt; l &lt;&lt; <span class="string">&#x27; &#x27;</span>;<span class="comment">//输出左边界</span></span><br><span class="line">            <span class="type">int</span> l = <span class="number">0</span>, r = n- <span class="number">1</span>;<span class="comment">//下面查找右边界</span></span><br><span class="line">            <span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">                <span class="type">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;<span class="comment">//mid=(l+r+1)/2    向上取整;</span></span><br><span class="line">                <span class="keyword">if</span>(q[mid] &lt;= x) l = mid;</span><br><span class="line">                <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cout&lt;&lt;l&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="浮点数二分查找">浮点数二分查找:</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="type">double</span> x;</span><br><span class="line"></span><br><span class="line">  cin&gt;&gt;x;</span><br><span class="line"></span><br><span class="line">  <span class="type">double</span> l = <span class="number">0</span>, r = x;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(r - l &gt; <span class="number">1e-8</span>)&#123;</span><br><span class="line"></span><br><span class="line">     <span class="type">double</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">if</span>(mid * mid &gt;= x) r = mid;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">else</span> l = mid;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//浮点数不用考虑边界问题，太简单了</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//如果保留四位小数， r - l &gt; 1e-6 (类比可得，永远多二，总会有保证)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//如果保留六位小数， r - l &gt; 1e-8 (类比可得，永远多二，总会有保证)</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%lf\n&quot;</span>, l);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="归并排序">归并排序:</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> q[N], tmp[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge_sort</span><span class="params">(<span class="type">int</span> q[], <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// int mid = l + r &gt;&gt; 1;</span></span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> mid = (l + r)/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">merge_sort</span>(q, l, mid), <span class="built_in">merge_sort</span>(q, mid + <span class="number">1</span>, r);</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> k = <span class="number">0</span>, i = l, j = mid + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(i &lt;= mid &amp;&amp; j &lt;= r)&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span>(q[i] &lt;= q[j]) tmp[k++] = q[i++];</span><br><span class="line"></span><br><span class="line">     <span class="keyword">else</span> tmp[k++] = q[j++];</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(i &lt;= mid) tmp[k++] = q[i++];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(j &lt;= r) tmp[k++] = q[j++];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(i = l, j = <span class="number">0</span>; i &lt;= r; i++, j++) q[i] = tmp[j];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q[i]);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">merge_sort</span>(q, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, q[i]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="逆序对的数量：">逆序对的数量：</h2>
<p>给定一个长度为n的整数数列，请你计算数列中的逆序对的数量。</p>
<p>逆序对的定义如下:对于数列的第i个和第j个元素，如果满i&lt;j且a[i]&gt; a[j]，则其为一个逆序对;否则不是。</p>
<p>输入格式</p>
<p>第一行包含整数n，表示数列的长度。</p>
<p>第二行包含n个整数，表示整个数列。</p>
<p>输出格式</p>
<p>输出一个整数，表示逆序对的数量。</p>
<p>数据范围</p>
<p>1 ≤ n ≤ 100000</p>
<p>输入样例:</p>
<p>6</p>
<p>2 3 4 5 6 1</p>
<p>输出样例:</p>
<p>5</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100000</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> q[N], tmp[N];</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">merge_sort</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    LL res = <span class="built_in">merge_sort</span>(l, mid) + <span class="built_in">merge_sort</span>(mid + <span class="number">1</span>, r);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//归并的过程</span></span><br><span class="line">    <span class="type">int</span> k = <span class="number">0</span>, i = l, j = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= mid &amp;&amp; j &lt;= r)&#123;</span><br><span class="line">        <span class="keyword">if</span>(q[i] &lt;= q[j]) tmp[k++] = q[i++];</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            tmp[k++] = q[j++];</span><br><span class="line">            res += mid - i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="comment">//扫尾</span></span><br><span class="line">    <span class="keyword">while</span>(i &lt;= mid) tmp[k++] = q[i++];</span><br><span class="line">    <span class="keyword">while</span>(j &lt;= r) tmp[k++] = q[j++];</span><br><span class="line">    <span class="comment">//物归原主</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = l, j = <span class="number">0</span>; i &lt;= r; i++, j++) q[i] = tmp[j];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =  <span class="number">0</span>; i &lt; n; i++) cin &gt;&gt; q[i];</span><br><span class="line">    cout &lt;&lt; <span class="built_in">merge_sort</span>(<span class="number">0</span>, n - <span class="number">1</span>) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="高精度加法">高精度加法:</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// C = A + B</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">add</span> <span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, vector&lt;<span class="type">int</span>&gt; &amp;B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">	<span class="type">int</span> t = <span class="number">0</span>; <span class="comment">//上一位的进位，第一次为0</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>() || i &lt; B.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(i &lt; A.<span class="built_in">size</span>()) t += A[i]; <span class="comment">//如果A[i]这一位有的话就加上A[i]</span></span><br><span class="line">		<span class="keyword">if</span>(i &lt; B.<span class="built_in">size</span>()) t += B[i]; <span class="comment">//如果B[i]这一位有的话就加上B[i]</span></span><br><span class="line">		C.<span class="built_in">push_back</span>(t % <span class="number">10</span>);</span><br><span class="line">		t /= <span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(t) C.<span class="built_in">push_back</span>(<span class="number">1</span>); <span class="comment">//看一下最高位有没有进位，有的话就进位1</span></span><br><span class="line">	<span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	string a, b;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; A, B;</span><br><span class="line">	cin&gt;&gt;a&gt;&gt;b; <span class="comment">// a = &quot;123456&quot; </span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = a.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) A.<span class="built_in">push_back</span>(a[i] - <span class="string">&#x27;0&#x27;</span>); <span class="comment">// A =[6, 5, 4, 3, 2, 1]</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = b.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) B.<span class="built_in">push_back</span>(b[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">auto</span> C = <span class="built_in">add</span>(A, B);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = C.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, C[i]);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="高精度减法">高精度减法:</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否有A &gt;= B</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, vector&lt;<span class="type">int</span>&gt; &amp;B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(A.<span class="built_in">size</span>() != B.<span class="built_in">size</span>()) <span class="keyword">return</span> A.<span class="built_in">size</span>() &gt; B.<span class="built_in">size</span>();</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = A.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">		<span class="keyword">if</span>(A[i] != B[i])</span><br><span class="line">			<span class="keyword">return</span> A[i] &gt; B[i];</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// C = A - B</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sub</span> <span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, vector&lt;<span class="type">int</span>&gt; &amp;B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, t = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">		t = A[i] - t;</span><br><span class="line">		<span class="keyword">if</span>(i &lt; B.<span class="built_in">size</span>()) t -= B[i];</span><br><span class="line">		C.<span class="built_in">push_back</span>((t + <span class="number">10</span>) % <span class="number">10</span>);</span><br><span class="line">		<span class="keyword">if</span>(t &lt; <span class="number">0</span>) t = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> t = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(C.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; C.<span class="built_in">back</span>() == <span class="number">0</span>) C.<span class="built_in">pop_back</span>();</span><br><span class="line">	<span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	string a, b;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; A, B;</span><br><span class="line">	cin&gt;&gt;a&gt;&gt;b; <span class="comment">// a = &quot;123456&quot; </span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = a.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) A.<span class="built_in">push_back</span>(a[i] - <span class="string">&#x27;0&#x27;</span>); <span class="comment">// A =[6, 5, 4, 3, 2, 1]</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = b.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) B.<span class="built_in">push_back</span>(b[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">cmp</span>(A, B))&#123;</span><br><span class="line">		<span class="keyword">auto</span> C = <span class="built_in">sub</span>(A, B);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = C.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, C[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">auto</span> C = <span class="built_in">sub</span>(A, B);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = C.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, C[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="高精度乘法">高精度乘法:</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// C = A * b</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">mul</span> <span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">	<span class="type">int</span> t = <span class="number">0</span>; <span class="comment">//进位</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>() || t; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(i &lt; A.<span class="built_in">size</span>()) t += A[i] * b;</span><br><span class="line">		C.<span class="built_in">push_back</span>(t % <span class="number">10</span>);</span><br><span class="line">		t /= <span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	string a;</span><br><span class="line">	<span class="type">int</span> b;</span><br><span class="line">	cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; A;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = a.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) A.<span class="built_in">push_back</span>(a[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	<span class="keyword">auto</span> C = <span class="built_in">mul</span>(A, b);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = C.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, C[i]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="高精度除法">高精度除法:</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// A / b 商是C，余数是r</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">div</span> <span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> b, <span class="type">int</span> &amp;r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">	r = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = A.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">		r = r * <span class="number">10</span> + A[i];</span><br><span class="line">		C.<span class="built_in">push_back</span>(r / b);</span><br><span class="line">		r %= b;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">reverse</span>(C.<span class="built_in">begin</span>(), C.<span class="built_in">end</span>());</span><br><span class="line">	<span class="keyword">while</span>(C.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; C.<span class="built_in">back</span>() == <span class="number">0</span>) C.<span class="built_in">pop_back</span>(); <span class="comment">//去除前导0</span></span><br><span class="line">	<span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	string a;</span><br><span class="line">	<span class="type">int</span> b;</span><br><span class="line">	cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; A;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = a.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) A.<span class="built_in">push_back</span>(a[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	<span class="type">int</span> r;</span><br><span class="line">	<span class="keyword">auto</span> C = <span class="built_in">div</span>(A, b, r);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = C.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, C[i]);</span><br><span class="line">	cout&lt;&lt;endl&lt;&lt;r&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="一维前缀和：">一维前缀和：</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> a[N], s[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// ios::sync_with_stdio(false); //好处：可以提高cin的输入效率；坏处：后面都不能用scanf了。</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) s[i] = s[i - <span class="number">1</span>] + a[i]; <span class="comment">//前缀和的初始化</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="type">int</span> l, r;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;l, &amp;r);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, s[r] - s[l - <span class="number">1</span>]); <span class="comment">//区间和的计算</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="一维前缀和练习：">一维前缀和练习：</h2>
<p>输入一个长度为n的整数序列。<br>
接下来再输入m个询问，每个询问输入一对l, r。<br>
对于每个询问，输出原序列中从第|个数到第r个数的和。</p>
<p>输入格式<br>
第一行包含两个整数n和m。<br>
第二行包含n个整数，表示整数数列。<br>
接下来m行，每行包含两个整数l和r，表示一个询问的区间范围。</p>
<p>输出格式<br>
共m行，每行输出一个询问的结果。</p>
<p>数据范围<br>
1≤l≤r ≤ n,<br>
1 ≤n, m ≤ 100000,<br>
—1000≤数列中元素的值≤1000</p>
<p>输入样例：</p>
<p>5 3</p>
<p>2 1 3 6 4</p>
<p>1 2</p>
<p>1 3</p>
<p>2 4</p>
<p>输出样例：</p>
<p>3</p>
<p>6</p>
<p>10</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> a[N], s[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[n]);</span><br><span class="line">	<span class="comment">//求前缀和数组</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) s[i] = s[i - <span class="number">1</span>] + a[i];</span><br><span class="line">	<span class="keyword">while</span>(m--)&#123;</span><br><span class="line">             <span class="type">int</span> l, r;</span><br><span class="line">	     cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">	     cout &lt;&lt; s[r] - s[l - <span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="二维前缀和：">二维前缀和：</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, q;</span><br><span class="line"><span class="type">int</span> a[N][N], s[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// ios::sync_with_stdio(false); //好处：可以提高cin的输入效率；坏处：后面都不能用scanf了。</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;q);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; i &lt;= m; j++) </span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i][j]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; i &lt;= m; j++) </span><br><span class="line">            s[i][j] = s[i <span class="number">-1</span>][j] + s[i][j - <span class="number">1</span>] - s[i <span class="number">-1</span> ][j - <span class="number">1</span>] + a[i][j]; <span class="comment">//求前缀和</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">        <span class="type">int</span> x1, y1, x2, y2;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;x1, &amp;y1, &amp;x2, &amp;y2);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, s[x2][y2] - s[x1 - <span class="number">1</span>][y2] - s[x2][y1 - <span class="number">1</span>] + s[x1 - <span class="number">1</span>][y1 - <span class="number">1</span>]); <span class="comment">//算子矩阵和</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="二维前缀和练习：">二维前缀和练习：</h2>
<p>输入一个n行m列的整数矩阵，再输入q个询问，每个询问包含四个整数x1, y1,x2, y2，表示一个子矩阵的左上角坐标和右下角坐标。<br>
对于每个询问输出子矩阵中所有数的和。<br>
输入格式<br>
第一行包含三个整数n，m，q。<br>
接下来n行，每行包含m个整数，表示整数矩阵。<br>
接下来q行，每行包含四个整数×1,y1,x2, y2，表示一组询问。</p>
<p>输出格式<br>
共q行，每行输出一个询问的结果。<br>
数据范围：</p>
<p>1 ≤n, m ≤1000,</p>
<p>1≤q≤100000,</p>
<p>1 &lt;c1 ≤a2 ≤n,1&lt; y1 ≤y2 ≤ m,<br>
-1000≤矩阵内元素的值≤1000</p>
<p>输入样例:<br>
3 4 3</p>
<p>1 7 2 4</p>
<p>3 6 2 8</p>
<p>2 1 2 3</p>
<p>1 1 2 2</p>
<p>2 1 3 4</p>
<p>1 3 3 4<br>
输出样例:<br>
17<br>
27</p>
<p>21</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> n, m, q;</span><br><span class="line"><span class="type">int</span> a[N][N], s[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;q);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i][j]);</span><br><span class="line">    <span class="comment">//初始化前缀和数组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">            s[i][j] = s[i - <span class="number">1</span>][j] + s[i][j - <span class="number">1</span>] -s[i - <span class="number">1</span>][j - <span class="number">1</span>] + a[i][j];</span><br><span class="line">    <span class="comment">//询问</span></span><br><span class="line">    <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">        <span class="type">int</span> x1, y1, x2, y2;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;x1, &amp;y1, &amp;x2, &amp;y2);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, s[x2][y2] - s[x1 - <span class="number">1</span>][y2] - s[x2][y1 - <span class="number">1</span>] + s[x1 - <span class="number">1</span>][y1 - <span class="number">1</span>]); <span class="comment">//算子矩阵和</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="一维差分：">一维差分：</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> a[N], b[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> c)</span><span class="comment">//一维差分的核心</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    b[l] += c;</span><br><span class="line">    b[r + <span class="number">1</span>] -= c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// ios::sync_with_stdio(false); //好处：可以提高cin的输入效率；坏处：后面都不能用scanf了。</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">insert</span>(i, i, a[i]); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="type">int</span> l, r, c;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;l, &amp;r, &amp;c);</span><br><span class="line">        <span class="built_in">insert</span>(l, r, c); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) b[i] += b[i - <span class="number">1</span>]; <span class="comment">//a[i] = a[i - 1] + b[i]; </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, b[i]); <span class="comment">//printf(&quot;%d &quot;, a[i])</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="二维差分：">二维差分：</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, q;</span><br><span class="line"><span class="type">int</span> a[N][N], b[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2, <span class="type">int</span> c)</span> <span class="comment">//二维差分的核心</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    b[x1][y1] += c;</span><br><span class="line">    b[x2 + <span class="number">1</span>][y1] -= c;</span><br><span class="line">    b[x1][y2 + <span class="number">1</span>] -= c;</span><br><span class="line">    b[x2 + <span class="number">1</span>][y2 + <span class="number">1</span>] += c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// ios::sync_with_stdio(false); //好处：可以提高cin的输入效率；坏处：后面都不能用scanf了。</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;q);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i][j]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">            <span class="built_in">insert</span>(i, j, i, j, a[i][j]); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">        <span class="type">int</span> x1, y1, x2, y2, c;</span><br><span class="line">        cin&gt;&gt;x1&gt;&gt;y1&gt;&gt;x2&gt;&gt;y2&gt;&gt;c;</span><br><span class="line">        <span class="built_in">insert</span>(x1, y1, x2, y2, c); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">            b[i][j] += b[i][j - <span class="number">1</span>] + b[i - <span class="number">1</span>][j] - b[i <span class="number">-1</span>][j - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, b[i][j]);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="双指针算法">双指针算法:</h2>
<p>**问题：**给定一个长度为n的整数序列，请找出最长的不包含重复数字的连续子序列，输出它的长度。</p>
<p><strong>输入格式:</strong></p>
<p>第一行包含整数n。</p>
<p>第二行包含n个整数(均在0~100000范围内)，表示整数序列。</p>
<p><strong>输出格式:</strong></p>
<p>共一行，包含一个整数，表示最长的不包含重复数字的连续子序列的长度。</p>
<p><strong>数据范围:</strong></p>
<p>1≤n ≤100000</p>
<p><strong>输入样例:</strong></p>
<p>5</p>
<p>1 2 2 3 5</p>
<p><strong>输出样例:</strong></p>
<p>3</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[N], s[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)  cin&gt;&gt;a[i];</span><br><span class="line">	<span class="type">int</span> res  = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">		s[a[i]] ++; </span><br><span class="line">		<span class="keyword">while</span>(s[a[i]] &gt; <span class="number">1</span>)&#123;</span><br><span class="line">			s[a[j]] -- ;</span><br><span class="line">			j++;</span><br><span class="line">		&#125;</span><br><span class="line">		res = <span class="built_in">max</span>(res, i - j + <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>//双指针算法的逻辑结构：</p>
<p>/*</p>
<p>for(int i = 0; i &lt; n; i++){</p>
<p>while(j &lt; i &amp;&amp; check(i,j)) j++;</p>
<p>res = amx(res, i - j + 1)</p>
<p>//每道题的具体逻辑</p>
<p>}</p>
<p>*/</p>
<p>//核心思想：将O（n2） =&gt; O(n)</p>
<p>// 常见问题分类:</p>
<p>// (1)对于—个序列，用两个指针维护—段区间</p>
<p>// (2)对于两个序列，维护某种次序，比如归并排序中合并两个有序序列的操作</p>
<h2 id="位运算：">位运算：</h2>
<p>**问题：**给定一个长度为n的数列，请你求出数列中每个数的二进制表示中1的个数。</p>
<p><strong>输入格式:</strong></p>
<p>第一行包含整数n。</p>
<p>第二行包含n个整数，表示整数序列。</p>
<p><strong>输出格式:</strong></p>
<p>共一行，包含n个整数，其中的第i个数表示数列中的第i个数的二进制表示中1的个数。</p>
<p><strong>数据范围:</strong></p>
<p>1≤n ≤100000</p>
<p>0≤数列中元素的值≤1e9</p>
<p><strong>输入样例:</strong></p>
<p>5</p>
<p>1 2 3 4 5</p>
<p><strong>输出样例:</strong></p>
<p>1 1 2 1 2</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="comment">//返回x的最后一位1</span></span><br><span class="line">	<span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">	<span class="keyword">while</span>(n--)&#123;</span><br><span class="line">		<span class="type">int</span> x;</span><br><span class="line">		cin&gt;&gt;x;</span><br><span class="line">		<span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(x) x-= <span class="built_in">lowbit</span>(x), res++; <span class="comment">//每次减去x的最后一位1</span></span><br><span class="line">		cout&lt;&lt;res&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//求n的第k位数字：  n &gt;&gt; k &amp; 1</span></span><br></pre></td></tr></table></figure>
<h2 id="离散化">离散化:</h2>
<p>离散化:特指整数的保序的离散化</p>
<p>vector<int> alls;//存储所有待离散化的值</int></p>
<p>sort(alls.begin(), alls.end());//将所有值排序</p>
<p>alls.erase(unique(alls.begin(), alls.end()), alls.end());//去掉重复元素</p>
<p>unique()函数返回最后的下标，erase()函数删除一段区间的值。</p>
<p>*/</p>
<p>/*</p>
<p>二分求出x对应的离散化的值</p>
<p>int find(int x){//找到第一个大于等于x的位置</p>
<p>int l, r = alls.size() - 1;</p>
<p>while(l &lt; r){</p>
<p>​    int mid  = l + r &gt;&gt;1;</p>
<p>​    if(alls[mid] &gt;= x) r = mid;</p>
<p>​    else l = mid + 1; //映射到1，2，3…n</p>
<p>}</p>
<p>return r + 1;</p>
<p>}</p>
<p>*/</p>
<p>假定有一个无限长的数轴，数轴上每个坐标上的数都是0。</p>
<p>现在，我们首先进行n次操作，每次操作将某一位置x上的数加c。</p>
<p>近下来，进行m次询问，每个询问包含两个整数l和r，你需要求出在区间[l, r]之间的所有数的和。</p>
<p><strong>输入格式:</strong></p>
<p>第一行包含两个整数n和m。</p>
<p>接下来n行，每行包含两个整数x和c。</p>
<p>再接下里m行，每行包含两个整数l和r。</p>
<p><strong>输出格式:</strong></p>
<p>共m行，每行输出一个询问中所求的区间内数字和。</p>
<p><strong>数据范围:</strong></p>
<p>-1e9 &lt;= x &lt;= 1e9,</p>
<p>1 ≤ n, m ≤ 1e5,</p>
<p>—1e9 &lt;= l &lt;= r &lt;= 1e9,</p>
<p>-1e5 ≤ c ≤ 1e5,</p>
<p><strong>输入样例:</strong></p>
<p>3 3</p>
<p>1 2</p>
<p>3 6</p>
<p>7 5</p>
<p>1 3</p>
<p>4 6</p>
<p>7 8</p>
<p><strong>输出样例:</strong></p>
<p>8</p>
<p>0</p>
<p>5</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span> <span class="comment">//用vector来做离散化</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">300000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> a[N], s[N];</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; alls;</span><br><span class="line">vector&lt;PII&gt; add, query;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> l = <span class="number">0</span>, r = alls.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">		<span class="type">int</span> mid = l + r &gt;&gt;<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(alls[mid] &gt;= x) r = mid;</span><br><span class="line">		<span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> r + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">		<span class="type">int</span> x, c;</span><br><span class="line">		cin&gt;&gt;x&gt;&gt;c;</span><br><span class="line">		add.<span class="built_in">push_back</span>(&#123;x,c&#125;);</span><br><span class="line"></span><br><span class="line">		alls.<span class="built_in">push_back</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">		<span class="type">int</span> l, r;</span><br><span class="line">		cin&gt;&gt;l&gt;&gt;r;</span><br><span class="line">		query.<span class="built_in">push_back</span>(&#123;l,r&#125;);</span><br><span class="line"></span><br><span class="line">		alls.<span class="built_in">push_back</span>(l);</span><br><span class="line">		alls.<span class="built_in">push_back</span>(r);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//去重</span></span><br><span class="line">	<span class="built_in">sort</span>(alls.<span class="built_in">begin</span>(), alls.<span class="built_in">end</span>());</span><br><span class="line">	alls.<span class="built_in">erase</span>(<span class="built_in">unique</span>(alls.<span class="built_in">begin</span>(), alls.<span class="built_in">end</span>()), alls.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> item : add)&#123;</span><br><span class="line">		<span class="type">int</span> x = <span class="built_in">find</span>(item.first);</span><br><span class="line">		a[x] += item.second;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//预处理前缀和</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i= <span class="number">1</span>; i &lt;= alls.<span class="built_in">size</span>(); i++) s[i] = s[i - <span class="number">1</span>] + a[i];</span><br><span class="line"></span><br><span class="line">	<span class="comment">//处理询问</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> item : query)&#123;</span><br><span class="line">		<span class="type">int</span> l = <span class="built_in">find</span>(item.first), r = <span class="built_in">find</span>(item.second);</span><br><span class="line">		cout&lt;&lt;s[r] - s[l - <span class="number">1</span>]&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="区间合并：">区间合并：</h2>
<p><strong>问题：</strong></p>
<p>给定n个区间[l, r]，要求合并所有有交集的区间。</p>
<p>注意如果在端点处相交，也算有交集。</p>
<p>输出合并完成后的区间个数。</p>
<p>例如:[1,3]和[2,6]可以合并为一个区间[1,6]。</p>
<p><strong>输入格式:</strong></p>
<p>第一行包含整数n。</p>
<p>接下来n行，每行包含两个整数l和r。</p>
<p><strong>输出格式:</strong></p>
<p>共一行，包含—个整数，表示合并区间完成后的区间个数。</p>
<p><strong>数据范围:</strong></p>
<p>1≤ n ≤100000</p>
<p>-1e9 &lt;= l &lt;= r &lt;= 1e9</p>
<p><strong>输入样例:</strong></p>
<p>5</p>
<p>1 2</p>
<p>2 4</p>
<p>5 6</p>
<p>7 8</p>
<p>7 9</p>
<p><strong>输出样例:</strong></p>
<p>3</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span> <span class="comment">//用vector来做离散化</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">vector&lt;PII&gt; segs;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(vector&lt;PII&gt; &amp;segs)</span></span>&#123;</span><br><span class="line">	vector&lt;PII&gt; res;</span><br><span class="line">	<span class="built_in">sort</span>(segs.<span class="built_in">begin</span>(), segs.<span class="built_in">end</span>());</span><br><span class="line">	<span class="type">int</span> st = <span class="number">-2e9</span>, ed = <span class="number">-2e9</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> seg : segs)&#123;</span><br><span class="line">		<span class="keyword">if</span>(ed &lt; seg.first)&#123;</span><br><span class="line">			<span class="keyword">if</span>(st != <span class="number">-2e9</span>) res.<span class="built_in">push_back</span>(&#123;st, ed&#125;);</span><br><span class="line">			st = seg.first, ed = seg.second;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> ed = <span class="built_in">max</span>(ed, seg.second);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(st != <span class="number">-2e9</span>) res.<span class="built_in">push_back</span>(&#123;st, ed&#125;);</span><br><span class="line">	segs = res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">		<span class="type">int</span> l, r;</span><br><span class="line">		cin&gt;&gt;l&gt;&gt;r;</span><br><span class="line">		segs.<span class="built_in">push_back</span>(&#123;l,r&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">merge</span>(segs);</span><br><span class="line">	cout&lt;&lt;segs.<span class="built_in">size</span>()&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="数的三次方根：">数的三次方根：</h2>
<p>问题描述：</p>
<p>给定一个浮点数n，求他的三次方根。</p>
<p><strong>输入格式</strong><br>
共一行，包含浮点数n。<br>
<strong>输出格式</strong><br>
共一行，包含一个浮点数，表示问题的解。<br>
注意，结果保留六位小数。</p>
<p><strong>数据范围：</strong></p>
<p>-10000&lt;=n&lt;=10000<br>
<strong>输入样例:</strong><br>
1000.00<br>
<strong>输出样例:</strong><br>
10.000000</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">double</span> x;</span><br><span class="line">	cin &gt;&gt; x;</span><br><span class="line">	<span class="type">double</span> l = <span class="number">-10000</span>, r = <span class="number">10000</span>;</span><br><span class="line">	<span class="keyword">while</span>(r - l &gt; <span class="number">1e-8</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">double</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">if</span>(mid * mid * mid &gt;= x) r = mid;</span><br><span class="line">		<span class="keyword">else</span> l = mid;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%.6lf\n&quot;</span>, l);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>第二阶段：</h1>
<h2 id="链表：">链表：</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//head表示头结点的下标</span></span><br><span class="line"><span class="comment">//e[i]表示节点i的值</span></span><br><span class="line"><span class="comment">//ne[i]表示i的next指针是多少</span></span><br><span class="line"><span class="comment">//idx存储当前用到了哪个点</span></span><br><span class="line"><span class="type">int</span> head, e[N], ne[N], idx;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    head = <span class="number">-1</span>;</span><br><span class="line">    idx = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将x插到头节点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_to_head</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = x;</span><br><span class="line">    ne[idx] = head;</span><br><span class="line">    head = idx;</span><br><span class="line">    idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将x插到下标是k的点的后面</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = x;</span><br><span class="line">    ne[idx] = ne[k];</span><br><span class="line">    ne[k] = idx;</span><br><span class="line">    idx ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将下标是k的点后面的点删掉</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ne[k] = ne[ne[k]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="双链表：">双链表：</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> m;</span><br><span class="line"><span class="type">int</span> e[N], l[N], r[N], idx;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//0表示左端点，1表示右端点</span></span><br><span class="line">    r[<span class="number">0</span>] = <span class="number">1</span>, l[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    idx = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在下标是k的点的右边，插入x</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = x;</span><br><span class="line">    r[idx] = r[k];</span><br><span class="line">    l[idx] = k;</span><br><span class="line">    l[r[k]] = idx;</span><br><span class="line">    r[k] = idx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除第k个点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    r[l[k]] = r[k];</span><br><span class="line">    l[r[k]] = l[k];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="栈和队列：">栈和队列：</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> stk[N], tt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//************************** 栈</span></span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line">stk[++tt] = x;</span><br><span class="line"></span><br><span class="line"><span class="comment">//弹出</span></span><br><span class="line">tt --;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断栈是否为空</span></span><br><span class="line"><span class="keyword">if</span>(tt &gt; <span class="number">0</span>) <span class="keyword">not</span> empty;</span><br><span class="line"><span class="keyword">else</span> empty;</span><br><span class="line"></span><br><span class="line"><span class="comment">//栈顶</span></span><br><span class="line">stk[tt];</span><br><span class="line"></span><br><span class="line"><span class="comment">//************************** 队列</span></span><br><span class="line"><span class="type">int</span> q[N], hh , tt = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line">q[++ t] = x;</span><br><span class="line"></span><br><span class="line"><span class="comment">//弹出</span></span><br><span class="line">hh++;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断队列是否为空</span></span><br><span class="line"><span class="keyword">if</span>(hh &lt;= tt) <span class="keyword">not</span> empty;</span><br><span class="line"><span class="keyword">else</span> empty;</span><br><span class="line"></span><br><span class="line"><span class="comment">//取出队头元素</span></span><br><span class="line">q[hh]</span><br></pre></td></tr></table></figure>
<h2 id="单调队列-滑动窗口：">单调队列-滑动窗口：</h2>
<p>输入数据：</p>
<p>8 3</p>
<p>1 3  -1 -3 5 3 6 7</p>
<p>输出数据：</p>
<p>-1 -3 -3 -3 3 3</p>
<p>3 3 5 5 6 7</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, k;</span><br><span class="line"><span class="type">int</span> a[N], q[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="type">int</span> hh = <span class="number">0</span>, tt = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="comment">//判断队头是否已经滑出了窗口</span></span><br><span class="line">        <span class="keyword">if</span>(hh &lt;= tt &amp;&amp; i - k + <span class="number">1</span> &gt; q[hh]) hh++;</span><br><span class="line">        <span class="keyword">while</span>(hh &lt;= tt &amp;&amp; a[q[tt]] &gt;= a[i]) tt--;</span><br><span class="line">        q[++ tt] = i;</span><br><span class="line">        <span class="keyword">if</span>(i &gt;= k - <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[q[hh]]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    hh = <span class="number">0</span>, tt = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="comment">//判断队头是否已经滑出了窗口</span></span><br><span class="line">        <span class="keyword">if</span>(hh &lt;= tt &amp;&amp; i - k + <span class="number">1</span> &gt; q[hh]) hh++;</span><br><span class="line">        <span class="keyword">while</span>(hh &lt;= tt &amp;&amp; a[q[tt]] &lt;= a[i]) tt--;</span><br><span class="line">        q[++ tt] = i;</span><br><span class="line">        <span class="keyword">if</span>(i &gt;= k - <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[q[hh]]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="KMP：">KMP：</h2>
<p>输入数据：</p>
<p>3</p>
<p>aba</p>
<p>5</p>
<p>ababa</p>
<p>输出数据：</p>
<p>0 2</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10010</span>, M = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">char</span> p[N], s[M];</span><br><span class="line"><span class="type">int</span> ne[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; p + <span class="number">1</span>  &gt;&gt; m &gt;&gt; s + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//求next的过程</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>, j = <span class="number">0</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(j &amp;&amp; p[i] != p[j + <span class="number">1</span>]) j = ne[j];</span><br><span class="line">        <span class="keyword">if</span>(p[i] == p[j + <span class="number">1</span>]) j++;</span><br><span class="line">        ne[i] = j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//kmp过程</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i&lt;= m; i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(j &amp;&amp; s[i] != p[j + <span class="number">1</span>]) j = ne[j];</span><br><span class="line">        <span class="keyword">if</span>(s[i] == p[j + <span class="number">1</span>]) j++;</span><br><span class="line">        <span class="keyword">if</span>(j == n)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i - n);</span><br><span class="line">            j = ne[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Trie树：">Trie树：</h2>
<p>用来高效的存储和查找字符串数组</p>
<p>问题描述：<br>
维护一个字符串集合，支持两种操作：</p>
<blockquote>
<ol>
<li>”I x“向集合中插入一个字符串x</li>
<li>”Q x“询问一个字符串在一个集合中出现了多少次</li>
</ol>
</blockquote>
<p>共有N个操作,输入的字符串总长度不超过1e5,字符串仅包含小写英文字母。****<br>
<strong>输入格式:</strong><br>
第一行包含整数N,表示操作数。<br>
接下来N行，每行包含一个操作指令, 指令为&quot;Ix&quot;或&quot;Q x&quot;中的一种。****<br>
<strong>输出格式:</strong><br>
对于每个询问指令&quot;Q x&quot;,都要输出一个整数作为结果，表示x在集合中出现的次数。<br>
每个结果占一行。<br>
<strong>数据范围:</strong><br>
1≤ N ≤2* 1e4</p>
<p><strong>输入样例：</strong></p>
<blockquote>
<p>5</p>
<p>I abc</p>
<p>Q abc</p>
<p>Q ab</p>
<p>I ab</p>
<p>Q ab</p>
</blockquote>
<p><strong>输出样例：</strong></p>
<blockquote>
<p>1</p>
<p>0</p>
<p>1</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> son [N][<span class="number">26</span>], cnt[N], idx;<span class="comment">// 下标是0的点，既是根节点，又是空节点</span></span><br><span class="line"><span class="type">char</span> str[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">char</span> str[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; str[i]; i++)&#123;</span><br><span class="line">        <span class="type">int</span> u = str[i] - <span class="string">&#x27;a&#x27;</span>; <span class="comment">//映射从 ’a‘ ——&gt; 25</span></span><br><span class="line">        <span class="keyword">if</span>(!son[p][u]) son[p][u] = ++ idx; <span class="comment">//如果不存在就创建出来</span></span><br><span class="line">        p = son[p][u];</span><br><span class="line">    &#125;</span><br><span class="line">    cnt[p] ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">char</span> str[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; str[i]; i++)&#123;</span><br><span class="line">        <span class="type">int</span> u = str[i] - <span class="string">&#x27;a&#x27;</span>; <span class="comment">//映射从 ’a‘ ——&gt; 25</span></span><br><span class="line">        <span class="keyword">if</span>(!son[p][u]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        p = son[p][u];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt[p]; <span class="comment">//返回以p结尾的字母数量</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">while</span>(n --)&#123;</span><br><span class="line">        <span class="type">char</span> op[<span class="number">2</span>];</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s%s&quot;</span>, op, str);</span><br><span class="line">        <span class="keyword">if</span>(op[<span class="number">0</span>] == <span class="string">&#x27;I&#x27;</span>) <span class="built_in">insert</span>(str);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">query</span>(str));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="合并集合：">合并集合：</h2>
<blockquote>
<p>并查集:<br>
1.将两个集合合并<br>
2.询问两个元素是否在一 个集合当中<br>
基本原理:每个集合用一棵树来表示。树根的编号就是整个集合的编号。每个节点存储<br>
它的父节点，p[x]表示x的父节点<br>
问题1:如何判断树根: if (p[x] == x)<br>
问题2:如何求x的集合编号: while (p[x]!= x)x = p[x];<br>
问题3:如何合并两个集合: px是x的集合编号，py是y的集合编号。p[x] =y</p>
</blockquote>
<p><strong>问题描述：</strong></p>
<p>一共有n个数，编号是1~n，最开始每个数各自在一个集合中。<br>
现在要进行m个操作,操作共有两种:</p>
<ol>
<li>“M a b”,将编号为a和b的两个数所在的集合合并,如果两个数已经在同一个集合中，则忽略这个操作;</li>
<li>“Q a b”,询问编号为a和b的两个数是否在同一个集合中;</li>
</ol>
<p><strong>输入格式：</strong></p>
<p>第一行输入整数n和m。<br>
接下来m行，每行包含一个操作指令,指令为&quot;M a b&quot;或&quot;Qa b”中的一-种。</p>
<p><strong>输出格式：</strong></p>
<p>对于每个询问指令&quot;Qab&quot;,都要输出一个结果,如果a和b在同-集合内,则输出&quot;Yes&quot;, 否则输出&quot;No&quot;。<br>
每个结果占一行。</p>
<p><strong>数据范围：</strong></p>
<p>1 ≤ n,m≤1e5</p>
<p><strong>输入样例：</strong></p>
<blockquote>
<p>4 5</p>
<p>M 1 2</p>
<p>M 3 4</p>
<p>Q 1 2</p>
<p>Q 1 3</p>
<p>Q 3 4</p>
</blockquote>
<p><strong>输出样例：</strong></p>
<blockquote>
<p>Yes</p>
<p>No</p>
<p>Yes</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> p[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p[x] != x) p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line">    <span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) p[i] = i;</span><br><span class="line">    <span class="keyword">while</span>(m --)&#123;</span><br><span class="line">        <span class="type">char</span> op[<span class="number">2</span>];</span><br><span class="line">        <span class="type">int</span> a, b;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s%d%d&quot;</span>, op, &amp;a, &amp;b);</span><br><span class="line">        <span class="keyword">if</span>(op[<span class="number">0</span>] == <span class="string">&#x27;M&#x27;</span>) p[<span class="built_in">find</span>(a)] = <span class="built_in">find</span>(b);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">find</span>(a) == <span class="built_in">find</span>(b)) <span class="built_in">puts</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="联通块中点的数量：">联通块中点的数量：</h2>
<p><strong>问题描述：</strong></p>
<p>给定一个包含n个点(编号为1~n)的无向图,初始时图中没有边。<br>
现在要进行m个操作,操作共有三种: .<br>
1.“C a b”,在点a和点b之间连一条边, a和b可能相等;<br>
2.“Q1 a b”,询问点a和点b是否在同-一个连通块中, a和b可能相等;<br>
3.“Q1 a”,询问点a所在连通块中点的数量;</p>
<p><strong>输入格式：</strong></p>
<p>第一行输入整数n和m。<br>
接下来m行，每行包含一个操作指令，指令为&quot;C a b&quot;, “Q1 a b&quot;或&quot;Q2 a&quot;中的一-种。</p>
<p><strong>输出格式：</strong></p>
<p>对于每个询问指令&quot;Q1 a b&quot;,如果a和b在同一个连通块中,则输出&quot;Yes&quot;, 否则输出“No&quot;。<br>
对于每个询问指令“Q2 a&quot;,输出一个整数表示点a所在连通块中点的数量<br>
每个结果占一行。</p>
<p><strong>数据范围：</strong></p>
<p>1 ≤ n,m≤1e5</p>
<p><strong>输入样例：</strong></p>
<blockquote>
<p>5 5</p>
<p>C 1 2</p>
<p>Q1 1 2</p>
<p>Q2 1</p>
<p>C 2 5</p>
<p>Q2 5</p>
</blockquote>
<p><strong>输出样例：</strong></p>
<blockquote>
<p>Yes</p>
<p>2</p>
<p>3</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> p[N], size[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p[x] != x) p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line">    <span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        p[i] = i;</span><br><span class="line">        size[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(m --)&#123;</span><br><span class="line">        <span class="type">char</span> op[<span class="number">5</span>];</span><br><span class="line">        <span class="type">int</span> a, b;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, op);</span><br><span class="line">        <span class="keyword">if</span>(op[<span class="number">0</span>] == <span class="string">&#x27;C&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">find</span>(a) == <span class="built_in">find</span>(b)) <span class="keyword">continue</span>;</span><br><span class="line">            size[<span class="built_in">find</span>(b)] += size[<span class="built_in">find</span>(a)];</span><br><span class="line">            p[<span class="built_in">find</span>(a)] = <span class="built_in">find</span>(b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op[<span class="number">1</span>] == <span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">find</span>(a) == <span class="built_in">find</span>(b)) <span class="built_in">puts</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, size[<span class="built_in">find</span>(a)]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="堆：">堆：</h2>
<p><strong>问题描述：</strong></p>
<p>输入一个长度为n的整数数列，从小到大输出前m小的数。</p>
<p><strong>输入格式：</strong></p>
<p>第一行包含整数n和m.<br>
第二行包含n个整数,表示整数数列。</p>
<p><strong>输出格式：</strong></p>
<p>共一行,包含m个整数,表示整数数列中前m小的数。</p>
<p><strong>数据范围：</strong></p>
<p>1 ≤ n,m≤1e5</p>
<p>1 ≤数列中的元素 n,m≤1e9</p>
<p><strong>输入样例：</strong></p>
<blockquote>
<p>5 3</p>
<p>4 5 1 3 2</p>
</blockquote>
<p><strong>输出样例：</strong></p>
<blockquote>
<p>1 2 3</p>
</blockquote>
<blockquote>
<p>如何手写一一个堆?<br>
1.插入一个数<br>
heap[ ++ size] = x; up(size);<br>
2.求集合当中的最小值<br>
heap[1];<br>
3.删除最小值<br>
heap[1] = heap[size]; szie – ; down(1);<br>
4.删除任意一个元素<br>
heap[k] = heap[size]; size – ; down(k); up(k);<br>
5.修改任意一个元素<br>
heap[k] = X; down(k); up(k);</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> h[N], size;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">down</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t = u;</span><br><span class="line">    <span class="keyword">if</span>(u * <span class="number">2</span> &lt;= size &amp;&amp; h[u * <span class="number">2</span>] &lt; h[t]) t = u * <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(u * <span class="number">2</span> + <span class="number">1</span> &lt;= size &amp;&amp; h[u * <span class="number">2</span> + <span class="number">1</span>] &lt; h[t]) t = u * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(u != t)&#123;</span><br><span class="line">        <span class="built_in">swap</span>(h[u], h[t]);</span><br><span class="line">        <span class="built_in">down</span>(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">up</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(u / <span class="number">2</span> &amp;&amp; h[u / <span class="number">2</span>] &gt; h[u])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">swap</span>(h[u / <span class="number">2</span>], h[u]);</span><br><span class="line">        u /= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;h[i]);</span><br><span class="line">    size = n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = n / <span class="number">2</span>; i; i--) <span class="built_in">down</span>(i);</span><br><span class="line">    <span class="keyword">while</span>(m --)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, h[<span class="number">1</span>]);</span><br><span class="line">        h[<span class="number">1</span>] = h[size];</span><br><span class="line">        size --;</span><br><span class="line">        <span class="built_in">down</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="模拟堆：">模拟堆：</h2>
<p><strong>问题描述：</strong></p>
<p>维护一个集合,初始时集合为空，支持如下几种操作:<br>
1.“1x”.插入一个数x;<br>
2.“PM&quot;,输出当前集合中的最小值;</p>
<p>3.“DM”,删除当前集合中的最小值(当最小值不唯一时,删除最早插入的最小值) ;<br>
4.“D k”,删除第k个插入的数;<br>
5.“C k x”,修改第k个插入的数,将其变为x;<br>
现在要进行N次操作，对于所有第2个操作，输出当前集合的最小值。</p>
<p><strong>输入格式：</strong></p>
<p>第一行包含整数N。<br>
接下来N行，每行包含一个操作指令, 操作指令为&quot;1x&quot;, “PM”, “DM”, &quot;D K&quot;或&quot;C k x&quot;中的-种。</p>
<p><strong>输出格式：</strong></p>
<p>对于每个输出指令&quot;PM&quot;,输出一个结果，表示当前集合中的最小值。<br>
每个结果占一行。</p>
<p><strong>数据范围：</strong></p>
<p>1 ≤N≤1e5</p>
<p>-1e9≤x≤1e9</p>
<p><strong>输入样例：</strong></p>
<blockquote>
<p>10</p>
<p>I -10</p>
<p>PM</p>
<p>I -10</p>
<p>D 1</p>
<p>C 2 8</p>
<p>I 6</p>
<p>PM</p>
<p>DM</p>
</blockquote>
<p><strong>输出样例：</strong></p>
<blockquote>
<p>-10</p>
<p>6</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> h[N], ph[N], hp[N], size;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">heap_swap</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">swap</span>(ph[hp[a]], ph[hp[b]]);</span><br><span class="line">    <span class="built_in">swap</span>(hp[a], hp[b]);</span><br><span class="line">    <span class="built_in">swap</span>(h[a], h[b]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">down</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t = u;</span><br><span class="line">    <span class="keyword">if</span>(u * <span class="number">2</span> &lt;= size &amp;&amp; h[u * <span class="number">2</span>] &lt; h[t]) t = u * <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(u * <span class="number">2</span> + <span class="number">1</span> &lt;= size &amp;&amp; h[u * <span class="number">2</span> + <span class="number">1</span>] &lt; h[t]) t = u * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(u != t)&#123;</span><br><span class="line">        <span class="built_in">heap_swap</span>(u, t);</span><br><span class="line">        <span class="built_in">down</span>(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">up</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(u / <span class="number">2</span> &amp;&amp; h[u / <span class="number">2</span>] &gt; h[u])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">heap_swap</span>(u / <span class="number">2</span>, u);</span><br><span class="line">        u /= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> op[<span class="number">10</span>];</span><br><span class="line">        <span class="type">int</span> k, x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, op);</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(op, <span class="string">&quot;I&quot;</span>))&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">            size++;</span><br><span class="line">            m++;</span><br><span class="line">            ph[m] = size, hp[size] = m;</span><br><span class="line">            h[size] = x;</span><br><span class="line">            <span class="built_in">up</span>(size);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(op, <span class="string">&quot;PM&quot;</span>)) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, h[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(op, <span class="string">&quot;DM&quot;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">heap_swap</span>(<span class="number">1</span>, size);</span><br><span class="line">            size --;</span><br><span class="line">            <span class="built_in">down</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(op, <span class="string">&quot;D&quot;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;k);</span><br><span class="line">            k = ph[k];</span><br><span class="line">            <span class="built_in">heap_swap</span>(k, size);</span><br><span class="line">            size--;</span><br><span class="line">            <span class="built_in">down</span>(k), <span class="built_in">up</span>(k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;k, &amp;x);</span><br><span class="line">            k = ph[k];</span><br><span class="line">            h[k] = x;</span><br><span class="line">            <span class="built_in">down</span>(k), <span class="built_in">up</span>(k);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="哈希表：">哈希表：</h2>
<p><strong>问题描述：</strong></p>
<p>维护一个集合,支持如下几种操作:<br>
1.“I x”,插入一个数x;<br>
2.“Q x”,询问数x是否在集合中出现过;</p>
<p>现在要进行N次操作，对于每个询问操作输出对应的结果。</p>
<p><strong>输入格式：</strong></p>
<p>第一行包含整数N，表示操作数量。<br>
接下来N行，每行包含一个操作指令,操作指令为&quot;Ix&quot;, &quot;Q x”中的一种。</p>
<p><strong>输出格式：</strong></p>
<p>对于每个询问指令“Q x&quot;，输出一个询问结果，如果x在集合中出现过,则输出&quot;Yes&quot;, 否则输出&quot;No&quot;。<br>
每个结果占一行。</p>
<p><strong>数据范围：</strong></p>
<p>1 ≤N≤1e5</p>
<p>-1e9≤x≤1e9</p>
<p><strong>输入样例：</strong></p>
<blockquote>
<p>5</p>
<p>I 1</p>
<p>I 2</p>
<p>I 3</p>
<p>Q 2</p>
<p>Q 5</p>
</blockquote>
<p><strong>输出样例：</strong></p>
<blockquote>
<p>Yes</p>
<p>No</p>
</blockquote>
<p><strong>拉链法：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100003</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> h[N], e[N], ne[N], idx;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> k = (x % N + N) % N;</span><br><span class="line">    e[idx] = x;</span><br><span class="line">    ne[idx] = h[k];</span><br><span class="line">    h[k] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> k = (x % N + N) % N;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h[k]; i != <span class="number">-1</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(e[i] == x) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span> h);</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">         <span class="type">char</span> op[<span class="number">2</span>];</span><br><span class="line">         <span class="type">int</span> x;</span><br><span class="line">         <span class="built_in">scanf</span>(<span class="string">&quot;%s%d&quot;</span>, op, &amp;x);</span><br><span class="line">         <span class="keyword">if</span>(*op == <span class="string">&#x27;I&#x27;</span>) <span class="built_in">insert</span>(x);</span><br><span class="line">         <span class="keyword">else</span> &#123;</span><br><span class="line">             <span class="keyword">if</span>(<span class="built_in">find</span>(x)) <span class="built_in">puts</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">             <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>开放寻址法：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200003</span>, null = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> h[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> k = (x % N + N) % N;</span><br><span class="line">    <span class="keyword">while</span>(h[k] != null &amp;&amp; h[k] != x)&#123;</span><br><span class="line">        k++;</span><br><span class="line">        <span class="keyword">if</span>(k == N) k = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> h);</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        <span class="type">char</span> op[<span class="number">2</span>];</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s%d&quot;</span>, op, &amp;x);</span><br><span class="line">        <span class="type">int</span> k = <span class="built_in">find</span>(x);</span><br><span class="line">        <span class="keyword">if</span>(*op == <span class="string">&#x27;I&#x27;</span>)&#123;</span><br><span class="line">            h[k] = x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(h[k] != null) <span class="built_in">puts</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="字符串哈希：">字符串哈希：</h2>
<p><strong>问题描述：</strong></p>
<p>给定一个长度为n的字符串， 再给定m个询问，每个询问包含四个整数l,r1,l2,r2,请你判断[l1, r1]和[l2,r2]这<br>
两个区间所包含的字符串子串是否完全相同。<br>
字符串中只包含大小写英文字母和数字。</p>
<p><strong>输入格式：</strong></p>
<p>第一行包含整数n和m,表示字符串长度和询问次数。<br>
第二行包含一个长度为n的字符串,字符串中只包含大小写英文字母和数字。<br>
接下来m行,每行包含四个整数61,r1,l2,r2,表示一次询问所涉及的两个区间。<br>
注意，字符串的位置从1开始编号。</p>
<p><strong>输出格式：</strong></p>
<p>对于每个询问输出一个结果，如果两个字符串子串完全相同则输出“Yes&quot;,否则输出“No&quot;。<br>
每个结果占一行。</p>
<p><strong>数据范围：</strong></p>
<p>1 ≤n,m≤1e5</p>
<p><strong>输入样例：</strong></p>
<blockquote>
<p>8 3</p>
<p>aabbaabb</p>
<p>1 3 5 7</p>
<p>1 3 6 8</p>
<p>1 2 1 2</p>
</blockquote>
<p><strong>输出样例：</strong></p>
<blockquote>
<p>Yes</p>
<p>No</p>
<p>Yes</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> ULL;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>, P = <span class="number">131</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">char</span> str[N];</span><br><span class="line">ULL h[N], p[N];</span><br><span class="line"></span><br><span class="line"><span class="function">ULL <span class="title">get</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> h[r] - h[l - <span class="number">1</span>] * p[r - l + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%s&quot;</span>, &amp;n, &amp;m, str + <span class="number">1</span>);</span><br><span class="line">    p[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        p[i] = p[i - <span class="number">1</span>] * P;</span><br><span class="line">        h[i] = h[i - <span class="number">1</span>] * P + str[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="type">int</span> l1, r1, l2, r2;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;l1, &amp;r1, &amp;l2, &amp;r2);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">get</span>(l1, r1) == <span class="built_in">get</span>(l2, r2)) <span class="built_in">puts</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="STL">STL:</h2>
]]></content>
      <categories>
        <category>算法模板</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>感慨</title>
    <url>/2023/01/13/%E6%84%9F%E6%85%A8/</url>
    <content><![CDATA[<p>一寸土一年木一花一树一贪图</p>
<p>情是种爱偏开在迷途</p>
<p>忘前路忘旧物忘心忘你忘最初</p>
<p>花斑斑留在爱你的路</p>
<p>虔诚夙愿来世路</p>
<p>一念桃花因果渡</p>
<p>那一念几阙时光在重复</p>
<p>听雨书望天湖人间寥寥情难诉</p>
<p>回忆斑斑留在爱你的路</p>
]]></content>
      <categories>
        <category>李季鸿的日常随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>加入《Dev_cpp代码》代码库的操作手册</title>
    <url>/2022/10/31/%E5%8A%A0%E5%85%A5%E3%80%8ADev-cpp%E4%BB%A3%E7%A0%81%E3%80%8B%E4%BB%A3%E7%A0%81%E5%BA%93%E7%9A%84%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/</url>
    <content><![CDATA[<p>考虑到加入我们的代码库以后可能会有源源不断的人加入，so，鄙人打算写一个详细的操作手册告诉后人如何操作（在此不得不吐槽hlh同学，我诚心邀请他和我一起编写此手册，他居然因为懒直接一口拒绝了我。。）</p>
<h3 id="1-安装git">1.安装git</h3>
<blockquote>
<p><a href="https://git-scm.com">https://git-scm.com</a> 这是git的官网</p>
</blockquote>
<p>进入后点击Downloads，下载下面的这个版本：</p>
<span id="more"></span>
<p><img src="https://img-blog.csdnimg.cn/c316df1beec54ccb88001b6baec8f7c0.png" alt="git操作"></p>
<p>然后就是安装，按理说没什么特别需要注意的，一直点击next就行，特别提醒，最好将安装位置放到D盘，并且给文件夹命个简约的名（如果你C盘没有分盘，那当我没说）。</p>
<p>怎么检验是否安装成功了呢？</p>
<p>win+R输入cmd，在这里输入git --version，出现 git GUI 和 git Bash即说明安装成功：</p>
<p><img src="https://img-blog.csdnimg.cn/591ddd1d05234ae1b0bc4dea32964683.png" alt="git安装检查是否成功"></p>
<h3 id="2-使用git">2.使用git</h3>
<p>我们一般最常用的就是git clone 命令来从gitee或者github上面拷贝项目到本地，你可以在电脑任意位置右键，然后会有git bash 命令，如下所示：<br>
<img src="https://img-blog.csdnimg.cn/8c59201713224eef9ef43e1d5ea25167.png" alt="git bash"></p>
<p>点击打开后在终端输入git clone + 项目地址，对于我们本项目来说，项目地址就是点这里复制下来：</p>
<p>对了，在终端的粘贴是右键，然后paste：</p>
<p><img src="https://img-blog.csdnimg.cn/351ee142ecf84cdbb6153940ff34c032.png" alt="项目地址"></p>
<p><img src="https://img-blog.csdnimg.cn/2f3d0c8cdb4f4ffba8d3ce454d128c75.png" alt="git终端操作"></p>
<p><img src="https://img-blog.csdnimg.cn/74a46c3b1cba43efaedfe59faaad344b.png" alt="拷贝成功"></p>
<h3 id="3-使用VS-Code进行上传代码">3.使用VS Code进行上传代码</h3>
<p>首先下载vs code，但我没记错的话，不翻墙的情况下下载的十分慢，但是大家不用担心，优秀的我已经帮大家找到了镜像下载链接：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://vscode.cdn.azure.cn/stable/b4c1bd0a9b03c749ea011b06c6d2676c8091a70c/VSCodeUserSetup-x64-1.57.0.exe</span><br></pre></td></tr></table></figure>
<p>下载好后，用vs code打开我们项目的文件夹，由于文件夹里面有 .gitee文件， 所以vscode十分智能的帮我们连接了远程的仓库，也就是说，你以后在vscode里面操作，最后点击上传，直接就上传到仓库了。</p>
<h3 id="4-上传代码细节">4.上传代码细节</h3>
<p>一定要严格遵守，耽误不了多少时间！！！</p>
<p>一定要严格遵守，耽误不了多少时间！！！</p>
<p>一定要严格遵守，耽误不了多少时间！！！</p>
<h4 id="4-1写代码">4.1写代码</h4>
<p>对于我本人来说，我是喜欢一边看题目，一边用Dev c++敲代码，选择Dev c++原因有三个：</p>
<blockquote>
<ol>
<li>页面简洁；</li>
<li>可以调试不编译（也就是说不会生成exe文件），如果生成了exe文件，提交的话会搞得项目很大，所以<strong>我们只提交cpp文件；</strong></li>
<li>PTA，天梯赛好像都是之只能使用Dev c++，现在适应了，比赛时候会轻松不少。</li>
</ol>
</blockquote>
<p>这是我的刷题姿势：（提交成功后直接ctrl+s保存到文件夹中）</p>
<p><img src="https://img-blog.csdnimg.cn/b7695be1737a4c8d9e79a0d16c548ef9.png" alt="刷题姿势"></p>
<h4 id="4-2提交代码">4.2提交代码</h4>
<p>上面用Dev c++保存好之后，用VScode打开项目文件夹，你做了什么增删改操作，vscode都能检测到：</p>
<p><img src="https://img-blog.csdnimg.cn/98e6571399ff4a648c3abe28f5e30f23.png" alt="检测到，显示角标"></p>
<p>每次提交之前，在README.md里面填写一下信息，按照上面的格式复制粘贴就好：</p>
<p><img src="https://img-blog.csdnimg.cn/d66833038e694ca88f67cb817ef2dd8e.png" alt="README.md文档修改"></p>
<p>然后，你需要填写你操作的是啥，这样的备注可以简写，几个字概括就好，点击提交，然后点击同步，显示下面界面就说明提交成功：</p>
<p><img src="https://img-blog.csdnimg.cn/b2d42369f3d146febc0ca10ecaee8a5c.png" alt="写好备注"></p>
<p><img src="https://img-blog.csdnimg.cn/94654393778d4cb4a6541868ef5c06f8.png" alt="提交成功"></p>
<h3 id="5-QQ群">5.QQ群</h3>
<p>以上就是所有流程，不难，一步步来肯定会成功，有任何问题及时在群里交流，QQ群：</p>
<p><img src="https://img-blog.csdnimg.cn/9b010ff715644445b0c667d95eb228c9.jpeg" alt="QQ交流群"></p>
]]></content>
      <categories>
        <category>代码库</category>
      </categories>
      <tags>
        <tag>刷题</tag>
        <tag>gitee</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode刷题</title>
    <url>/2022/10/31/LeetCode%E5%88%B7%E9%A2%98/</url>
    <content><![CDATA[<h1><strong>LeetCode刷题记录</strong></h1>
<h1>贪心算法</h1>
<h2 id="435——无重叠区间"><a href="https://leetcode.cn/problems/non-overlapping-intervals/">435——无重叠区间</a></h2>
<blockquote>
<p>2022-08-014</p>
</blockquote>
<p><strong>方法1.动态规划</strong></p>
<ul>
<li>
<p>思路: dp[i]表示前i个区间中最大不重合区间的个数，首先将区间数组按左边界排序，找出intervals中最多有多少个不重复的区间，动态规划方程dp[i] = Math.max(dp[i]，dp[j] + 1)。intervals的长度减去最多的不重复的区间就是最少删除区间的个数</p>
</li>
<li>
<p>复杂度:时间复杂度0(n^2)，两层嵌套循环leetcode执行超时复杂度过高。空间复杂度0(n), dp数组的空间</p>
<p><strong>javascript</strong></p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//leetcode执行超时 复杂度过高</span></span><br><span class="line"><span class="keyword">var</span> eraseOverlapIntervals = <span class="keyword">function</span> (<span class="params">intervals</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!intervals.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    intervals.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a[<span class="number">0</span>] - b[<span class="number">0</span>]); <span class="comment">//按左边界排序</span></span><br><span class="line">    <span class="keyword">const</span> n = intervals.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">const</span> dp = <span class="keyword">new</span> <span class="title class_">Array</span>(n).<span class="title function_">fill</span>(<span class="number">1</span>); <span class="comment">//初始化dp数组</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">            <span class="comment">//循环i,j找出intervals中最多有多少个不重复的区间</span></span><br><span class="line">            <span class="comment">//j的右边界小于i的左边界 相当于多出了一个不重合区间</span></span><br><span class="line">            <span class="keyword">if</span> (intervals[j][<span class="number">1</span>] &lt;= intervals[i][<span class="number">0</span>]) &#123;</span><br><span class="line">                dp[i] = <span class="title class_">Math</span>.<span class="title function_">max</span>(dp[i], dp[j] + <span class="number">1</span>); <span class="comment">//更新dp[i]</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n - <span class="title class_">Math</span>.<span class="title function_">max</span>(...dp); <span class="comment">//n减去最多的不重复的区间 就是最少删除区间的个数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p><strong>java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">eraseOverlapIntervals</span><span class="params">(<span class="type">int</span>[][] intervals)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (intervals.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Arrays.sort(intervals, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;<span class="type">int</span>[]&gt;() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span>[] interval1, <span class="type">int</span>[] interval2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> interval1[<span class="number">0</span>] - interval2[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> intervals.length;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        Arrays.fill(dp, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (intervals[j][<span class="number">1</span>] &lt;= intervals[i][<span class="number">0</span>]) &#123;</span><br><span class="line">                    dp[i] = Math.max(dp[i], dp[j] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n - Arrays.stream(dp).max().getAsInt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>方法2.贪心</strong></p>
<ul>
<li>
<p>思路：intervals按右边界排序，然后从左往右遍历，右边界结束的越早，留给后面的区间的空间就越大，不重合的区间个数就越多，intervals的长度减去最多的不重复的区间 就是最少删除区间的个数</p>
</li>
<li>
<p>复杂度：时间复杂度O(nlogn)，数组排序O(nlogn)，循环一次数组O(n)。空间复杂度O(logn)，排序需要的栈空间</p>
<p><strong>javascript</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> eraseOverlapIntervals = <span class="keyword">function</span> (<span class="params">intervals</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!intervals.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//按右边界排序，然后从左往右遍历，右边界结束的越早，留给后面的区间的空间就越大，不重合的区间个数就越多</span></span><br><span class="line">    intervals.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a[<span class="number">1</span>] - b[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> n = intervals.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">let</span> right = intervals[<span class="number">0</span>][<span class="number">1</span>]; <span class="comment">//right初始化为第一个区间的右边界</span></span><br><span class="line">    <span class="keyword">let</span> ans = <span class="number">1</span>; <span class="comment">//最多的不重合区间的个数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="comment">//循环区间数组</span></span><br><span class="line">        <span class="keyword">if</span> (intervals[i][<span class="number">0</span>] &gt;= right) &#123;</span><br><span class="line">            <span class="comment">//当区间的左边界大于上一个区间的右边界的时候 说明是一对不重合区间</span></span><br><span class="line">            ++ans; <span class="comment">//ans加1</span></span><br><span class="line">            right = intervals[i][<span class="number">1</span>]; <span class="comment">//更新right</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n - ans; <span class="comment">//intervals的长度减去最多的不重复的区间 就是最少删除区间的个数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">eraseOverlapIntervals</span><span class="params">(<span class="type">int</span>[][] intervals)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (intervals.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Arrays.sort(intervals, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;<span class="type">int</span>[]&gt;() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span>[] interval1, <span class="type">int</span>[] interval2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> interval1[<span class="number">1</span>] - interval2[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> intervals.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> intervals[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (intervals[i][<span class="number">0</span>] &gt;= right) &#123;</span><br><span class="line">                ++ans;</span><br><span class="line">                right = intervals[i][<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n - ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>刷题</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/10/31/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start">Quick Start</h2>
<span id="more"></span>
<h3 id="Create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>通知</title>
    <url>/2022/10/23/%E9%80%9A%E7%9F%A5/</url>
    <content><![CDATA[<h2 id="通知">通知</h2>
<p>由于精力不足，从今天起只在我新开的代码库更新代码，并且没有题目（自行搜索题目），代码库网址在这：<br>
<a href="https://gitee.com/ljh04250909/dev-cpp-code">https://gitee.com/ljh04250909/dev-cpp-code</a><br>
欢迎大家访问！</p>
<div align="center">
    <a href=" " alt="个人照" target="_blank"><img src="https://bh04250909.github.io/images/IMG_20220907_154642.jpg" height="250px"></a>
</div>
<div align="center">
    <a href="https://bh04250909.github.io/" target="_blank"><img src="https://img.shields.io/badge/Li__Jihong-CPP-brightgreen.svg"></a>
    <a href="https://bh04250909.github.io/" target="_blank"><img src="https://img.shields.io/badge/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-%E7%BD%91%E7%AB%99-red.svg"></a>
    <a href="https://blog.csdn.net/BH04250909?spm=1010.2135.3001.5421" target="_blank"><img src="https://img.shields.io/badge/%E4%B8%AA%E4%BA%BA-CSDN-orange.svg"></a>
<div>
<h2 id="Dev-cpp代码">Dev_cpp代码</h2>
<h4 id="介绍">介绍</h4>
<p>用来记录我在Dev_cpp上面写的代码</p>
<h4 id="打个小广告">打个小广告</h4>
<p>我的个人博客网站欢迎大家访问：<a href="https://bh04250909.github.io/">https://bh04250909.github.io/</a></p>
</div></div>]]></content>
      <categories>
        <category>代码库</category>
      </categories>
      <tags>
        <tag>gitee</tag>
      </tags>
  </entry>
  <entry>
    <title>PTA天梯赛2022-10-10刷题</title>
    <url>/2022/10/10/PTA%E5%A4%A9%E6%A2%AF%E8%B5%9B2022-10-10%E5%88%B7%E9%A2%98/</url>
    <content><![CDATA[<p><a href="https://pintia.cn/problem-sets/994805046380707840/exam/problems/994805103557459968">PTA-天梯赛——L1-030 一帮一</a></p>
<p>“一帮一学习小组”是中小学中常见的学习组织方式，老师把学习成绩靠前的学生跟学习成绩靠后的学生排在一组。本题就请你编写程序帮助老师自动完成这个分配工作，即在得到全班学生的排名后，在当前尚未分组的学生中，将名次最靠前的学生与名次最靠后的异性学生分为一组。</p>
<h6 id="输入格式：">输入格式：</h6>
<p>输入第一行给出正偶数N（≤50），即全班学生的人数。此后N行，按照名次从高到低的顺序给出每个学生的性别（0代表女生，1代表男生）和姓名（不超过8个英文字母的非空字符串），其间以1个空格分隔。这里保证本班男女比例是1:1，并且没有并列名次。</p>
<h6 id="输出格式：">输出格式：</h6>
<p>每行输出一组两个学生的姓名，其间以1个空格分隔。名次高的学生在前，名次低的学生在后。小组的输出顺序按照前面学生的名次从高到低排列。</p>
<h6 id="输入样例：">输入样例：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">8</span><br><span class="line">0 Amy</span><br><span class="line">1 Tom</span><br><span class="line">1 Bill</span><br><span class="line">0 Cindy</span><br><span class="line">0 Maya</span><br><span class="line">1 John</span><br><span class="line">1 Jack</span><br><span class="line">0 Linda</span><br></pre></td></tr></table></figure>
<h6 id="输出样例：">输出样例：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Amy Jack</span><br><span class="line">Tom Linda</span><br><span class="line">Bill Maya</span><br><span class="line">Cindy John</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h6 id="我的写法">我的写法</h6>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">stu</span></span><br><span class="line">&#123;    </span><br><span class="line">	<span class="type">int</span> sex;    </span><br><span class="line">	string name;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">	<span class="type">int</span> n=<span class="number">0</span>;    </span><br><span class="line">	cin&gt;&gt;n;    </span><br><span class="line">	vector&lt;stu&gt; rank;    </span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)    </span><br><span class="line">	&#123;        </span><br><span class="line">		stu temp;        </span><br><span class="line">		cin&gt;&gt;temp.sex&gt;&gt;temp.name;        </span><br><span class="line">		rank.<span class="built_in">push_back</span>(temp);    </span><br><span class="line">	&#125;    </span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;rank.<span class="built_in">size</span>();i++)    </span><br><span class="line">	&#123;        </span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=rank.<span class="built_in">size</span>()<span class="number">-1</span>;j&gt;<span class="number">0</span>;j--)        </span><br><span class="line">		&#123;            </span><br><span class="line">			<span class="keyword">if</span>(rank[i].sex!=rank[j].sex)            </span><br><span class="line">			&#123;                </span><br><span class="line">				cout&lt;&lt;rank[i].name&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;rank[j].name&lt;&lt;endl;                </span><br><span class="line">				rank.<span class="built_in">erase</span>(rank.<span class="built_in">begin</span>()+j);                </span><br><span class="line">				<span class="keyword">break</span>;            </span><br><span class="line">			&#125;        </span><br><span class="line">		&#125;    </span><br><span class="line">	&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C++</category>
        <category>刷题</category>
      </categories>
      <tags>
        <tag>PTA</tag>
        <tag>天体赛</tag>
      </tags>
  </entry>
  <entry>
    <title>PTA天体赛-简单题</title>
    <url>/2022/09/25/PTA%E5%A4%A9%E4%BD%93%E8%B5%9B-%E7%AE%80%E5%8D%95%E9%A2%98/</url>
    <content><![CDATA[<p>今天做的是一些简单的题目，可以用弱智来形容了，但是最后一题你能想到比我更简单的做法吗？<br>
C++要多看STL，多运用标准库函数，容器等等，达到熟练的水平。</p>
<h5 id="PTA-天梯赛——L1-019-谁先倒"><a href="https://pintia.cn/problem-sets/994805046380707840/problems/994805118568873984">PTA-天梯赛——L1-019 谁先倒</a></h5>
<p>划拳是古老中国酒文化的一个有趣的组成部分。酒桌上两人划拳的方法为：每人口中喊出一个数字，同时用手比划出一个数字。如果谁比划出的数字正好等于两人喊出的数字之和，谁就输了，输家罚一杯酒。两人同赢或两人同输则继续下一轮，直到唯一的赢家出现。</p>
<p>下面给出甲、乙两人的酒量（最多能喝多少杯不倒）和划拳记录，请你判断两个人谁先倒。</p>
<h6 id="输入格式：">输入格式：</h6>
<p>输入第一行先后给出甲、乙两人的酒量（不超过100的非负整数），以空格分隔。下一行给出一个正整数<code>N</code>（≤100），随后<code>N</code>行，每行给出一轮划拳的记录，格式为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">甲喊 甲划 乙喊 乙划</span><br></pre></td></tr></table></figure>
<p>其中<code>喊</code>是喊出的数字，<code>划</code>是划出的数字，均为不超过100的正整数（两只手一起划）。</p>
<h6 id="输出格式：">输出格式：</h6>
<p>在第一行中输出先倒下的那个人：<code>A</code>代表甲，<code>B</code>代表乙。第二行中输出没倒的那个人喝了多少杯。题目保证有一个人倒下。注意程序处理到有人倒下就终止，后面的数据不必处理。</p>
<span id="more"></span>
<h6 id="输入样例：">输入样例：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 1</span><br><span class="line">6</span><br><span class="line">8 10 9 12</span><br><span class="line">5 10 5 10</span><br><span class="line">3 8 5 12</span><br><span class="line">12 18 1 13</span><br><span class="line">4 16 12 15</span><br><span class="line">15 1 1 16</span><br></pre></td></tr></table></figure>
<h6 id="输出样例：">输出样例：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A</span><br><span class="line">1</span><br></pre></td></tr></table></figure>
<h6 id="我的解法"><strong>我的解法</strong></h6>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> a_max,b_max;  <span class="comment">//甲乙的酒量变量</span></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;a_max,&amp;b_max);</span><br><span class="line">	<span class="type">int</span> n;	<span class="comment">//正整数	N</span></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">	<span class="type">int</span> i,a1,b1,a2,b2,a_n=<span class="number">0</span>,b_n=<span class="number">0</span>; <span class="comment">//a1,b1,a2,b2 甲喊 甲划 乙喊 乙划    a_n=0,b_n=0 甲喝 乙喝</span></span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">	&#123;       <span class="comment">//两人同赢或两人同输则继续下一轮，直到唯一的赢家出现。</span></span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d %d&quot;</span>,&amp;a1,&amp;a2,&amp;b1,&amp;b2);</span><br><span class="line">		<span class="keyword">if</span>(a2==a1+b1&amp;&amp;b2!=a1+b1)&#123;   <span class="comment">//甲输了，那么甲就要喝</span></span><br><span class="line">			a_n++;</span><br><span class="line">        &#125;</span><br><span class="line">		<span class="keyword">if</span>(b2==a1+b1&amp;&amp;a2!=a1+b1)&#123;   <span class="comment">//乙输了，那么乙就要喝</span></span><br><span class="line">            b_n++;</span><br><span class="line">        &#125;</span><br><span class="line">		<span class="keyword">if</span>(a_n==a_max+<span class="number">1</span>||b_n==b_max+<span class="number">1</span>)&#123; <span class="comment">//两人同赢或两人同输则继续下一轮，直到唯一的赢家出现。</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(a_n==a_max+<span class="number">1</span>)</span><br><span class="line">	&#123;  <span class="comment">//说明甲喝的已经超过自己的酒量了，甲就输了</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;A\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,b_n);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;  <span class="comment">//说明乙喝的已经超过自己的酒量了，乙就输了</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;B\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a_n);</span><br><span class="line">	&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<hr>
<hr>
<h5 id="PTA-天梯赛——L1-020-帅到没朋友"><a href="https://pintia.cn/problem-sets/994805046380707840/problems/994805117167976448">PTA-天梯赛——L1-020 帅到没朋友</a></h5>
<p>当芸芸众生忙着在朋友圈中发照片的时候，总有一些人因为太帅而没有朋友。本题就要求你找出那些帅到没有朋友的人。</p>
<h6 id="输入格式：-2">输入格式：</h6>
<p>输入第一行给出一个正整数<code>N</code>（≤100），是已知朋友圈的个数；随后<code>N</code>行，每行首先给出一个正整数<code>K</code>（≤1000），为朋友圈中的人数，然后列出一个朋友圈内的所有人——为方便起见，每人对应一个ID号，为5位数字（从00000到99999），ID间以空格分隔；之后给出一个正整数<code>M</code>（≤10000），为待查询的人数；随后一行中列出<code>M</code>个待查询的ID，以空格分隔。</p>
<p>注意：没有朋友的人可以是根本没安装“朋友圈”，也可以是只有自己一个人在朋友圈的人。虽然有个别自恋狂会自己把自己反复加进朋友圈，但题目保证所有<code>K</code>超过1的朋友圈里都至少有2个不同的人。</p>
<h6 id="输出格式：-2">输出格式：</h6>
<p>按输入的顺序输出那些帅到没朋友的人。ID间用1个空格分隔，行的首尾不得有多余空格。如果没有人太帅，则输出</p>
<p><code>No one is handsome</code>。</p>
<p>注意：同一个人可以被查询多次，但只输出一次。</p>
<!--more-->
<h6 id="输入样例1：">输入样例1：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">3 11111 22222 55555</span><br><span class="line">2 33333 44444</span><br><span class="line">4 55555 66666 99999 77777</span><br><span class="line">8</span><br><span class="line">55555 44444 10000 88888 22222 11111 23333 88888</span><br></pre></td></tr></table></figure>
<h6 id="输出样例1：">输出样例1：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10000 88888 23333</span><br></pre></td></tr></table></figure>
<h6 id="输入样例2：">输入样例2：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">3 11111 22222 55555</span><br><span class="line">2 33333 44444</span><br><span class="line">4 55555 66666 99999 77777</span><br><span class="line">4</span><br><span class="line">55555 44444 22222 11111</span><br></pre></td></tr></table></figure>
<h6 id="输出样例2：">输出样例2：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">No one is handsome</span><br></pre></td></tr></table></figure>
<h6 id="解法1（C）"><strong>解法1（C）</strong></h6>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> fri[<span class="number">100000</span>] = &#123;<span class="number">0</span>&#125;;						<span class="comment">//下标即id，1为有朋友，0为没朋友，初始默认都没朋友 </span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span> N; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">		<span class="type">int</span> k; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;k);				<span class="comment">//第i+1个朋友圈里的人数 </span></span><br><span class="line">		<span class="type">int</span> id[k];</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; k; j++) &#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;id[j]);</span><br><span class="line">			<span class="keyword">if</span>(k != <span class="number">1</span>) &#123;fri[id[j]] = <span class="number">1</span>;&#125;	<span class="comment">//该朋友圈里的所有id都有朋友</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> M; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;M);</span><br><span class="line">	<span class="type">int</span> search[M], flag1 = <span class="number">0</span>, n = <span class="number">1</span>;				<span class="comment">//flag1表示有无很帅的人,0表示没有</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; M; i++) </span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;search[i]);		</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; M; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(fri[search[i]] == <span class="number">0</span>) &#123;</span><br><span class="line">			--n; flag1 = <span class="number">1</span>; fri[search[i]] = <span class="number">1</span>;		<span class="comment">//已经查询过的id改为有朋友避免再次查询</span></span><br><span class="line">			<span class="keyword">if</span>(n != <span class="number">0</span>) &#123;<span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);&#125;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%05d&quot;</span>, search[i]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(flag1 == <span class="number">0</span>) &#123;<span class="built_in">printf</span>(<span class="string">&quot;No one is handsome&quot;</span>);&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="解法2（C-）"><strong>解法2（C++）</strong></h6>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n,m,a[<span class="number">100001</span>]=&#123;<span class="number">0</span>&#125;,t,b[<span class="number">10001</span>],k=<span class="number">0</span>;</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(;n--;)</span><br><span class="line">	&#123;</span><br><span class="line">		cin&gt;&gt;m;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">0</span>;l&lt;m;l++)</span><br><span class="line">			&#123;</span><br><span class="line">				cin&gt;&gt;t;</span><br><span class="line">				<span class="keyword">if</span>(m!=<span class="number">1</span>)<span class="comment">//防止自恋狂多次加朋友圈 </span></span><br><span class="line">				a[t]++;</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(;n--;)</span><br><span class="line">		&#123;</span><br><span class="line">			cin&gt;&gt;t;</span><br><span class="line">			<span class="keyword">if</span>(a[t]==<span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				b[k++]=t;</span><br><span class="line">				a[t]=<span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">for</span>(n=<span class="number">0</span>;n&lt;k;n++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%05d&quot;</span>,b[n]);</span><br><span class="line">		<span class="keyword">if</span>(n!=k<span class="number">-1</span>)</span><br><span class="line">		cout&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(!k)</span><br><span class="line">		cout&lt;&lt;<span class="string">&quot;No one is handsome\n&quot;</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h6 id="解法3（C-中的set）"><strong>解法3（C++中的set）</strong></h6>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">set&lt;<span class="type">int</span>&gt; find_s, search_s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> k;</span><br><span class="line">        cin &gt;&gt; k;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; k; j++) &#123;</span><br><span class="line">            <span class="type">int</span> x;</span><br><span class="line">            cin &gt;&gt; x;</span><br><span class="line">            <span class="keyword">if</span> (k &gt; <span class="number">1</span>) find_s.<span class="built_in">insert</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> m;</span><br><span class="line">    cin &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin &gt;&gt; x;</span><br><span class="line">        <span class="keyword">if</span> (!find_s.<span class="built_in">count</span>(x) &amp;&amp; !search_s.<span class="built_in">count</span>(x)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (search_s.<span class="built_in">size</span>()) cout &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">            search_s.<span class="built_in">insert</span>(x);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%05d&quot;</span>, x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!search_s.<span class="built_in">size</span>()) <span class="built_in">printf</span>(<span class="string">&quot;No one is handsome&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="PTA-天梯赛——L1-022-奇偶分家"><a href="https://pintia.cn/problem-sets/994805046380707840/problems/994805114445873152">PTA-天梯赛——L1-022 奇偶分家</a></h5>
<p>给定<code>N</code>个正整数，请统计奇数和偶数各有多少个？</p>
<h6 id="输入格式：-3">输入格式：</h6>
<p>输入第一行给出一个正整<code>N</code>（≤1000）；第2行给出<code>N</code>个非负整数，以空格分隔。</p>
<h6 id="输出格式：-3">输出格式：</h6>
<p>在一行中先后输出奇数的个数、偶数的个数。中间以1个空格分隔。</p>
<!--more-->
<h6 id="输入样例：-2">输入样例：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">9</span><br><span class="line">88 74 101 26 15 0 34 22 77</span><br></pre></td></tr></table></figure>
<h6 id="输出样例：-2">输出样例：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3 6</span><br></pre></td></tr></table></figure>
<h6 id="我的解法-2"><strong>我的解法</strong></h6>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> N;</span><br><span class="line">    <span class="type">int</span> odd=<span class="number">0</span>,even=<span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; N;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="type">int</span> k;</span><br><span class="line">        cin &gt;&gt; k;</span><br><span class="line">        <span class="keyword">if</span>(k%<span class="number">2</span> != <span class="number">0</span>)&#123;</span><br><span class="line">            odd+=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            even+=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;odd&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;even;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="PTA-天梯赛——L1-023-输出GPLT"><a href="https://pintia.cn/problem-sets/994805046380707840/problems/994805113036587008">PTA-天梯赛——L1-023 输出GPLT</a></h5>
<p>给定一个长度不超过10000的、仅由英文字母构成的字符串。请将字符重新调整顺序，按<code>GPLTGPLT....</code>这样的顺序输出，并忽略其它字符。当然，四种字符（不区分大小写）的个数不一定是一样多的，若某种字符已经输出完，则余下的字符仍按<code>GPLT</code>的顺序打印，直到所有字符都被输出。</p>
<h6 id="输入格式：-4">输入格式：</h6>
<p>输入在一行中给出一个长度不超过10000的、仅由英文字母构成的非空字符串。</p>
<h6 id="输出格式：-4">输出格式：</h6>
<p>在一行中按题目要求输出排序后的字符串。题目保证输出非空。</p>
<!--more-->
<h6 id="输入样例：-3">输入样例：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pcTclnGloRgLrtLhgljkLhGFauPewSKgt</span><br></pre></td></tr></table></figure>
<h6 id="输出样例：-3">输出样例：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GPLTGPLTGLTGLGLL</span><br></pre></td></tr></table></figure>
<h6 id="解法1"><strong>解法1</strong></h6>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这也是一道简单的分支循环题</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">char</span> s[<span class="number">10050</span>];</span><br><span class="line">	<span class="type">int</span> arr[<span class="number">4</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s);</span><br><span class="line">	<span class="type">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(s[i] == <span class="string">&#x27;G&#x27;</span>||s[i] == <span class="string">&#x27;g&#x27;</span>) arr[<span class="number">0</span>]++;</span><br><span class="line">		<span class="keyword">if</span>(s[i] == <span class="string">&#x27;P&#x27;</span>||s[i] == <span class="string">&#x27;p&#x27;</span>) arr[<span class="number">1</span>]++;</span><br><span class="line">		<span class="keyword">if</span>(s[i] == <span class="string">&#x27;L&#x27;</span>||s[i] == <span class="string">&#x27;l&#x27;</span>) arr[<span class="number">2</span>]++;</span><br><span class="line">		<span class="keyword">if</span>(s[i] == <span class="string">&#x27;T&#x27;</span>||s[i] == <span class="string">&#x27;t&#x27;</span>) arr[<span class="number">3</span>]++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(arr[<span class="number">0</span>]+arr[<span class="number">1</span>]+arr[<span class="number">2</span>]+arr[<span class="number">3</span>])</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(arr[<span class="number">0</span>]&gt;<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;G&quot;</span>);</span><br><span class="line">			arr[<span class="number">0</span>]--;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(arr[<span class="number">1</span>]&gt;<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;P&quot;</span>);</span><br><span class="line">			arr[<span class="number">1</span>]--;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(arr[<span class="number">2</span>]&gt;<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;L&quot;</span>);</span><br><span class="line">			arr[<span class="number">2</span>]--;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(arr[<span class="number">3</span>]&gt;<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;T&quot;</span>);</span><br><span class="line">			arr[<span class="number">3</span>]--;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h6 id="解法2"><strong>解法2</strong></h6>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">char</span> ch;</span><br><span class="line">	<span class="type">int</span> g=<span class="number">0</span>,p=<span class="number">0</span>,l=<span class="number">0</span>,t=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>((ch=getchar()) != <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		ch=<span class="built_in">toupper</span>(ch);</span><br><span class="line">		<span class="keyword">if</span>(ch == <span class="string">&#x27;G&#x27;</span>) g++;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(ch == <span class="string">&#x27;P&#x27;</span>) p++;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(ch == <span class="string">&#x27;L&#x27;</span>) l++;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(ch == <span class="string">&#x27;T&#x27;</span>) t++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(g || p || l || t)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(g) &#123;<span class="built_in">putchar</span>(<span class="string">&#x27;G&#x27;</span>); g--;&#125;</span><br><span class="line">		<span class="keyword">if</span>(p) &#123;<span class="built_in">putchar</span>(<span class="string">&#x27;P&#x27;</span>); p--;&#125;</span><br><span class="line">		<span class="keyword">if</span>(l) &#123;<span class="built_in">putchar</span>(<span class="string">&#x27;L&#x27;</span>); l--;&#125;</span><br><span class="line">		<span class="keyword">if</span>(t) &#123;<span class="built_in">putchar</span>(<span class="string">&#x27;T&#x27;</span>); t--;&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="PTA-天梯赛——L1-027-出租"><a href="https://pintia.cn/problem-sets/994805046380707840/problems/994805107638517760">PTA-天梯赛——L1-027 出租</a></h5>
<p>下面是新浪微博上曾经很火的一张图：</p>
<img src="/2022/09/25/PTA%E5%A4%A9%E4%BD%93%E8%B5%9B-%E7%AE%80%E5%8D%95%E9%A2%98/source/images/187" alt="出租" style="zoom: 80%;">
<p>一时间网上一片求救声，急问这个怎么破。其实这段代码很简单，<code>index</code>数组就是<code>arr</code>数组的下标，<code>index[0]=2</code> 对应 <code>arr[2]=1</code>，<code>index[1]=0</code> 对应 <code>arr[0]=8</code>，<code>index[2]=3</code> 对应 <code>arr[3]=0</code>，以此类推…… 很容易得到电话号码是<code>18013820100</code>。</p>
<p>本题要求你编写一个程序，为任何一个电话号码生成这段代码 —— 事实上，只要生成最前面两行就可以了，后面内容是不变的。</p>
<h6 id="输入格式：-5">输入格式：</h6>
<p>输入在一行中给出一个由11位数字组成的手机号码。</p>
<h6 id="输出格式：-5">输出格式：</h6>
<p>为输入的号码生成代码的前两行，其中<code>arr</code>中的数字必须按递减顺序给出。</p>
<!--more-->
<h6 id="输入样例：-4">输入样例：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">18013820100</span><br></pre></td></tr></table></figure>
<h6 id="输出样例：-4">输出样例：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int[] arr = new int[]&#123;8,3,2,1,0&#125;;</span><br><span class="line">int[] index = new int[]&#123;3,0,4,3,1,0,2,4,3,4,4&#125;;</span><br></pre></td></tr></table></figure>
<h6 id="我的解法-3"><strong>我的解法</strong></h6>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 用 map 容器存储 arr 序列的值和下标</span></span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;mp;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s; cin &gt;&gt; s;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">      v.<span class="built_in">push_back</span>(s[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//     unique 将 vector 中需重复的移道前面，返回不重复最后一个下标</span></span><br><span class="line"><span class="comment">//     绕后用 vector 中的 erase 删除重复部分</span></span><br><span class="line">    <span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">    v.<span class="built_in">erase</span>(<span class="built_in">unique</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>()), v.<span class="built_in">end</span>());</span><br><span class="line">    </span><br><span class="line"><span class="comment">//     输出去重后按降序排列的 arr 序列</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;int[] arr = new int[]&#123;%d&quot;</span>, v[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; v.<span class="built_in">size</span>(); i++) </span><br><span class="line">    &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;,%d&quot;</span>, v[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&#125;;&quot;</span>);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//     输出号码在 arr 序列中的下标</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; v.<span class="built_in">size</span>(); i++) </span><br><span class="line">    &#123;</span><br><span class="line">			mp[v[i]] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nint[] index = new int[]&#123;&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i) cout &lt;&lt; <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line">        cout &lt;&lt; mp[s[i] - <span class="string">&#x27;0&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&#125;;&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="PTA-天梯赛——L1-036-A乘以B"><a href="https://pintia.cn/problem-sets/994805046380707840/problems/994805095676362752">PTA-天梯赛——L1-036 A乘以B</a></h5>
<p>看我没骗你吧 —— 这是一道你可以在 10 秒内完成的题：给定两个绝对值不超过 100 的整数 A 和 B，输出 A 乘以 B 的值。</p>
<h6 id="输入格式：-6">输入格式：</h6>
<p>输入在第一行给出两个整数 A 和 B（−100≤A,B≤100），数字间以空格分隔。</p>
<h6 id="输出格式：-6">输出格式：</h6>
<p>在一行中输出 A 乘以 B 的值。</p>
<!--more-->
<h6 id="输入样例：-5">输入样例：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-8 13</span><br></pre></td></tr></table></figure>
<h6 id="输出样例：-5">输出样例：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-104</span><br></pre></td></tr></table></figure>
<p>我的解法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> m,n;</span><br><span class="line">    cin&gt;&gt;m&gt;&gt;n;</span><br><span class="line">    <span class="keyword">if</span>((m&gt;=<span class="number">-100</span>)&amp;&amp;(m&lt;=<span class="number">100</span>)&amp;&amp;(n&gt;=<span class="number">-100</span>)&amp;&amp;(n&lt;=<span class="number">100</span>))&#123;</span><br><span class="line">        cout&lt;&lt;m*n;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="PTA-天梯赛——L1-038-新世界"><a href="https://pintia.cn/problem-sets/994805046380707840/problems/994805093038145536">PTA-天梯赛——L1-038 新世界</a></h5>
<p>这道超级简单的题目没有任何输入。</p>
<p>你只需要在第一行中输出程序员钦定名言“Hello World”，并且在第二行中输出更新版的“Hello New World”就可以了。</p>
<h6 id="输入样例：-6">输入样例：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">无</span><br></pre></td></tr></table></figure>
<h6 id="输出样例：-6">输出样例：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hello World</span><br><span class="line">Hello New World</span><br></pre></td></tr></table></figure>
<!--more-->
<p>我的解法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Hello World&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Hello New World&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="PTA-天梯赛——L1-052-2018我们要赢"><a href="https://pintia.cn/problem-sets/994805046380707840/problems/994805078400024576">PTA-天梯赛——L1-052 2018我们要赢</a></h5>
<p>2018年天梯赛的注册邀请码是“2018wmyy”，意思就是“2018我们要赢”。本题就请你用汉语拼音输出这句话。</p>
<h6 id="输入格式：-7">输入格式：</h6>
<p>本题没有输入。</p>
<h6 id="输出格式：-7">输出格式：</h6>
<p>在第一行中输出：“2018”；第二行中输出：“wo3 men2 yao4 ying2 !”。</p>
<h6 id="输入样例：-7">输入样例：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">无</span><br></pre></td></tr></table></figure>
<h6 id="输出样例：-7">输出样例：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2018</span><br><span class="line">wo3 men2 yao4 ying2 !</span><br></pre></td></tr></table></figure>
<!--more-->
<p>我的解法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;2018&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;wo3 men2 yao4 ying2 !&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="PTA-天梯赛——L1-057-PTA使我精神焕发"><a href="https://pintia.cn/problem-sets/994805046380707840/problems/1111914599408664576">PTA-天梯赛——L1-057 PTA使我精神焕发</a></h5>
<h6 id="输入格式：-8">输入格式：</h6>
<p>本题没有输入。</p>
<h6 id="输出格式：-8">输出格式：</h6>
<p>在一行中按照样例输出，以惊叹号结尾。</p>
<h6 id="输入样例：-8">输入样例：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">无</span><br></pre></td></tr></table></figure>
<h6 id="输出样例：-8">输出样例：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PTA shi3 wo3 jing1 shen2 huan4 fa1 !</span><br></pre></td></tr></table></figure>
<!--more-->
<p>我的解法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;PTA shi3 wo3 jing1 shen2 huan4 fa1 !&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="PTA-天梯赛——L1-065-嫑废话上代码"><a href="https://pintia.cn/problem-sets/994805046380707840/problems/1336215880692482048">PTA-天梯赛——L1-065 嫑废话上代码</a></h5>
<p>Linux 之父 Linus Torvalds 的名言是：“Talk is cheap. Show me the code.”（嫑废话，上代码）。本题就请你直接在屏幕上输出这句话。</p>
<h6 id="输入格式：-9">输入格式：</h6>
<p>本题没有输入。</p>
<h6 id="输出格式：-9">输出格式：</h6>
<p>在一行中输出 Talk is cheap. Show me the code.。</p>
<h6 id="输入样例：-9">输入样例：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">无</span><br></pre></td></tr></table></figure>
<h6 id="输出样例：-9">输出样例：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Talk is cheap. Show me the code.</span><br></pre></td></tr></table></figure>
<!--more-->
<p>我的解法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Talk is cheap. Show me the code.&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="PTA-天梯赛——L1-066-猫是液体"><a href="https://pintia.cn/problem-sets/994805046380707840/problems/1336215880692482049">PTA-天梯赛——L1-066 猫是液体</a></h5>
<p>测量一个人的体积是很难的，但猫就不一样了。因为猫是液体，所以可以很容易地通过测量一个长方体容器的容积来得到容器里猫的体积。本题就请你完成这个计算。</p>
<h6 id="输入格式：-10">输入格式：</h6>
<p>输入在第一行中给出 3 个不超过 100 的正整数，分别对应容器的长、宽、高。</p>
<h6 id="输出格式：-10">输出格式：</h6>
<p>在一行中输出猫的体积。</p>
<h6 id="输入样例：-10">输入样例：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">23 15 20</span><br></pre></td></tr></table></figure>
<h6 id="输出样例：-10">输出样例：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6900</span><br></pre></td></tr></table></figure>
<!--more-->
<p>我的解法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x,y,z;</span><br><span class="line">    cin&gt;&gt;x&gt;&gt;y&gt;&gt;z;</span><br><span class="line">    <span class="keyword">if</span>((x&gt;<span class="number">0</span>)&amp;&amp;(x&lt;=<span class="number">100</span>)&amp;&amp;(y&gt;<span class="number">0</span>)&amp;&amp;(y&lt;=<span class="number">100</span>)&amp;&amp;(z&gt;<span class="number">0</span>)&amp;&amp;(z&lt;=<span class="number">100</span>))&#123;</span><br><span class="line">        cout&lt;&lt;x*y*z;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="PTA-天梯赛——L1-073-人与神"><a href="https://pintia.cn/problem-sets/994805046380707840/problems/1386335159927652352">PTA-天梯赛——L1-073 人与神</a></h5>
<p>跨界大神 L. Peter Deutsch 有一句名言：“To iterate is human, to recurse divine.”（迭代的是人，递归的是神）。本题就请你直接在屏幕上输出这句话。</p>
<h6 id="输入格式：-11">输入格式：</h6>
<p>本题没有输入。</p>
<h6 id="输出格式：-11">输出格式：</h6>
<p>在一行中输出 To iterate is human, to recurse divine.。</p>
<h6 id="输入样例：-11">输入样例：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">无</span><br></pre></td></tr></table></figure>
<h6 id="输出样例：-11">输出样例：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">To iterate is human, to recurse divine.</span><br></pre></td></tr></table></figure>
<!--more-->
<p>我的解法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;To iterate is human, to recurse divine.&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="PTA-天梯赛——L1-074-两小时学完C语言"><a href="https://pintia.cn/problem-sets/994805046380707840/problems/1386335159927652353">PTA-天梯赛——L1-074 两小时学完C语言</a></h5>
<p>知乎上有个宝宝问：“两个小时内如何学完 C 语言？”当然，问的是“学完”并不是“学会”。<br>
假设一本 C 语言教科书有 N 个字，这个宝宝每分钟能看 K 个字，看了 M 分钟。还剩多少字没有看？</p>
<h6 id="输入格式：-12">输入格式：</h6>
<p>输入在一行中给出 3 个正整数，分别是 N（不超过 400 000），教科书的总字数；K（不超过 3 000），是宝宝每分钟能看的字数；M（不超过 120），是宝宝看书的分钟数。<br>
题目保证宝宝看完的字数不超过 N。</p>
<h6 id="输出格式：-12">输出格式：</h6>
<p>在一行中输出宝宝还没有看的字数。</p>
<h6 id="输入样例：-12">输入样例：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">100000 1000 72</span><br></pre></td></tr></table></figure>
<h6 id="输出样例：-12">输出样例：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">28000</span><br></pre></td></tr></table></figure>
<!--more-->
<p>我的解法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> N,K,M;</span><br><span class="line">    cin&gt;&gt;N&gt;&gt;K&gt;&gt;M;</span><br><span class="line">    <span class="keyword">if</span>(N&gt;=K*M)&#123;</span><br><span class="line">        cout&lt;&lt;N-(K*M);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="PTA-天梯赛——L1-082-种钻石"><a href="https://pintia.cn/problem-sets/994805046380707840/problems/1518581097939525632">PTA-天梯赛——L1-082 种钻石</a></h5>
<p>2019年10月29日，中央电视台专题报道，中国科学院在培育钻石领域，取得科技突破。科学家们用金刚石的籽晶片作为种子，利用甲烷气体在能量作用下形成碳的等离子体，慢慢地沉积到钻石种子上，一周“种”出了一颗 1 克拉大小的钻石。</p>
<p>本题给出钻石的需求量和人工培育钻石的速度，请你计算出货需要的时间。</p>
<h6 id="输入格式：-13">输入格式：</h6>
<p>输入在一行中给出钻石的需求量 N（不超过 1000000的正整数，以微克拉为单位）和人工培育钻石的速度 v（1≤v≤200，以微克拉/天为单位的整数）。</p>
<h6 id="输出格式：-13">输出格式：</h6>
<p>在一行中输出培育 N 微克拉钻石需要的整数天数。不到一天的时间不算在内。</p>
<h6 id="输入样例：-13">输入样例：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">102000 130</span><br></pre></td></tr></table></figure>
<h6 id="输出样例：-13">输出样例：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">784</span><br></pre></td></tr></table></figure>
<!--more-->
<p>我的解法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> N,v;</span><br><span class="line">    cin&gt;&gt;N&gt;&gt;v;</span><br><span class="line">    cout&lt;&lt;N/v;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="PTA-天梯赛——L1-084-拯救外星人"><a href="https://pintia.cn/problem-sets/994805046380707840/problems/1518581337161646080">PTA-天梯赛——L1-084 拯救外星人</a></h5>
<p>你的外星人朋友不认得地球上的加减乘除符号，但是会算阶乘 —— 正整数 N 的阶乘记为 “N!”，是从 1 到 N 的连乘积。所以当他不知道“5+7”等于多少时，如果你告诉他等于“12!”，他就写出了“479001600”这个答案。</p>
<p>本题就请你写程序模仿外星人的行为。</p>
<h6 id="输入格式：-14">输入格式：</h6>
<p>输入在一行中给出两个正整数 A 和 B。</p>
<h6 id="输出格式：-14">输出格式：</h6>
<p>在一行中输出 (A+B) 的阶乘。题目保证 (A+B) 的值小于 12。</p>
<h6 id="输入样例：-14">输入样例：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3 6</span><br></pre></td></tr></table></figure>
<h6 id="输出样例：-14">输出样例：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">362880</span><br></pre></td></tr></table></figure>
<!--more-->
<p>我的解法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">JieCheng</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> (x*<span class="built_in">JieCheng</span>(x<span class="number">-1</span>));   </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> A,B;</span><br><span class="line">    cin&gt;&gt;A&gt;&gt;B;</span><br><span class="line">    <span class="keyword">if</span>(A+B &lt;<span class="number">12</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="built_in">JieCheng</span>(A+B);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="PTA-天梯赛——L1-053-电子汪"><a href="https://pintia.cn/problem-sets/994805046380707840/problems/994805077443723264">PTA-天梯赛——L1-053 电子汪</a></h5>
<p>据说汪星人的智商能达到人类 4 岁儿童的水平，更有些聪明汪会做加法计算。比如你在地上放两堆小球，分别有 1 只球和 2 只球，聪明汪就会用“汪！汪！汪！”表示 1 加 2 的结果是 3。<br>
本题要求你为电子宠物汪做一个模拟程序，根据电子眼识别出的两堆小球的个数，计算出和，并且用汪星人的叫声给出答案。</p>
<h6 id="输入格式：-15">输入格式：</h6>
<p>输入在一行中给出两个 [1, 9] 区间内的正整数 A 和 B，用空格分隔。</p>
<h6 id="输出格式：-15">输出格式：</h6>
<p>在一行中输出 A + B 个Wang!。</p>
<h6 id="输入样例：-15">输入样例：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2 1</span><br></pre></td></tr></table></figure>
<h6 id="输出样例：-15">输出样例：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Wang!Wang!Wang!</span><br></pre></td></tr></table></figure>
<!--more-->
<p>我的解法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> A,B;</span><br><span class="line">    cin&gt;&gt;A&gt;&gt;B;</span><br><span class="line">    string wang = <span class="string">&quot;Wang!&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(A&gt;=<span class="number">1</span> &amp;&amp; A&lt;=<span class="number">9</span> &amp;&amp; B&gt;=<span class="number">1</span> &amp;&amp; B&lt;=<span class="number">9</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=(A+B);i++)&#123;</span><br><span class="line">            cout&lt;&lt;wang;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="PTA-天梯赛——L1-085-试试手气"><a href="https://pintia.cn/problem-sets/994805046380707840/problems/1518581694528933888">PTA-天梯赛——L1-085 试试手气</a></h5>
<p>们知道一个骰子有 6 个面，分别刻了 1 到 6 个点。下面给你 6 个骰子的初始状态，即它们朝上一面的点数，让你一把抓起摇出另一套结果。假设你摇骰子的手段特别精妙，每次摇出的结果都满足以下两个条件：</p>
<p>1、每个骰子摇出的点数都跟它之前任何一次出现的点数不同；<br>
2、在满足条件 1 的前提下，每次都能让每个骰子得到可能得到的最大点数。<br>
那么你应该可以预知自己第 n 次（1≤n≤5）摇出的结果。</p>
<h6 id="输入格式：-16">输入格式：</h6>
<p>输入第一行给出 6 个骰子的初始点数，即 [1,6] 之间的整数，数字间以空格分隔；第二行给出摇的次数 n（1≤n≤5）。</p>
<h6 id="输出格式：-16">输出格式：</h6>
<p>在一行中顺序列出第 n 次摇出的每个骰子的点数。数字间必须以 1 个空格分隔，行首位不得有多余空格。</p>
<h6 id="输入样例：-16">输入样例：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3 6 5 4 1 4</span><br><span class="line">3</span><br></pre></td></tr></table></figure>
<h6 id="输出样例：-16">输出样例：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4 3 3 3 4 3</span><br></pre></td></tr></table></figure>
<h6 id="样例解释-：">样例解释 ：</h6>
<p>这 3 次摇出的结果依次为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6 5 6 6 6 6</span><br><span class="line">5 4 4 5 5 5</span><br><span class="line">4 3 3 3 4 3</span><br></pre></td></tr></table></figure>
<!--more-->
<p>我的解法（网上找的，感觉很强）：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> a[<span class="number">10</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">6</span>;i++)</span><br><span class="line">		cin&gt;&gt;a[i];</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">6</span>;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(i!=<span class="number">1</span>)</span><br><span class="line">		cout&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">		<span class="keyword">if</span>(a[i]&gt;<span class="number">6</span>-n)</span><br><span class="line">		cout&lt;&lt;<span class="number">6</span>-n;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		cout&lt;&lt;<span class="number">7</span>-n;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>刷题</category>
        <category>PTA</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>天梯赛</tag>
      </tags>
  </entry>
  <entry>
    <title>C++中STL用法超详细总结</title>
    <url>/2022/09/23/C-%E4%B8%ADSTL%E7%94%A8%E6%B3%95%E8%B6%85%E8%AF%A6%E7%BB%86%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1>1 什么是STL？</h1>
<p>STL（Standard Template Library），即标准模板库，是一个具有工业强度的，高效的C++程序库。它被容纳于C++标准程序库（C++ Standard Library）中，是ANSI/ISO C++标准中最新的也是极具革命性的一部分。该库包含了诸多在计算机科学领域里所常用的基本数据结构和基本算法。为广大C++程序员们提供了一个可扩展的应用框架，高度体现了软件的可复用性。</p>
<p><strong>STL的一个重要特点是数据结构和算法的分离</strong>。尽管这是个简单的概念，但这种分离确实使得STL变得非常通用。例如，由于STL的sort()函数是完全通用的，你可以用它来操作几乎任何数据集合，包括链表，容器和数组；</p>
<p><strong>STL另一个重要特性是它不是面向对象的</strong>。为了具有足够通用性，STL主要依赖于模板而不是封装，继承和虚函数（多态性）——OOP的三个要素。你在STL中找不到任何明显的类继承关系。这好像是一种倒退，但这正好是使得STL的组件具有广泛通用性的底层特征。另外，由于STL是基于模板，内联函数的使用使得生成的代码短小高效；</p>
<p>从逻辑层次来看，在STL中体现了泛型化程序设计的思想，引入了诸多新的名词，比如像需求（requirements），概念（concept），模型（model），容器（container），算法（algorithmn），迭代（iterator）等。与OOP（object-oriented programming）中的多态（polymorphism）一样，泛型也是一种软件的复用技术；</p>
<p>从实现层次看，整个STL是以一种类型参数化的方式实现的，这种方式基于一个在早先C++标准中没有出现的语言特性–模板（template）。</p>
<span id="more"></span>
<h1>2 STL内容介绍</h1>
<p>STL中六大组件：</p>
<ul>
<li>容器（Container），是一种数据结构，如list，vector，和deques ，以模板类的方法提供。为了访问容器中的数据，可以使用由容器类输出的迭代器；</li>
<li>迭代器（Iterator），提供了访问容器中对象的方法。例如，可以使用一对迭代器指定list或vector中的一定范围的对象。迭代器就如同一个指针。事实上，C++的指针也是一种迭代器。但是，迭代器也可以是那些定义operator*()以及其他类似于指针的操作符地方法的类对象；</li>
<li>算法（Algorithm），是用来操作容器中的数据的模板函数。例如，STL用sort()来对一个vector中的数据进行排序，用find()来搜索一个list中的对象，函数本身与他们操作的数据的结构和类型无关，因此他们可以在从简单数组到高度复杂容器的任何数据结构上使用；</li>
<li>仿函数（Functor）</li>
<li>适配器（Adaptor）</li>
<li>分配器（allocator）</li>
</ul>
<h2 id="2-1-容器">2.1 容器</h2>
<p>STL中的容器有队列容器和关联容器，容器适配器（congtainer adapters：stack,queue，priority queue），位集（bit_set），串包(string_package)等等。<br>
<strong>（1）序列式容器（Sequence containers）</strong>，每个元素都有固定位置－－取决于插入时机和地点，和元素值无关，vector、deque、list；<br>
<strong>Vector</strong>：将元素置于一个动态数组中加以管理，可以随机存取元素（用索引直接存取），数组尾部添加或移除元素非常快速。但是在中部或头部安插元素比较费时；</p>
<p><img src="https://img-blog.csdnimg.cn/643ee4bf5622483a8551180b7d1b6fae.png" alt="vector示意图"></p>
<p>​       <strong>Deque</strong>：是“double-ended queue”的缩写，可以随机存取元素（用索引直接存取），数组头部和尾部添加或移除元素都非常快速。但是在中部或头部安插元素比较费时；</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/98eb42134ccb89eec78c63087ea9bb07.png" alt="Deque示意图"></p>
<blockquote>
<p>deque 和 vector 的最大差异一在于 deque 允许常数时间内对头端或尾端进行元素的插入或移除操作。 vector的开销太大，需要开辟新空间，拷贝。</p>
<p>deque 没有所谓的容量概念，因为它是动态地以分段连续空间组合而成随时可以增加一块新的空间并拼接起来。</p>
<p>虽然 deque 也提供 随机访问的迭代器，但它的迭代器和前面两种容器的都不一样，其设计相当复杂度和精妙，因此，会对各种运算产生一定影响，除非必要，尽可能的选择使用 vector 而非 deque。</p>
</blockquote>
<p>​       <strong>List</strong>：由于链表的存储方式并不是连续的内存空间，因此链表list的迭代器，只支持前移和后移，属于<strong>双向迭代器</strong>，不能跳跃式访问。双向链表，不提供随机存取（按顺序走到需存取的元素，O(n)），在任何位置上执行插入或删除动作都非常迅速，内部只需调整一下指针；<strong>缺点</strong>：对内存空间的耗费较大</p>
<p><img src="https://img-blog.csdnimg.cn/20201019083154101.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjA5NzEwOA==,size_16,color_FFFFFF,t_70#pic_center" alt="List示意图"></p>
<p><strong>（2）关联式容器（Associated containers）</strong>，元素位置取决于特定的排序准则，和插入顺序无关，set、multiset、map、multimap等。<br>
<strong>Set/Multiset</strong>：内部的元素依据其值自动排序，Set内的相同数值的元素只能出现一次，Multisets内可包含多个数值相同的元素，内部由二叉树实现，便于查找；<br>
<strong>Map/Multimap</strong>：Map的元素是成对的键值/实值，内部的元素依据其值自动排序，Map内的相同数值的元素只能出现一次，Multimaps内可包含多个数值相同的元素，内部由二叉树实现，便于查找；</p>
<p>容器类自动申请和释放内存，无需new和delete操作。</p>
<h2 id="2-2-STL迭代器">2.2 STL迭代器</h2>
<p>Iterator（迭代器）模式又称Cursor（游标）模式，用于提供一种方法顺序访问一个聚合对象中各个元素, 而又不需暴露该对象的内部表示。或者这样说可能更容易理解：Iterator模式是运用于聚合对象的一种模式，通过运用该模式，使得我们可以在不知道对象内部表示的情况下，按照一定顺序（由iterator提供的方法）访问聚合对象中的各个元素。</p>
<p>迭代器的作用：能够让迭代器与算法不干扰的相互发展，最后又能无间隙的粘合起来，重载了*，＋＋，＝＝，！＝，＝运算符。用以操作复杂的数据结构，容器提供迭代器，算法使用迭代器；常见的一些迭代器类型：iterator、const_iterator、reverse_iterator和const_reverse_iterator.</p>
<h2 id="2-3-算法">2.3 算法</h2>
<p>函数库对数据类型的选择对其可重用性起着至关重要的作用。举例来说，一个求方根的函数，在使用浮点数作为其参数类型的情况下的可重用性肯定比使用整型作为它的参数类性要高。而C++通过模板的机制允许推迟对某些类型的选择，直到真正想使用模板或者说对模板进行特化的时候，STL就利用了这一点提供了相当多的有用算法。它是在一个有效的框架中完成这些算法的——你可以将所有的类型划分为少数的几类，然后就可以在模版的参数中使用一种类型替换掉同一种类中的其他类型。<br>
STL提供了大约100个实现算法的模版函数，比如算法for_each将为指定序列中的每一个元素调用指定的函数，stable_sort以你所指定的规则对序列进行稳定性排序等等。只要我们熟悉了STL之后，许多代码可以被大大的化简，只需要通过调用一两个算法模板，就可以完成所需要的功能并大大地提升效率。</p>
<p><strong>算法部分主要由头文件<algorithm>，<numeric>和<functional>组成。</functional></numeric></algorithm></strong></p>
<p><algorithm>是所有STL头文件中最大的一个（尽管它很好理解），它是由一大堆模版函数组成的，可以认为每个函数在很大程度上都是独立的，其中常用到的功能范围涉及到比较、交换、查找、遍历操作、复制、修改、移除、反转、排序、合并等等。<br>
<numeric>体积很小，只包括几个在序列上面进行简单数学运算的模板函数，包括加法和乘法在序列上的一些操作。<br>
<functional>中则定义了一些模板类，用以声明函数对象。<br>
STL中算法大致分为四类：</functional></numeric></algorithm></p>
<ul>
<li>非可变序列算法：指不直接修改其所操作的容器内容的算法。</li>
<li>可变序列算法：指可以修改它们所操作的容器内容的算法。</li>
<li>排序算法：对序列进行排序和合并的算法、搜索算法以及有序序列上的集合操作。</li>
<li>数值算法：对容器内容进行数值计算。</li>
</ul>
<p>以下对所有算法进行细致分类并标明功能：</p>
<p><strong>&lt;一&gt;查找算法(13个)：判断容器中是否包含某个值</strong></p>
<table>
<thead>
<tr>
<th><strong>adjacent_find:</strong></th>
<th>在iterator对标识元素范围内，查找一对相邻重复元素，找到则返回指向这对元素的第一个元素的ForwardIterator。否则返回last。重载版本使用输入的二元操作符代替相等的判断。</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>binary_search:</strong></td>
<td><strong>在有序序列中查找value，找到返回true。重载的版本实用指定的比较函数对象或函数指针来判断相等。</strong></td>
</tr>
<tr>
<td><strong>count:</strong></td>
<td><strong>利用等于操作符，把标志范围内的元素与输入值比较，返回相等元素个数。</strong></td>
</tr>
<tr>
<td><strong>count_if:</strong></td>
<td><strong>利用输入的操作符，对标志范围内的元素进行操作，返回结果为true的个数。</strong></td>
</tr>
<tr>
<td><strong>equal_range:</strong></td>
<td><strong>功能类似equal，返回一对iterator，第一个表示lower_bound，第二个表示upper_bound。</strong></td>
</tr>
<tr>
<td><strong>find:</strong></td>
<td><strong>利用底层元素的等于操作符，对指定范围内的元素与输入值进行比较。当匹配时，结束搜索，返回该元素的一个InputIterator。</strong></td>
</tr>
<tr>
<td><strong>find_end:</strong></td>
<td><strong>在指定范围内查找&quot;由输入的另外一对iterator标志的第二个序列&quot;的最后一次出现。找到则返回最后一对的第一个ForwardIterator，否则返回输入的&quot;另外一对&quot;的第一个ForwardIterator。重载版本使用用户输入的操作符代 替等于操作。</strong></td>
</tr>
<tr>
<td><strong>find_first_of:</strong></td>
<td><strong>在指定范围内查找&quot;由输入的另外一对iterator标志的第二个序列&quot;中任意一个元素的第一次出现。重载版本中使用了用户自定义操作符。</strong></td>
</tr>
<tr>
<td><strong>find_if:</strong></td>
<td><strong>使用输入的函数代替等于操作符执行find。</strong></td>
</tr>
<tr>
<td><strong>lower_bound:</strong></td>
<td><strong>返回一个ForwardIterator，指向在有序序列范围内的可以插入指定值而不破坏容器顺序的第一个位置。重载函数使用自定义比较操作。</strong></td>
</tr>
<tr>
<td><strong>upper_bound:</strong></td>
<td><strong>返回一个ForwardIterator，指向在有序序列范围内插入value而不破坏容器顺序的最后一个位置，该位置标志一个大于value的值。重载函数使用自定义比较操作。</strong></td>
</tr>
<tr>
<td><strong>search:</strong></td>
<td><strong>给出两个范围，返回一个ForwardIterator，查找成功指向第一个范围内第一次出现子序列(第二个范围)的位置，查找失败指向last1。重载版本使用自定义的比较操作。</strong></td>
</tr>
<tr>
<td><strong>search_n:</strong></td>
<td><strong>在指定范围内查找val出现n次的子序列。重载版本使用自定义的比较操作。</strong></td>
</tr>
</tbody>
</table>
<p><strong>&lt;二&gt;排序和通用算法(14个)：提供元素排序策略</strong></p>
<table>
<thead>
<tr>
<th><strong>inplace_merge:</strong></th>
<th>合并两个有序序列，结果序列覆盖两端范围。重载版本使用输入的操作进行排序。</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>merge:</strong></td>
<td><strong>合并两个有序序列，存放到另一个序列。重载版本使用自定义的比较。</strong></td>
</tr>
<tr>
<td><strong>nth_element:</strong></td>
<td><strong>将范围内的序列重新排序，使所有小于第n个元素的元素都出现在它前面，而大于它的都出现在后面。重 载版本使用自定义的比较操作。</strong></td>
</tr>
<tr>
<td><strong>partial_sort:</strong></td>
<td><strong>对序列做部分排序，被排序元素个数正好可以被放到范围内。重载版本使用自定义的比较操作。</strong></td>
</tr>
<tr>
<td><strong>partial_sort_copy:</strong></td>
<td><strong>与partial_sort类似，不过将经过排序的序列复制到另一个容器。</strong></td>
</tr>
<tr>
<td><strong>partition:</strong></td>
<td><strong>对指定范围内元素重新排序，使用输入的函数，把结果为true的元素放在结果为false的元素之前。</strong></td>
</tr>
<tr>
<td><strong>random_shuffle:</strong></td>
<td><strong>对指定范围内的元素随机调整次序。重载版本输入一个随机数产生操作。</strong></td>
</tr>
<tr>
<td><strong>reverse:</strong></td>
<td><strong>将指定范围内元素重新反序排序。</strong></td>
</tr>
<tr>
<td><strong>reverse_copy:</strong></td>
<td><strong>与reverse类似，不过将结果写入另一个容器。</strong></td>
</tr>
<tr>
<td><strong>rotate:</strong></td>
<td><strong>将指定范围内元素移到容器末尾，由middle指向的元素成为容器第一个元素。</strong></td>
</tr>
<tr>
<td><strong>rotate_copy:</strong></td>
<td><strong>与rotate类似，不过将结果写入另一个容器。</strong></td>
</tr>
<tr>
<td><strong>sort:</strong></td>
<td><strong>以升序重新排列指定范围内的元素。重载版本使用自定义的比较操作。</strong></td>
</tr>
<tr>
<td><strong>stable_sort:</strong></td>
<td><strong>与sort类似，不过保留相等元素之间的顺序关系。</strong></td>
</tr>
<tr>
<td><strong>stable_partition:</strong></td>
<td><strong>与partition类似，不过不保证保留容器中的相对顺序。</strong></td>
</tr>
</tbody>
</table>
<p><strong>&lt;三&gt;删除和替换算法(15个)</strong></p>
<table>
<thead>
<tr>
<th><strong>copy:</strong></th>
<th>复制序列</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>copy_backward:</strong></td>
<td><strong>与copy相同，不过元素是以相反顺序被拷贝。</strong></td>
</tr>
<tr>
<td><strong>iter_swap:</strong></td>
<td><strong>交换两个ForwardIterator的值。</strong></td>
</tr>
<tr>
<td><strong>remove:</strong></td>
<td><strong>删除指定范围内所有等于指定元素的元素。注意，该函数不是真正删除函数。内置函数不适合使用remove和remove_if函数。</strong></td>
</tr>
<tr>
<td><strong>remove_copy:</strong></td>
<td><strong>将所有不匹配元素复制到一个制定容器，返回OutputIterator指向被拷贝的末元素的下一个位置。</strong></td>
</tr>
<tr>
<td><strong>remove_if:</strong></td>
<td><strong>删除指定范围内输入操作结果为true的所有元素。</strong></td>
</tr>
<tr>
<td><strong>remove_copy_if:</strong></td>
<td><strong>将所有不匹配元素拷贝到一个指定容器。</strong></td>
</tr>
<tr>
<td><strong>replace:</strong></td>
<td><strong>将指定范围内所有等于vold的元素都用vnew代替。</strong></td>
</tr>
<tr>
<td><strong>replace_copy:</strong></td>
<td><strong>与replace类似，不过将结果写入另一个容器。</strong></td>
</tr>
<tr>
<td><strong>replace_if:</strong></td>
<td><strong>将指定范围内所有操作结果为true的元素用新值代替。</strong></td>
</tr>
<tr>
<td><strong>replace_copy_if:</strong></td>
<td><strong>与replace_if，不过将结果写入另一个容器。</strong></td>
</tr>
<tr>
<td><strong>swap:</strong></td>
<td><strong>交换存储在两个对象中的值。</strong></td>
</tr>
<tr>
<td><strong>swap_range:</strong></td>
<td><strong>将指定范围内的元素与另一个序列元素值进行交换。</strong></td>
</tr>
<tr>
<td><strong>unique:</strong></td>
<td><strong>清除序列中重复元素，和remove类似，它也不能真正删除元素。重载版本使用自定义比较操作。</strong></td>
</tr>
<tr>
<td><strong>unique_copy:</strong></td>
<td><strong>与unique类似，不过把结果输出到另一个容器。</strong></td>
</tr>
</tbody>
</table>
<p><strong>&lt;四&gt;排列组合算法(2个)：提供计算给定集合按一定顺序的所有可能排列组合</strong></p>
<table>
<thead>
<tr>
<th><strong>next_permutation:</strong></th>
<th>取出当前范围内的排列，并重新排序为下一个排列。重载版本使用自定义的比较操作。</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>prev_permutation:</strong></td>
<td><strong>取出指定范围内的序列并将它重新排序为上一个序列。如果不存在上一个序列则返回false。重载版本使用自定义的比较操作。</strong></td>
</tr>
</tbody>
</table>
<p><strong>&lt;五&gt;算术算法(4个)</strong></p>
<table>
<thead>
<tr>
<th><strong>accumulate:</strong></th>
<th>iterator对标识的序列段元素之和，加到一个由val指定的初始值上。重载版本不再做加法，而是传进来的二元操作符被应用到元素上。</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>partial_sum:</strong></td>
<td><strong>创建一个新序列，其中每个元素值代表指定范围内该位置前所有元素之和。重载版本使用自定义操作代替加法。</strong></td>
</tr>
<tr>
<td><strong>inner_product:</strong></td>
<td><strong>对两个序列做内积(对应元素相乘，再求和)并将内积加到一个输入的初始值上。重载版本使用用户定义的操作。</strong></td>
</tr>
<tr>
<td><strong>adjacent_difference:</strong></td>
<td><strong>创建一个新序列，新序列中每个新值代表当前元素与上一个元素的差。重载版本用指定二元操作计算相邻元素的差。</strong></td>
</tr>
</tbody>
</table>
<p><strong>&lt;六&gt;生成和异变算法(6个)</strong></p>
<table>
<thead>
<tr>
<th><strong>fill:</strong></th>
<th>将输入值赋给标志范围内的所有元素。</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>fill_n:</strong></td>
<td><strong>将输入值赋给first到first+n范围内的所有元素。</strong></td>
</tr>
<tr>
<td><strong>for_each:</strong></td>
<td><strong>用指定函数依次对指定范围内所有元素进行迭代访问，返回所指定的函数类型。该函数不得修改序列中的元素。</strong></td>
</tr>
<tr>
<td><strong>generate:</strong></td>
<td><strong>连续调用输入的函数来填充指定的范围。</strong></td>
</tr>
<tr>
<td><strong>generate_n:</strong></td>
<td><strong>与generate函数类似，填充从指定iterator开始的n个元素。</strong></td>
</tr>
<tr>
<td><strong>transform:</strong></td>
<td><strong>将输入的操作作用与指定范围内的每个元素，并产生一个新的序列。重载版本将操作作用在一对元素上，另外一 个元素来自输入的另外一个序列。结果输出到指定容器。</strong></td>
</tr>
</tbody>
</table>
<p><strong>&lt;七&gt;关系算法(8个)</strong></p>
<table>
<thead>
<tr>
<th><strong>equal:</strong></th>
<th>如果两个序列在标志范围内元素都相等，返回true。重载版本使用输入的操作符代替默认的等于操作符。</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>includes:</strong></td>
<td><strong>判断第一个指定范围内的所有元素是否都被第二个范围包含，使用底层元素的&lt;操作符，成功返回true。重载版本使用用户输入的函数。</strong></td>
</tr>
<tr>
<td><strong>lexicographical_compare:</strong></td>
<td><strong>比较两个序列。重载版本使用用户自定义比较操作。</strong></td>
</tr>
<tr>
<td><strong>max:</strong></td>
<td><strong>返回两个元素中较大一个。重载版本使用自定义比较操作。</strong></td>
</tr>
<tr>
<td><strong>max_element:</strong></td>
<td><strong>返回一个ForwardIterator，指出序列中最大的元素。重载版本使用自定义比较操作。</strong></td>
</tr>
<tr>
<td><strong>min:</strong></td>
<td><strong>返回两个元素中较小一个。重载版本使用自定义比较操作。</strong></td>
</tr>
<tr>
<td><strong>min_element:</strong></td>
<td><strong>返回一个ForwardIterator，指出序列中最小的元素。重载版本使用自定义比较操作。</strong></td>
</tr>
<tr>
<td><strong>mismatch:</strong></td>
<td><strong>并行比较两个序列，指出第一个不匹配的位置，返回一对iterator，标志第一个不匹配元素位置。如果都匹配，返回每个容器的last。重载版本使用自定义的比较操作。</strong></td>
</tr>
</tbody>
</table>
<p><strong>&lt;八&gt;集合算法(4个)</strong></p>
<table>
<thead>
<tr>
<th><strong>set_union:</strong></th>
<th>构造一个有序序列，包含两个序列中所有的不重复元素。重载版本使用自定义的比较操作。</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>set_intersection:</strong></td>
<td><strong>构造一个有序序列，其中元素在两个序列中都存在。重载版本使用自定义的比较操作。</strong></td>
</tr>
<tr>
<td><strong>set_difference:</strong></td>
<td><strong>构造一个有序序列，该序列仅保留第一个序列中存在的而第二个中不存在的元素。重载版本使用自定义的比较操作。</strong></td>
</tr>
<tr>
<td><strong>set_symmetric_difference:</strong></td>
<td><strong>构造一个有序序列，该序列取两个序列的对称差集(并集-交集)。</strong></td>
</tr>
</tbody>
</table>
<p><strong>&lt;九&gt;堆算法(4个)</strong></p>
<table>
<thead>
<tr>
<th><strong>make_heap:</strong></th>
<th>把指定范围内的元素生成一个堆。重载版本使用自定义比较操作。</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>pop_heap:</strong></td>
<td><strong>并不真正把最大元素从堆中弹出，而是重新排序堆。它把first和last-1交换，然后重新生成一个堆。可使用容器的back来访问被&quot;弹出&quot;的元素或者使用pop_back进行真正的删除。重载版本使用自定义的比较操作。</strong></td>
</tr>
<tr>
<td><strong>push_heap:</strong></td>
<td><strong>假设first到last-1是一个有效堆，要被加入到堆的元素存放在位置last-1，重新生成堆。在指向该函数前，必须先把元素插入容器后。重载版本使用指定的比较操作。</strong></td>
</tr>
<tr>
<td><strong>sort_heap:</strong></td>
<td><strong>对指定范围内的序列重新排序，它假设该序列是个有序堆。重载版本使用自定义比较操作。</strong></td>
</tr>
</tbody>
</table>
<h2 id="2-4-仿函数">2.4 仿函数</h2>
<h3 id="2-4-1-概述">2.4.1 概述</h3>
<p>​		仿函数(functor)，就是使一个类的使用看上去象一个函数。其实现就是类中实现一个operator()，这个类就有了类似函数的行为，就是一个仿函数类了。<br>
　　有些功能的的代码，会在不同的成员函数中用到，想复用这些代码。</p>
<pre><code>   1）公共的函数，可以，这是一个解决方法，不过函数用到的一些变量，就可能成为公共的全局变量，再说为了复用这么一片代码，就要单立出一个函数，也不是很好维护。

   2）仿函数，写一个简单类，除了那些维护一个类的成员函数外，就只是实现一个operator()，在类实例化时，就将要用的，非参数的元素传入类中。
</code></pre>
<h3 id="2-4-2-仿函数-functor-在编程语言中的应用">2.4.2 仿函数(functor)在编程语言中的应用</h3>
<p>1）C语言使用<strong>函数指针</strong>和<strong>回调函数</strong>来实现仿函数，例如一个用来排序的函数可以这样使用仿函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="comment">//int sort_function( const void *a, const void *b);</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sort_function</span><span class="params">( <span class="type">const</span> <span class="type">void</span> *a, <span class="type">const</span> <span class="type">void</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">	<span class="keyword">return</span> *(<span class="type">int</span>*)a-*(<span class="type">int</span>*)b;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   </span><br><span class="line">   <span class="type">int</span> list[<span class="number">5</span>] = &#123; <span class="number">54</span>, <span class="number">21</span>, <span class="number">11</span>, <span class="number">67</span>, <span class="number">22</span> &#125;;</span><br><span class="line">   <span class="built_in">qsort</span>((<span class="type">void</span> *)list, <span class="number">5</span>, <span class="built_in">sizeof</span>(list[<span class="number">0</span>]), sort_function);<span class="comment">//起始地址，个数，元素大小，回调函数 </span></span><br><span class="line">   <span class="type">int</span>  x;</span><br><span class="line">   <span class="keyword">for</span> (x = <span class="number">0</span>; x &lt; <span class="number">5</span>; x++)</span><br><span class="line">		  <span class="built_in">printf</span>(<span class="string">&quot;%i\n&quot;</span>, list[x]);</span><br><span class="line">			      </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2）在C++里，我们通过在一个类中重载括号运算符的方法使用一个函数对象而不是一个普通函数。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">display</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> T &amp;x)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; x &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> ia[] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span> &#125;;</span><br><span class="line">	for_each(ia, ia + <span class="number">5</span>, <span class="built_in">display</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="2-4-3-仿函数在STL中的定义">2.4.3 仿函数在STL中的定义</h3>
<p>要使用STL内建的仿函数，必须包含<functional>头文件。而头文件中包含的仿函数分类包括</functional></p>
<pre><code>     1）算术类仿函数

           加：plus&lt;T&gt;

           减：minus&lt;T&gt;

           乘：multiplies&lt;T&gt;

           除：divides&lt;T&gt;

           模取：modulus&lt;T&gt;

           否定：negate&lt;T&gt;
</code></pre>
<p>例子：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span> </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> ia[] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span> &#125;;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">iv</span><span class="params">(ia, ia + <span class="number">5</span>)</span></span>;</span><br><span class="line">	<span class="comment">//120</span></span><br><span class="line">	cout &lt;&lt; <span class="built_in">accumulate</span>(iv.<span class="built_in">begin</span>(), iv.<span class="built_in">end</span>(), <span class="number">1</span>, <span class="built_in">multiplies</span>&lt;<span class="type">int</span>&gt;()) &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//15</span></span><br><span class="line">	cout &lt;&lt; <span class="built_in">multiplies</span>&lt;<span class="type">int</span>&gt;()(<span class="number">3</span>, <span class="number">5</span>) &lt;&lt; endl;</span><br><span class="line"> </span><br><span class="line">	modulus&lt;<span class="type">int</span>&gt;  modulusObj;</span><br><span class="line">	cout &lt;&lt; <span class="built_in">modulusObj</span>(<span class="number">3</span>, <span class="number">5</span>) &lt;&lt; endl; <span class="comment">// 3 </span></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2）关系运算类仿函数</p>
<pre><code>           等于：equal_to&lt;T&gt;

           不等于：not_equal_to&lt;T&gt;

           大于：greater&lt;T&gt;

           大于等于：greater_equal&lt;T&gt;

           小于：less&lt;T&gt;

           小于等于：less_equal&lt;T&gt;

          从大到小排序：
</code></pre>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span> </span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">display</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> T &amp;x)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; x &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> ia[] = &#123; <span class="number">1</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span> &#125;;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">iv</span><span class="params">(ia, ia + <span class="number">5</span>)</span></span>;</span><br><span class="line">	<span class="built_in">sort</span>(iv.<span class="built_in">begin</span>(), iv.<span class="built_in">end</span>(), <span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">	for_each(iv.<span class="built_in">begin</span>(), iv.<span class="built_in">end</span>(), <span class="built_in">display</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3）逻辑运算仿函数</p>
<pre><code>             逻辑与：logical_and&lt;T&gt;

             逻辑或：logical_or&lt;T&gt;

             逻辑否：logical_no&lt;T&gt;
</code></pre>
<p>除了使用STL内建的仿函数，还可使用自定义的仿函数，具体实例见文章3.4.7.2小结</p>
<h2 id="2-5-容器适配器">2.5 容器适配器</h2>
<p>标准库提供了三种顺序容器适配器：queue(FIFO队列)、priority_queue(优先级队列)、stack(栈)</p>
<p><strong>什么是容器适配器</strong><br>
”适配器是使一种事物的行为类似于另外一种事物行为的一种机制”，适配器对容器进行包装，使其表现出另外一种行为。例如，stack&lt;int, vector<int> &gt;实现了栈的功能，但其内部使用顺序容器vector<int>来存储数据。（相当于是vector<int>表现出了栈的行为）。</int></int></int></p>
<p><strong>容器适配器</strong><br>
要使用适配器，需要加入一下头文件：</p>
<pre><code>#include &lt;stack&gt;        //stack

#include&lt;queue&gt;       //queue、priority_queue
</code></pre>
<table>
<thead>
<tr>
<th>种类</th>
<th>默认顺序容器</th>
<th>可用顺序容器</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>stack</td>
<td>deque</td>
<td>vector、list、deque</td>
<td></td>
</tr>
<tr>
<td>queue</td>
<td>deque</td>
<td>list、deque</td>
<td>基础容器必须提供push_front()运算</td>
</tr>
<tr>
<td>priority_queue</td>
<td>vector</td>
<td>vector、deque</td>
<td>基础容器必须提供随机访问功能</td>
</tr>
</tbody>
</table>
<ul>
<li>定义适配器</li>
</ul>
<p>1、初始化</p>
<p>​    stack<int> stk(dep);</int></p>
<p>2、覆盖默认容器类型</p>
<p>​    stack&lt;int,vector<int> &gt; stk;</int></p>
<ul>
<li>使用适配器</li>
</ul>
<h3 id="2-5-1-stack">2.5.1 stack</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">stack&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">stack&lt; <span class="type">int</span>, vector&lt;<span class="type">int</span>&gt; &gt; stk;  <span class="comment">//覆盖基础容器类型，使用vector实现stk</span></span><br><span class="line">s.<span class="built_in">empty</span>();  <span class="comment">//判断stack是否为空，为空返回true，否则返回false</span></span><br><span class="line">s.<span class="built_in">size</span>();   <span class="comment">//返回stack中元素的个数</span></span><br><span class="line">s.<span class="built_in">pop</span>();    <span class="comment">//删除栈顶元素，但不返回其值</span></span><br><span class="line">s.<span class="built_in">top</span>();    <span class="comment">//返回栈顶元素的值，但不删除此元素</span></span><br><span class="line">s.<span class="built_in">push</span>(item);   <span class="comment">//在栈顶压入新元素item</span></span><br></pre></td></tr></table></figure>
<p>实例：括号匹配</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	string s;</span><br><span class="line">	stack&lt;<span class="type">char</span>&gt; ss;</span><br><span class="line">	<span class="keyword">while</span> (cin &gt;&gt; s) </span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">char</span> c : s)  <span class="comment">//C++11新标准，即遍历一次字符串s</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (c == <span class="string">&#x27;(&#x27;</span> || c == <span class="string">&#x27;&#123;&#x27;</span> || c == <span class="string">&#x27;[&#x27;</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				ss.<span class="built_in">push</span>(c);</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (c == <span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (!ss.<span class="built_in">empty</span>() &amp;&amp; ss.<span class="built_in">top</span>() == <span class="string">&#x27;&#123;&#x27;</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					ss.<span class="built_in">pop</span>();</span><br><span class="line">					<span class="keyword">continue</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">				&#123;</span><br><span class="line">					flag = <span class="literal">false</span>;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;					</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (!ss.<span class="built_in">empty</span>() &amp;&amp; c == <span class="string">&#x27;]&#x27;</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (ss.<span class="built_in">top</span>() == <span class="string">&#x27;[&#x27;</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					ss.<span class="built_in">pop</span>();</span><br><span class="line">					<span class="keyword">continue</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">				&#123;</span><br><span class="line">					flag = <span class="literal">false</span>;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (!ss.<span class="built_in">empty</span>() &amp;&amp; c == <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (ss.<span class="built_in">top</span>() == <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					ss.<span class="built_in">pop</span>();</span><br><span class="line">					<span class="keyword">continue</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">				&#123;</span><br><span class="line">					flag = <span class="literal">false</span>;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (flag)	cout &lt;&lt; <span class="string">&quot;Match!&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">else</span>    cout &lt;&lt; <span class="string">&quot;Not Match!&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-5-2-queue-priority-queue">2.5.2 queue &amp; priority_queue</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">queue&lt;<span class="type">int</span>&gt; q; <span class="comment">//priority_queue&lt;int&gt; q;</span></span><br><span class="line">q.<span class="built_in">empty</span>();  <span class="comment">//判断队列是否为空</span></span><br><span class="line">q.<span class="built_in">size</span>();   <span class="comment">//返回队列长度</span></span><br><span class="line">q.<span class="built_in">push</span>(item);   <span class="comment">//对于queue，在队尾压入一个新元素</span></span><br><span class="line">               <span class="comment">//对于priority_queue，在基于优先级的适当位置插入新元素</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//queue only:</span></span><br><span class="line">q.<span class="built_in">front</span>();  <span class="comment">//返回队首元素的值，但不删除该元素</span></span><br><span class="line">q.<span class="built_in">back</span>();   <span class="comment">//返回队尾元素的值，但不删除该元素</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//priority_queue only:</span></span><br><span class="line">q.<span class="built_in">top</span>();    <span class="comment">//返回具有最高优先级的元素值，但不删除该元素</span></span><br></pre></td></tr></table></figure>
<h1>3 常用容器用法介绍</h1>
<h2 id="3-1-vector">3.1 vector</h2>
<h3 id="3-1-1-基本函数实现">3.1.1 基本函数实现</h3>
<p><strong>1.构造函数</strong></p>
<ul>
<li>
<p>vector():创建一个空vector</p>
</li>
<li>
<p>vector(int nSize):创建一个vector,元素个数为nSize</p>
</li>
<li>
<p>vector(int nSize,const t&amp; t):创建一个vector，元素个数为nSize,且值均为t</p>
</li>
<li>
<p>vector(const vector&amp;):复制构造函数</p>
</li>
<li>
<p>vector(begin,end):复制[begin,end)区间内另一个数组的元素到vector中</p>
</li>
</ul>
<p><strong>2.增加函数</strong></p>
<ul>
<li>
<p>void push_back(const T&amp; x):向量尾部增加一个元素X</p>
</li>
<li>
<p>iterator insert(iterator it,const T&amp; x):向量中迭代器指向元素前增加一个元素x</p>
</li>
<li>
<p>iterator insert(iterator it,int n,const T&amp; x):向量中迭代器指向元素前增加n个相同的元素x</p>
</li>
<li>
<p>iterator insert(iterator it,const_iterator first,const_iterator last):向量中迭代器指向元素前插入另一个相同类型向量的[first,last)间的数据</p>
</li>
</ul>
<p><strong>3.删除函数</strong></p>
<ul>
<li>
<p>iterator erase(iterator it):删除向量中迭代器指向元素</p>
</li>
<li>
<p>iterator erase(iterator first,iterator last):删除向量中[first,last)中元素</p>
</li>
<li>
<p>void pop_back():删除向量中最后一个元素</p>
</li>
<li>
<p>void clear():清空向量中所有元素</p>
</li>
</ul>
<p><strong>4.遍历函数</strong></p>
<ul>
<li>
<p>reference at(int pos):返回pos位置元素的引用</p>
</li>
<li>
<p>reference front():返回首元素的引用</p>
</li>
<li>
<p>reference back():返回尾元素的引用</p>
</li>
<li>
<p>iterator begin():返回向量头指针，指向第一个元素</p>
</li>
<li>
<p>iterator end():返回向量尾指针，指向向量最后一个元素的下一个位置</p>
</li>
<li>
<p>reverse_iterator rbegin():反向迭代器，指向最后一个元素</p>
</li>
<li>
<p>reverse_iterator rend():反向迭代器，指向第一个元素之前的位置</p>
</li>
</ul>
<p><strong>5.判断函数</strong></p>
<ul>
<li>bool empty() const:判断向量是否为空，若为空，则向量中无元素</li>
</ul>
<p><strong>6.大小函数</strong></p>
<ul>
<li>
<p>int size() const:返回向量中元素的个数</p>
</li>
<li>
<p>int capacity() const:返回当前向量张红所能容纳的最大元素值</p>
</li>
<li>
<p>int max_size() const:返回最大可允许的vector元素数量值</p>
</li>
</ul>
<p><strong>7.其他函数</strong></p>
<ul>
<li>void swap(vector&amp;):交换两个同类型向量的数据</li>
<li>void assign(int n,const T&amp; x):设置向量中第n个元素的值为x</li>
<li>void assign(const_iterator first,const_iterator last):向量中[first,last)中元素设置成当前向量元素</li>
</ul>
<p><strong>8.看着清楚</strong></p>
<blockquote>
<p>1.push_back 在数组的最后添加一个数据</p>
<p>2.pop_back 去掉数组的最后一个数据</p>
<p><a href="http://3.at">3.at</a> 得到编号位置的数据</p>
<p>4.begin 得到数组头的指针</p>
<p>5.end 得到数组的最后一个单元+1的指针</p>
<p>6．front 得到数组头的引用</p>
<p>7.back 得到数组的最后一个单元的引用</p>
<p>8.max_size 得到vector最大可以是多大</p>
<p>9.capacity 当前vector分配的大小</p>
<p>10.size 当前使用数据的大小</p>
<p>11.resize 改变当前使用数据的大小，如果它比当前使用的大，者填充默认值</p>
<p>12.reserve 改变当前vecotr所分配空间的大小</p>
<p>13.erase 删除指针指向的数据项</p>
<p>14.clear 清空当前的vector</p>
<p>15.rbegin 将vector反转后的开始指针返回(其实就是原来的end-1)</p>
<p>16.rend 将vector反转构的结束指针返回(其实就是原来的begin-1)</p>
<p>17.empty 判断vector是否为空</p>
<p>18.swap 与另一个vector交换数据</p>
</blockquote>
<h3 id="3-1-2-基本用法">3.1.2 基本用法</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt; vector&gt;</span> </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br></pre></td></tr></table></figure>
<h3 id="3-1-3-简单介绍">3.1.3 简单介绍</h3>
<ol>
<li>Vector&lt;类型&gt;标识符</li>
<li>Vector&lt;类型&gt;标识符(最大容量)</li>
<li>Vector&lt;类型&gt;标识符(最大容量,初始所有值)</li>
<li>Int i[5]={1,2,3,4,5}</li>
<li>Vector&lt;类型&gt;vi(I,i+2);//得到i索引值为3以后的值</li>
<li>Vector&lt; vector&lt; int&gt; &gt;v; 二维向量//这里最外的&lt;&gt;要有空格。否则在比较旧的编译器下无法通过</li>
</ol>
<h3 id="3-1-4-实例">3.1.4 实例</h3>
<p><strong>3.1.4.1 pop_back()&amp;push_back(elem)实例在容器最后移除和插入数据</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;obj;<span class="comment">//创建一个向量存储容器 int</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++) <span class="comment">// push_back(elem)在数组最后添加数据 </span></span><br><span class="line">    &#123;</span><br><span class="line">        obj.<span class="built_in">push_back</span>(i);</span><br><span class="line">        cout&lt;&lt;obj[i]&lt;&lt;<span class="string">&quot;,&quot;</span>;    </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)<span class="comment">//去掉数组最后一个数据 </span></span><br><span class="line">    &#123;</span><br><span class="line">        obj.<span class="built_in">pop_back</span>();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;\n&quot;</span>&lt;&lt;endl;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;obj.<span class="built_in">size</span>();i++)<span class="comment">//size()容器中实际数据个数 </span></span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;obj[i]&lt;&lt;<span class="string">&quot;,&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果为：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,</span><br><span class="line"> </span><br><span class="line"><span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,</span><br></pre></td></tr></table></figure>
<p><strong>3.1.4.2 clear()清除容器中所有数据</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;obj;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)<span class="comment">//push_back(elem)在数组最后添加数据 </span></span><br><span class="line">    &#123;</span><br><span class="line">        obj.<span class="built_in">push_back</span>(i);</span><br><span class="line">        cout&lt;&lt;obj[i]&lt;&lt;<span class="string">&quot;,&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    obj.<span class="built_in">clear</span>();<span class="comment">//清除容器中所以数据</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;obj.<span class="built_in">size</span>();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;obj[i]&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果为：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,</span><br></pre></td></tr></table></figure>
<p><strong>3.1.4.3 排序</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;obj;</span><br><span class="line"> </span><br><span class="line">    obj.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">    obj.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">    obj.<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">sort</span>(obj.<span class="built_in">begin</span>(),obj.<span class="built_in">end</span>());<span class="comment">//从小到大</span></span><br><span class="line"> </span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;从小到大:&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;obj.<span class="built_in">size</span>();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;obj[i]&lt;&lt;<span class="string">&quot;,&quot;</span>;  </span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;\n&quot;</span>&lt;&lt;endl;</span><br><span class="line"> </span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;从大到小:&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">reverse</span>(obj.<span class="built_in">begin</span>(),obj.<span class="built_in">end</span>());<span class="comment">//从大到小 </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;obj.<span class="built_in">size</span>();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;obj[i]&lt;&lt;<span class="string">&quot;,&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果为：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">从小到大:</span><br><span class="line"><span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>,</span><br><span class="line"> </span><br><span class="line">从大到小:</span><br><span class="line"><span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>,</span><br></pre></td></tr></table></figure>
<p>1.注意 sort 需要头文件 <strong>#include <algorithm></algorithm></strong></p>
<p>2.如果想 sort 来降序，可重写 sort</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">compare</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">return</span> a&lt; b; <span class="comment">//升序排列，如果改为return a&gt;b，则为降序 </span></span><br><span class="line">&#125; </span><br><span class="line"><span class="type">int</span> a[<span class="number">20</span>]=&#123;<span class="number">2</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">23</span>,<span class="number">5</span>,<span class="number">76</span>,<span class="number">0</span>,<span class="number">43</span>,<span class="number">24</span>,<span class="number">65</span>&#125;,i; </span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++) </span><br><span class="line">    cout&lt;&lt; a[i]&lt;&lt; endl; </span><br><span class="line"><span class="built_in">sort</span>(a,a+<span class="number">20</span>,compare);</span><br></pre></td></tr></table></figure>
<p><strong>3.1.4.4 访问（直接数组访问&amp;迭代器访问）</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//顺序访问</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;obj;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        obj.<span class="built_in">push_back</span>(i);   </span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;直接利用数组：&quot;</span>; </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)<span class="comment">//方法一 </span></span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;obj[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    cout&lt;&lt;endl; </span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;利用迭代器：&quot;</span> ;</span><br><span class="line">    <span class="comment">//方法二，使用迭代器将容器中数据输出 </span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;::iterator it;<span class="comment">//声明一个迭代器，来访问vector容器，作用：遍历或者指向vector容器的元素 </span></span><br><span class="line">    <span class="keyword">for</span>(it=obj.<span class="built_in">begin</span>();it!=obj.<span class="built_in">end</span>();it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;*it&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果为：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">直接利用数组：<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> </span><br><span class="line">利用迭代器：<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span></span><br></pre></td></tr></table></figure>
<p><strong>3.1.4.5 二维数组两种定义方法（结果一样）</strong></p>
<p><strong>方法一</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> N=<span class="number">5</span>, M=<span class="number">6</span>; </span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt; &gt; <span class="built_in">obj</span>(N); <span class="comment">//定义二维动态数组大小5行 </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>; i&lt; obj.<span class="built_in">size</span>(); i++)<span class="comment">//动态二维数组为5行6列，值全为0 </span></span><br><span class="line">    &#123; </span><br><span class="line">        obj[i].<span class="built_in">resize</span>(M); </span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt; obj.<span class="built_in">size</span>(); i++)<span class="comment">//输出二维动态数组 </span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;obj[i].<span class="built_in">size</span>();j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;obj[i][j]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>方法二</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> N=<span class="number">5</span>, M=<span class="number">6</span>; </span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt; &gt; <span class="built_in">obj</span>(N, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(M)); <span class="comment">//定义二维动态数组5行6列 </span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt; obj.<span class="built_in">size</span>(); i++)<span class="comment">//输出二维动态数组 </span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;obj[i].<span class="built_in">size</span>();j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;obj[i][j]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果为：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br></pre></td></tr></table></figure>
<h2 id="3-2-deque">3.2 deque</h2>
<p>所谓的deque是”double ended queue”的缩写，双端队列不论在尾部或头部插入元素，都十分迅速。而在中间插入元素则会比较费时，因为必须移动中间其他的元素。双端队列是一种随机访问的数据类型，提供了在序列两端快速插入和删除操作的功能，它可以在需要的时候改变自身大小，完成了标准的C++数据结构中队列的所有功能。</p>
<p>Vector是单向开口的连续线性空间，deque则是一种双向开口的连续线性空间。deque对象在队列的两端放置元素和删除元素是高效的，而向量vector只是在插入序列的末尾时操作才是高效的。deque和vector的最大差异，一在于deque允许于常数时间内对头端进行元素的插入或移除操作，二在于deque没有所谓的capacity观念，因为它是动态地以分段连续空间组合而成，随时可以增加一段新的空间并链接起来。换句话说，像vector那样“因旧空间不足而重新配置一块更大空间，然后复制元素，再释放旧空间”这样的事情在deque中是不会发生的。也因此，deque没有必要提供所谓的空间预留（reserved）功能。</p>
<p>虽然deque也提供Random Access Iterator，但它的迭代器并不是普通指针，其复杂度和vector不可同日而语，这当然涉及到各个运算层面。因此，除非必要，我们应尽可能选择使用vector而非deque。对deque进行的排序操作，为了最高效率，可将deque先完整复制到一个vector身上，将vector排序后（利用STL的sort算法），再复制回deque。</p>
<p>deque是一种优化了的对序列两端元素进行添加和删除操作的基本序列容器。通常由一些独立的区块组成，第一区块朝某方向扩展，最后一个区块朝另一方向扩展。它允许较为快速地随机访问但它不像vector一样把所有对象保存在一个连续的内存块，而是多个连续的内存块。并且在一个映射结构中保存对这些块以及顺序的跟踪。</p>
<h3 id="3-2-1-声明deque容器">3.2.1 声明deque容器</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;deque&gt;</span>  <span class="comment">// 头文件</span></span></span><br><span class="line">deque&lt;type&gt; deq;  <span class="comment">// 声明一个元素类型为type的双端队列que</span></span><br><span class="line"><span class="function">deque&lt;type&gt; <span class="title">deq</span><span class="params">(size)</span></span>;  <span class="comment">// 声明一个类型为type、含有size个默认值初始化元素的的双端队列que</span></span><br><span class="line"><span class="function">deque&lt;type&gt; <span class="title">deq</span><span class="params">(size, value)</span></span>;  <span class="comment">// 声明一个元素类型为type、含有size个value元素的双端队列que</span></span><br><span class="line"><span class="function">deque&lt;type&gt; <span class="title">deq</span><span class="params">(mydeque)</span></span>;  <span class="comment">// deq是mydeque的一个副本</span></span><br><span class="line"><span class="function">deque&lt;type&gt; <span class="title">deq</span><span class="params">(first, last)</span></span>;  <span class="comment">// 使用迭代器first、last范围内的元素初始化deq</span></span><br></pre></td></tr></table></figure>
<h3 id="3-2-2-deque的常用成员函数">3.2.2 deque的常用成员函数</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">deque&lt;<span class="type">int</span>&gt; deq;</span><br></pre></td></tr></table></figure>
<ol>
<li>deq[ ]：用来访问双向队列中单个的元素。</li>
<li>deq.front()：返回第一个元素的引用。</li>
<li>deq.back()：返回最后一个元素的引用。</li>
<li>deq.push_front(x)：把元素x插入到双向队列的头部。</li>
<li>deq.pop_front()：弹出双向队列的第一个元素。</li>
<li>deq.push_back(x)：把元素x插入到双向队列的尾部。</li>
<li>deq.pop_back()：弹出双向队列的最后一个元素。</li>
</ol>
<h3 id="3-2-3-deque的一些特点">3.2.3 deque的一些特点</h3>
<ol>
<li>支持随机访问，即支持[ ]以及at()，但是性能没有vector好。</li>
<li>可以在内部进行插入和删除操作，但性能不及list。</li>
<li>deque两端都能够快速插入和删除元素，而vector只能在尾端进行。</li>
<li>deque的元素存取和迭代器操作会稍微慢一些，因为deque的内部结构会多一个间接过程。</li>
<li>deque迭代器是特殊的智能指针，而不是一般指针，它需要在不同的区块之间跳转。</li>
<li>deque可以包含更多的元素，其max_size可能更大，因为不止使用一块内存。</li>
<li>deque不支持对容量和内存分配时机的控制。</li>
<li>在除了首尾两端的其他地方插入和删除元素，都将会导致指向deque元素的任何pointers、references、iterators失效。不过，deque的内存重分配优于vector，因为其内部结构显示不需要复制所有元素。</li>
<li>deque的内存区块不再被使用时，会被释放，deque的内存大小是可缩减的。不过，是不是这么做以及怎么做由实际操作版本定义。</li>
<li>deque不提供容量操作：capacity()和reverse()，但是vector可以。</li>
</ol>
<h3 id="3-2-4-实例">3.2.4 实例</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> i;</span><br><span class="line">	<span class="type">int</span> a[<span class="number">10</span>] = &#123; <span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span> &#125;;</span><br><span class="line">	deque&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">			q.<span class="built_in">push_front</span>(a[i]);</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			q.<span class="built_in">push_back</span>(a[i]);</span><br><span class="line">	&#125;                                  <span class="comment">/*此时队列里的内容是: &#123;8,6,4,2,0,1,3,5,7,9&#125;*/</span></span><br><span class="line">	q.<span class="built_in">pop_front</span>();</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, q.<span class="built_in">front</span>());    <span class="comment">/*清除第一个元素后输出第一个(6)*/</span></span><br><span class="line">	q.<span class="built_in">pop_back</span>();</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, q.<span class="built_in">back</span>());     <span class="comment">/*清除最后一个元素后输出最后一个(7)*/</span></span><br><span class="line">	deque&lt;<span class="type">int</span>&gt;::iterator it;</span><br><span class="line">	<span class="keyword">for</span> (it = q.<span class="built_in">begin</span>(); it != q.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">		cout &lt;&lt; *it &lt;&lt; <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">6</span>		<span class="number">4</span>		<span class="number">2</span>		<span class="number">0</span>		<span class="number">1</span>		<span class="number">3</span>		<span class="number">5</span>		<span class="number">7</span></span><br></pre></td></tr></table></figure>
<h2 id="3-3-list">3.3 list</h2>
<h3 id="3-3-1-list定义">3.3.1 list定义</h3>
<p>List是stl实现的双向链表，与向量(vectors)相比, 它允许快速的插入和删除，但是随机访问却比较慢。使用时需要添加头文件</p>
<p>#include <list></list></p>
<h3 id="3-3-2-list定义和初始化">3.3.2 list定义和初始化</h3>
<pre><code>list&lt;int&gt;lst1;          //创建空list

list&lt;int&gt; lst2(5);       //创建含有5个元素的list

list&lt;int&gt;lst3(3,2);  //创建含有3个元素的list

list&lt;int&gt;lst4(lst2);    //使用lst2初始化lst4

list&lt;int&gt;lst5(lst2.begin(),lst2.end());  //同lst4
</code></pre>
<h3 id="3-3-3-list常用操作函数">3.3.3 list常用操作函数</h3>
<blockquote>
<ol>
<li>Lst1.assign() 给list赋值</li>
<li>Lst1.back() 返回最后一个元素</li>
<li>Lst1.begin() 返回指向第一个元素的迭代器</li>
<li>Lst1.clear() 删除所有元素</li>
<li>Lst1.empty() 如果list是空的则返回true</li>
<li>Lst1.end() 返回末尾的迭代器</li>
<li>Lst1.erase() 删除一个元素</li>
<li>Lst1.front() 返回第一个元素</li>
<li>Lst1.get_allocator() 返回list的配置器</li>
<li>Lst1.insert() 插入一个元素到list中</li>
<li>Lst1.max_size() 返回list能容纳的最大元素数量</li>
<li>Lst1.merge() 合并两个list</li>
<li>Lst1.pop_back() 删除最后一个元素</li>
<li>Lst1.pop_front() 删除第一个元素</li>
<li>Lst1.push_back() 在list的末尾添加一个元素</li>
<li>Lst1.push_front() 在list的头部添加一个元素</li>
<li>Lst1.rbegin() 返回指向第一个元素的逆向迭代器</li>
<li>Lst1.remove() 从list删除元素</li>
<li>Lst1.remove_if() 按指定条件删除元素</li>
<li>Lst1.rend() 指向list末尾的逆向迭代器</li>
<li>Lst1.resize() 改变list的大小</li>
<li>Lst1.reverse() 把list的元素倒转</li>
<li>Lst1.size() 返回list中的元素个数</li>
<li>Lst1.sort() 给list排序</li>
<li>Lst1.splice() 合并两个list</li>
<li>Lst1.swap() 交换两个list</li>
<li>Lst1.unique() 删除list中相邻重复的元素</li>
</ol>
</blockquote>
<h3 id="3-3-4-List使用实例">3.3.4 List使用实例</h3>
<p><strong>3.3.4.1 迭代器遍历list</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(list&lt;<span class="type">int</span>&gt;::const_iteratoriter = lst1.<span class="built_in">begin</span>();iter != lst1.<span class="built_in">end</span>();iter++)</span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;*iter;</span><br><span class="line">  &#125;</span><br><span class="line">  cout&lt;&lt;endl;</span><br></pre></td></tr></table></figure>
<p><strong>3.3.4.2 综合实例1</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> list&lt;<span class="type">int</span>&gt; LISTINT;</span><br><span class="line"><span class="keyword">typedef</span> list&lt;<span class="type">int</span>&gt; LISTCHAR;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//用LISTINT创建一个list对象</span></span><br><span class="line">	LISTINT listOne;</span><br><span class="line">	<span class="comment">//声明i为迭代器</span></span><br><span class="line">	LISTINT::iterator i;</span><br><span class="line"> </span><br><span class="line">	listOne.<span class="built_in">push_front</span>(<span class="number">3</span>);</span><br><span class="line">	listOne.<span class="built_in">push_front</span>(<span class="number">2</span>);</span><br><span class="line">	listOne.<span class="built_in">push_front</span>(<span class="number">1</span>);</span><br><span class="line"> </span><br><span class="line">	listOne.<span class="built_in">push_back</span>(<span class="number">4</span>);</span><br><span class="line">	listOne.<span class="built_in">push_back</span>(<span class="number">5</span>);</span><br><span class="line">	listOne.<span class="built_in">push_back</span>(<span class="number">6</span>);</span><br><span class="line"> </span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;listOne.begin()--- listOne.end():&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">for</span> (i = listOne.<span class="built_in">begin</span>(); i != listOne.<span class="built_in">end</span>(); ++i)</span><br><span class="line">		cout &lt;&lt; *i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line"> </span><br><span class="line">	LISTINT::reverse_iterator ir;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;listOne.rbegin()---listOne.rend():&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">for</span> (ir = listOne.<span class="built_in">rbegin</span>(); ir != listOne.<span class="built_in">rend</span>(); ir++) &#123;</span><br><span class="line">		cout &lt;&lt; *ir &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line"> </span><br><span class="line">	<span class="type">int</span> result = <span class="built_in">accumulate</span>(listOne.<span class="built_in">begin</span>(), listOne.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Sum=&quot;</span> &lt;&lt; result &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"> </span><br><span class="line">	<span class="comment">//用LISTCHAR创建一个list对象</span></span><br><span class="line">	LISTCHAR listTwo;</span><br><span class="line">	<span class="comment">//声明i为迭代器</span></span><br><span class="line">	LISTCHAR::iterator j;</span><br><span class="line"> </span><br><span class="line">	listTwo.<span class="built_in">push_front</span>(<span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">	listTwo.<span class="built_in">push_front</span>(<span class="string">&#x27;B&#x27;</span>);</span><br><span class="line">	listTwo.<span class="built_in">push_front</span>(<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line"> </span><br><span class="line">	listTwo.<span class="built_in">push_back</span>(<span class="string">&#x27;D&#x27;</span>);</span><br><span class="line">	listTwo.<span class="built_in">push_back</span>(<span class="string">&#x27;E&#x27;</span>);</span><br><span class="line">	listTwo.<span class="built_in">push_back</span>(<span class="string">&#x27;F&#x27;</span>);</span><br><span class="line"> </span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;listTwo.begin()---listTwo.end():&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">for</span> (j = listTwo.<span class="built_in">begin</span>(); j != listTwo.<span class="built_in">end</span>(); ++j)</span><br><span class="line">		cout &lt;&lt; <span class="built_in">char</span>(*j) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line"> </span><br><span class="line">	j = <span class="built_in">max_element</span>(listTwo.<span class="built_in">begin</span>(), listTwo.<span class="built_in">end</span>());</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;The maximum element in listTwo is: &quot;</span> &lt;&lt; <span class="built_in">char</span>(*j) &lt;&lt; endl;</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果:</p>
<p><img src="/2022/09/23/C-%E4%B8%ADSTL%E7%94%A8%E6%B3%95%E8%B6%85%E8%AF%A6%E7%BB%86%E6%80%BB%E7%BB%93/images/20180821215201799.png" alt="输出结果"></p>
<p><strong>3.3.4.3 综合实例2</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span> </span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> list&lt;<span class="type">int</span>&gt; INTLIST;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//从前向后显示list队列的全部元素 </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">put_list</span><span class="params">(INTLIST list, <span class="type">char</span> *name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	INTLIST::iterator plist;</span><br><span class="line"> </span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;The contents of &quot;</span> &lt;&lt; name &lt;&lt; <span class="string">&quot; : &quot;</span>;</span><br><span class="line">	<span class="keyword">for</span> (plist = list.<span class="built_in">begin</span>(); plist != list.<span class="built_in">end</span>(); plist++)</span><br><span class="line">		cout &lt;&lt; *plist &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//测试list容器的功能 </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//list1对象初始为空 </span></span><br><span class="line">	INTLIST list1;</span><br><span class="line">	<span class="function">INTLIST <span class="title">list2</span><span class="params">(<span class="number">5</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="function">INTLIST <span class="title">list3</span><span class="params">(list2.begin(), --list2.end())</span></span>;</span><br><span class="line"> </span><br><span class="line">	<span class="comment">//声明一个名为i的双向迭代器 </span></span><br><span class="line">	INTLIST::iterator i;</span><br><span class="line"> </span><br><span class="line">	<span class="built_in">put_list</span>(list1, <span class="string">&quot;list1&quot;</span>);</span><br><span class="line">	<span class="built_in">put_list</span>(list2, <span class="string">&quot;list2&quot;</span>);</span><br><span class="line">	<span class="built_in">put_list</span>(list3, <span class="string">&quot;list3&quot;</span>);</span><br><span class="line"> </span><br><span class="line">	list1.<span class="built_in">push_back</span>(<span class="number">7</span>);</span><br><span class="line">	list1.<span class="built_in">push_back</span>(<span class="number">8</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;list1.push_back(7) and list1.push_back(8):&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="built_in">put_list</span>(list1, <span class="string">&quot;list1&quot;</span>);</span><br><span class="line"> </span><br><span class="line">	list1.<span class="built_in">push_front</span>(<span class="number">6</span>);</span><br><span class="line">	list1.<span class="built_in">push_front</span>(<span class="number">5</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;list1.push_front(6) and list1.push_front(5):&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="built_in">put_list</span>(list1, <span class="string">&quot;list1&quot;</span>);</span><br><span class="line"> </span><br><span class="line">	list1.<span class="built_in">insert</span>(++list1.<span class="built_in">begin</span>(), <span class="number">3</span>, <span class="number">9</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;list1.insert(list1.begin()+1,3,9):&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="built_in">put_list</span>(list1, <span class="string">&quot;list1&quot;</span>);</span><br><span class="line"> </span><br><span class="line">	<span class="comment">//测试引用类函数 </span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;list1.front()=&quot;</span> &lt;&lt; list1.<span class="built_in">front</span>() &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;list1.back()=&quot;</span> &lt;&lt; list1.<span class="built_in">back</span>() &lt;&lt; endl;</span><br><span class="line"> </span><br><span class="line">	list1.<span class="built_in">pop_front</span>();</span><br><span class="line">	list1.<span class="built_in">pop_back</span>();</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;list1.pop_front() and list1.pop_back():&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="built_in">put_list</span>(list1, <span class="string">&quot;list1&quot;</span>);</span><br><span class="line"> </span><br><span class="line">	list1.<span class="built_in">erase</span>(++list1.<span class="built_in">begin</span>());</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;list1.erase(++list1.begin()):&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="built_in">put_list</span>(list1, <span class="string">&quot;list1&quot;</span>);</span><br><span class="line"> </span><br><span class="line">	list2.<span class="built_in">assign</span>(<span class="number">8</span>, <span class="number">1</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;list2.assign(8,1):&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="built_in">put_list</span>(list2, <span class="string">&quot;list2&quot;</span>);</span><br><span class="line"> </span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;list1.max_size(): &quot;</span> &lt;&lt; list1.<span class="built_in">max_size</span>() &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;list1.size(): &quot;</span> &lt;&lt; list1.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;list1.empty(): &quot;</span> &lt;&lt; list1.<span class="built_in">empty</span>() &lt;&lt; endl;</span><br><span class="line"> </span><br><span class="line">	<span class="built_in">put_list</span>(list1, <span class="string">&quot;list1&quot;</span>);</span><br><span class="line">	<span class="built_in">put_list</span>(list3, <span class="string">&quot;list3&quot;</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;list1&gt;list3: &quot;</span> &lt;&lt; (list1 &gt; list3) &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;list1&lt;list3: &quot;</span> &lt;&lt; (list1 &lt; list3) &lt;&lt; endl;</span><br><span class="line"> </span><br><span class="line">	list1.<span class="built_in">sort</span>();</span><br><span class="line">	<span class="built_in">put_list</span>(list1, <span class="string">&quot;list1&quot;</span>);</span><br><span class="line"> </span><br><span class="line">	list1.<span class="built_in">splice</span>(++list1.<span class="built_in">begin</span>(), list3);</span><br><span class="line">	<span class="built_in">put_list</span>(list1, <span class="string">&quot;list1&quot;</span>);</span><br><span class="line">	<span class="built_in">put_list</span>(list3, <span class="string">&quot;list3&quot;</span>);</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<p><img src="/2022/09/23/C-%E4%B8%ADSTL%E7%94%A8%E6%B3%95%E8%B6%85%E8%AF%A6%E7%BB%86%E6%80%BB%E7%BB%93/images/20180821220247297-1663897702003.png" alt="输出结果"></p>
<h2 id="3-4-map-multimap">3.4 map/multimap</h2>
<p>map和multimap都需要#include<map>，唯一的不同是，map的键值key不可重复，而multimap可以，也正是由于这种区别，map支持[ ]运算符，multimap不支持[ ]运算符。在用法上没什么区别。</map></p>
<p>C++中map提供的是一种键值对容器，里面的数据都是成对出现的,如下图：每一对中的第一个值称之为关键字(key)，每个关键字只能在map中出现一次；第二个称之为该关键字的对应值。</p>
<p><img src="http://www.studytonight.com/cpp/images/map-example.png" alt="Map"></p>
<p>Map是STL的一个关联容器，它提供一对一（其中第一个可以称为关键字，每个关键字只能在map中出现一次，第二个可能称为该关键字的值）的数据 处理能力，由于这个特性，它完成有可能在我们处理一对一数据的时候，在编程上提供快速通道。这里说下map内部数据的组织，map内部自建一颗红黑树(一 种非严格意义上的平衡二叉树)，这颗树具有对数据自动排序的功能，所以在map内部所有的数据都是有序的。</p>
<h3 id="3-4-1-基本操作函数">3.4.1 基本操作函数</h3>
<pre><code> begin()         返回指向map头部的迭代器

 clear(）        删除所有元素

 count()         返回指定元素出现的次数

 empty()         如果map为空则返回true

 end()           返回指向map末尾的迭代器

 equal_range()   返回特殊条目的迭代器对

 erase()         删除一个元素

 find()          查找一个元素

 get_allocator() 返回map的配置器

 insert()        插入元素

 key_comp()      返回比较元素key的函数

 lower_bound()   返回键值&gt;=给定元素的第一个位置

 max_size()      返回可以容纳的最大元素个数

 rbegin()        返回一个指向map尾部的逆向迭代器

 rend()          返回一个指向map头部的逆向迭代器

 size()          返回map中元素的个数

 swap()           交换两个map

 upper_bound()    返回键值&gt;给定元素的第一个位置

 value_comp()     返回比较元素value的函数
</code></pre>
<h3 id="3-4-2-声明">3.4.2 声明</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"> </span><br><span class="line">map&lt;<span class="type">int</span>, string&gt; ID_Name;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 使用&#123;&#125;赋值是从c++11开始的，因此编译器版本过低时会报错，如visual studio 2012</span></span><br><span class="line">map&lt;<span class="type">int</span>, string&gt; ID_Name = &#123;</span><br><span class="line">                &#123; <span class="number">2015</span>, <span class="string">&quot;Jim&quot;</span> &#125;,</span><br><span class="line">                &#123; <span class="number">2016</span>, <span class="string">&quot;Tom&quot;</span> &#125;,</span><br><span class="line">                &#123; <span class="number">2017</span>, <span class="string">&quot;Bob&quot;</span> &#125; &#125;;</span><br></pre></td></tr></table></figure>
<h3 id="3-4-3-迭代器">3.4.3 迭代器</h3>
<p>共有八个获取迭代器的函数：* begin, end, rbegin,rend* 以及对应的 * cbegin, cend, crbegin,crend*。</p>
<p>二者的区别在于，后者一定返回 const_iterator，而前者则根据map的类型返回iterator 或者 const_iterator。const情况下，不允许对值进行修改。如下面代码所示：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;::iterator it;</span><br><span class="line">map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; mmap;</span><br><span class="line"><span class="type">const</span> map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; const_mmap;</span><br><span class="line"> </span><br><span class="line">it = mmap.<span class="built_in">begin</span>(); <span class="comment">//iterator</span></span><br><span class="line">mmap.<span class="built_in">cbegin</span>(); <span class="comment">//const_iterator</span></span><br><span class="line"> </span><br><span class="line">const_mmap.<span class="built_in">begin</span>(); <span class="comment">//const_iterator</span></span><br><span class="line">const_mmap.<span class="built_in">cbegin</span>(); <span class="comment">//const_iterator</span></span><br></pre></td></tr></table></figure>
<p>返回的迭代器可以进行加减操作，此外，如果map为空，则 begin = end。</p>
<p><img src="/2022/09/23/C-%E4%B8%ADSTL%E7%94%A8%E6%B3%95%E8%B6%85%E8%AF%A6%E7%BB%86%E6%80%BB%E7%BB%93/images/20161110141101529" alt="操作流程"></p>
<h3 id="3-4-4-插入操作">3.4.4 插入操作</h3>
<p><strong>3.4.4.1 用insert插入pair数据</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数据的插入--第一种：用insert函数插入pair数据  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span>    </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>  </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    map&lt;<span class="type">int</span>, string&gt; mapStudent;  </span><br><span class="line">    mapStudent.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, string&gt;(<span class="number">1</span>, <span class="string">&quot;student_one&quot;</span>));  </span><br><span class="line">    mapStudent.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, string&gt;(<span class="number">2</span>, <span class="string">&quot;student_two&quot;</span>));  </span><br><span class="line">    mapStudent.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, string&gt;(<span class="number">3</span>, <span class="string">&quot;student_three&quot;</span>));  </span><br><span class="line">    map&lt;<span class="type">int</span>, string&gt;::iterator iter;  </span><br><span class="line">    <span class="keyword">for</span>(iter = mapStudent.<span class="built_in">begin</span>(); iter != mapStudent.<span class="built_in">end</span>(); iter++)  </span><br><span class="line">       cout&lt;&lt;iter-&gt;first&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;iter-&gt;second&lt;&lt;endl;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<p><strong>3.4.4.2 用insert函数插入value_type数据</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第二种：用insert函数插入value_type数据，下面举例说明  </span></span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span>    </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span>    </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>    </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span>    </span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">    map&lt;<span class="type">int</span>, string&gt; mapStudent;    </span><br><span class="line">    mapStudent.<span class="built_in">insert</span>(map&lt;<span class="type">int</span>, string&gt;::<span class="built_in">value_type</span> (<span class="number">1</span>, <span class="string">&quot;student_one&quot;</span>));    </span><br><span class="line">    mapStudent.<span class="built_in">insert</span>(map&lt;<span class="type">int</span>, string&gt;::<span class="built_in">value_type</span> (<span class="number">2</span>, <span class="string">&quot;student_two&quot;</span>));    </span><br><span class="line">    mapStudent.<span class="built_in">insert</span>(map&lt;<span class="type">int</span>, string&gt;::<span class="built_in">value_type</span> (<span class="number">3</span>, <span class="string">&quot;student_three&quot;</span>));    </span><br><span class="line">    map&lt;<span class="type">int</span>, string&gt;::iterator iter;    </span><br><span class="line">    <span class="keyword">for</span>(iter = mapStudent.<span class="built_in">begin</span>(); iter != mapStudent.<span class="built_in">end</span>(); iter++)  </span><br><span class="line">         cout&lt;&lt;iter-&gt;first&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;iter-&gt;second&lt;&lt;endl;    </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<p><strong>3.4.4.3 用insert函数进行多个插入</strong></p>
<p>insert共有4个重载函数：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 插入单个键值对，并返回插入位置和成功标志，插入位置已经存在值时，插入失败</span></span><br><span class="line"><span class="function">pair&lt;iterator,<span class="type">bool</span>&gt; <span class="title">insert</span> <span class="params">(<span class="type">const</span> value_type&amp; val)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//在指定位置插入，在不同位置插入效率是不一样的，因为涉及到重排</span></span><br><span class="line"><span class="function">iterator <span class="title">insert</span> <span class="params">(const_iterator position, <span class="type">const</span> value_type&amp; val)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 插入多个</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span> <span class="params">(InputIterator first, InputIterator last)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//c++11开始支持，使用列表插入多个   </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span> <span class="params">(initializer_list&lt;value_type&gt; il)</span></span>;</span><br></pre></td></tr></table></figure>
<p>下面是具体使用示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; mymap;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 插入单个值</span></span><br><span class="line">    mymap.<span class="built_in">insert</span>(std::<span class="built_in">pair</span>&lt;<span class="type">char</span>, <span class="type">int</span>&gt;(<span class="string">&#x27;a&#x27;</span>, <span class="number">100</span>));</span><br><span class="line">    mymap.<span class="built_in">insert</span>(std::<span class="built_in">pair</span>&lt;<span class="type">char</span>, <span class="type">int</span>&gt;(<span class="string">&#x27;z&#x27;</span>, <span class="number">200</span>));</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//返回插入位置以及是否插入成功</span></span><br><span class="line">    std::pair&lt;std::map&lt;<span class="type">char</span>, <span class="type">int</span>&gt;::iterator, <span class="type">bool</span>&gt; ret;</span><br><span class="line">    ret = mymap.<span class="built_in">insert</span>(std::<span class="built_in">pair</span>&lt;<span class="type">char</span>, <span class="type">int</span>&gt;(<span class="string">&#x27;z&#x27;</span>, <span class="number">500</span>));</span><br><span class="line">    <span class="keyword">if</span> (ret.second == <span class="literal">false</span>) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;element &#x27;z&#x27; already existed&quot;</span>;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot; with a value of &quot;</span> &lt;&lt; ret.first-&gt;second &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//指定位置插入</span></span><br><span class="line">    std::map&lt;<span class="type">char</span>, <span class="type">int</span>&gt;::iterator it = mymap.<span class="built_in">begin</span>();</span><br><span class="line">    mymap.<span class="built_in">insert</span>(it, std::<span class="built_in">pair</span>&lt;<span class="type">char</span>, <span class="type">int</span>&gt;(<span class="string">&#x27;b&#x27;</span>, <span class="number">300</span>));  <span class="comment">//效率更高</span></span><br><span class="line">    mymap.<span class="built_in">insert</span>(it, std::<span class="built_in">pair</span>&lt;<span class="type">char</span>, <span class="type">int</span>&gt;(<span class="string">&#x27;c&#x27;</span>, <span class="number">400</span>));  <span class="comment">//效率非最高</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">//范围多值插入</span></span><br><span class="line">    std::map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; anothermap;</span><br><span class="line">    anothermap.<span class="built_in">insert</span>(mymap.<span class="built_in">begin</span>(), mymap.<span class="built_in">find</span>(<span class="string">&#x27;c&#x27;</span>));</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 列表形式插入</span></span><br><span class="line">    anothermap.<span class="built_in">insert</span>(&#123; &#123; <span class="string">&#x27;d&#x27;</span>, <span class="number">100</span> &#125;, &#123;<span class="string">&#x27;e&#x27;</span>, <span class="number">200</span>&#125; &#125;);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>3.4.4.4 用数组方式插入数据</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第三种：用数组方式插入数据，下面举例说明  </span></span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span>    </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span>    </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>    </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span>    </span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">    map&lt;<span class="type">int</span>, string&gt; mapStudent;    </span><br><span class="line">    mapStudent[<span class="number">1</span>] = <span class="string">&quot;student_one&quot;</span>;   </span><br><span class="line">    mapStudent[<span class="number">2</span>] = <span class="string">&quot;student_two&quot;</span>;    </span><br><span class="line">    mapStudent[<span class="number">3</span>] = <span class="string">&quot;student_three&quot;</span>;    </span><br><span class="line">    map&lt;<span class="type">int</span>, string&gt;::iterator iter;    </span><br><span class="line">    <span class="keyword">for</span>(iter = mapStudent.<span class="built_in">begin</span>(); iter != mapStudent.<span class="built_in">end</span>(); iter++)    </span><br><span class="line">        cout&lt;&lt;iter-&gt;first&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;iter-&gt;second&lt;&lt;endl;    </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<p>以上三种用法，虽然都可以实现数据的插入，但是它们是有区别的，当然了第一种和第二种在效果上是完成一样的，用insert函数插入数据，在数据的 插入上涉及到集合的唯一性这个概念，即当map中有这个关键字时，insert操作是插入数据不了的，但是用数组方式就不同了，它可以覆盖以前该关键字对 应的值，用程序说明</p>
<p>mapStudent.insert(map&lt;int, string&gt;::value_type (1, “student_one”));</p>
<p>mapStudent.insert(map&lt;int, string&gt;::value_type (1, “student_two”));</p>
<p>上面这两条语句执行后，map中1这个关键字对应的值是“student_one”，第二条语句并没有生效，那么这就涉及到我们怎么知道insert语句是否插入成功的问题了，可以用pair来获得是否插入成功，程序如下</p>
<p>pair&lt;map&lt;int, string&gt;::iterator, bool&gt; Insert_Pair;</p>
<p>Insert_Pair = mapStudent.insert(map&lt;int, string&gt;::value_type (1, “student_one”));</p>
<p>我们通过pair的第二个变量来知道是否插入成功，它的第一个变量返回的是一个map的迭代器，如果插入成功的话Insert_Pair.second应该是true的，否则为false。</p>
<p>下面给出完成代码，演示插入成功与否问题:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//验证插入函数的作用效果  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span>    </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span>    </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>    </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span>    </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    map&lt;<span class="type">int</span>, string&gt; mapStudent;  </span><br><span class="line">    pair&lt;map&lt;<span class="type">int</span>, string&gt;::iterator, <span class="type">bool</span>&gt; Insert_Pair;    </span><br><span class="line">    Insert_Pair = mapStudent.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, string&gt;(<span class="number">1</span>, <span class="string">&quot;student_one&quot;</span>));    </span><br><span class="line">    <span class="keyword">if</span>(Insert_Pair.second == <span class="literal">true</span>)  </span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Insert Successfully&quot;</span>&lt;&lt;endl;    </span><br><span class="line">    <span class="keyword">else</span>    </span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Insert Failure&quot;</span>&lt;&lt;endl;    </span><br><span class="line">    Insert_Pair = mapStudent.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, string&gt;(<span class="number">1</span>, <span class="string">&quot;student_two&quot;</span>));    </span><br><span class="line">    <span class="keyword">if</span>(Insert_Pair.second == <span class="literal">true</span>)    </span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Insert Successfully&quot;</span>&lt;&lt;endl;    </span><br><span class="line">    <span class="keyword">else</span>    </span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Insert Failure&quot;</span>&lt;&lt;endl;    </span><br><span class="line">    map&lt;<span class="type">int</span>, string&gt;::iterator iter;   </span><br><span class="line">    <span class="keyword">for</span>(iter = mapStudent.<span class="built_in">begin</span>(); iter != mapStudent.<span class="built_in">end</span>(); iter++)    </span><br><span class="line">       cout&lt;&lt;iter-&gt;first&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;iter-&gt;second&lt;&lt;endl;    </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<p>大家可以用如下程序，看下用数组插入在数据覆盖上的效果:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//验证数组形式插入数据的效果   </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span>    </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span>    </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>    </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span>    </span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">    map&lt;<span class="type">int</span>, string&gt; mapStudent;    </span><br><span class="line">    mapStudent[<span class="number">1</span>] = <span class="string">&quot;student_one&quot;</span>;    </span><br><span class="line">    mapStudent[<span class="number">1</span>] = <span class="string">&quot;student_two&quot;</span>;    </span><br><span class="line">    mapStudent[<span class="number">2</span>] = <span class="string">&quot;student_three&quot;</span>;    </span><br><span class="line">    map&lt;<span class="type">int</span>, string&gt;::iterator iter;    </span><br><span class="line">    <span class="keyword">for</span>(iter = mapStudent.<span class="built_in">begin</span>(); iter != mapStudent.<span class="built_in">end</span>(); iter++)    </span><br><span class="line">       cout&lt;&lt;iter-&gt;first&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;iter-&gt;second&lt;&lt;endl;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h3 id="3-4-5-查找、删除、交换">3.4.5 查找、删除、交换</h3>
<p><strong>查找</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 关键字查询，找到则返回指向该关键字的迭代器，否则返回指向end的迭代器</span></span><br><span class="line"><span class="comment">// 根据map的类型，返回的迭代器为 iterator 或者 const_iterator</span></span><br><span class="line"><span class="function">iterator <span class="title">find</span> <span class="params">(<span class="type">const</span> key_type&amp; k)</span></span>;</span><br><span class="line"><span class="function">const_iterator <span class="title">find</span> <span class="params">(<span class="type">const</span> key_type&amp; k)</span> <span class="type">const</span></span>;</span><br></pre></td></tr></table></figure>
<p><strong>删除</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除迭代器指向位置的键值对，并返回一个指向下一元素的迭代器</span></span><br><span class="line"><span class="function">iterator <span class="title">erase</span><span class="params">( iterator pos )</span></span></span><br><span class="line"><span class="function"> </span></span><br><span class="line"><span class="function"><span class="comment">// 删除一定范围内的元素，并返回一个指向下一元素的迭代器</span></span></span><br><span class="line"><span class="function">iterator <span class="title">erase</span><span class="params">( const_iterator first, const_iterator last )</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 根据Key来进行删除， 返回删除的元素数量，在map里结果非0即1</span></span><br><span class="line"><span class="function"><span class="type">size_t</span> <span class="title">erase</span><span class="params">( <span class="type">const</span> key_type&amp; key )</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 清空map，清空后的size为0</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
<p><strong>交换</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 就是两个map的内容互换</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">( map&amp; other )</span></span>;</span><br></pre></td></tr></table></figure>
<h3 id="3-4-6-容量">3.4.6 容量</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询map是否为空</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 查询map中键值对的数量</span></span><br><span class="line"><span class="function"><span class="type">size_t</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 查询map所能包含的最大键值对数量，和系统和应用库有关。</span></span><br><span class="line"><span class="comment">// 此外，这并不意味着用户一定可以存这么多，很可能还没达到就已经开辟内存失败了</span></span><br><span class="line"><span class="function"><span class="type">size_t</span> <span class="title">max_size</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 查询关键字为key的元素的个数，在map里结果非0即1</span></span><br><span class="line"><span class="function"><span class="type">size_t</span> <span class="title">count</span><span class="params">( <span class="type">const</span> Key&amp; key )</span> <span class="type">const</span></span>; <span class="comment">//</span></span><br></pre></td></tr></table></figure>
<h3 id="3-4-7-排序">3.4.7 排序</h3>
<p>map中的元素是自动按Key升序排序，所以不能对map用sort函数；</p>
<p>这里要讲的是一点比较高深的用法了,排序问题，STL中默认是采用小于号来排序的，以上代码在排序上是不存在任何问题的，因为上面的关键字是int 型，它本身支持小于号运算，在一些特殊情况，比如关键字是一个结构体或者自定义类，涉及到排序就会出现问题，因为它没有小于号操作，insert等函数在编译的时候过 不去，下面给出两个方法解决这个问题。</p>
<p><strong>3.4.7.1 小于号 &lt; 重载</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span>  </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">tagStudentinfo</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span>      niD;</span><br><span class="line">	string   strName;</span><br><span class="line">	<span class="type">bool</span> <span class="keyword">operator</span> &lt; (tagStudentinfo <span class="type">const</span>&amp; _A) <span class="type">const</span></span><br><span class="line">	&#123;     <span class="comment">//这个函数指定排序策略，按niD排序，如果niD相等的话，按strName排序  </span></span><br><span class="line">		<span class="keyword">if</span> (niD &lt; _A.niD) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">if</span> (niD == _A.niD)</span><br><span class="line">			<span class="keyword">return</span> strName.<span class="built_in">compare</span>(_A.strName) &lt; <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;Studentinfo, *PStudentinfo; <span class="comment">//学生信息  </span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> nSize;   <span class="comment">//用学生信息映射分数  </span></span><br><span class="line">	map&lt;Studentinfo, <span class="type">int</span>&gt;mapStudent;</span><br><span class="line">	map&lt;Studentinfo, <span class="type">int</span>&gt;::iterator iter;</span><br><span class="line">	Studentinfo studentinfo;</span><br><span class="line">	studentinfo.niD = <span class="number">1</span>;</span><br><span class="line">	studentinfo.strName = <span class="string">&quot;student_one&quot;</span>;</span><br><span class="line">	mapStudent.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;Studentinfo, <span class="type">int</span>&gt;(studentinfo, <span class="number">90</span>));</span><br><span class="line">	studentinfo.niD = <span class="number">2</span>;</span><br><span class="line">	studentinfo.strName = <span class="string">&quot;student_two&quot;</span>;</span><br><span class="line">	mapStudent.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;Studentinfo, <span class="type">int</span>&gt;(studentinfo, <span class="number">80</span>));</span><br><span class="line">	<span class="keyword">for</span> (iter = mapStudent.<span class="built_in">begin</span>(); iter != mapStudent.<span class="built_in">end</span>(); iter++)</span><br><span class="line">		cout &lt;&lt; iter-&gt;first.niD &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; iter-&gt;first.strName &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; iter-&gt;second &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>3.4.7.2 仿函数的应用，这个时候结构体中没有直接的小于号重载</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第二种：仿函数的应用，这个时候结构体中没有直接的小于号重载，程序说明  </span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span>  </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">tagStudentinfo</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span>      niD;</span><br><span class="line">	string   strName;</span><br><span class="line">&#125;Studentinfo, *PStudentinfo; <span class="comment">//学生信息  </span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">sort</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(Studentinfo <span class="type">const</span> &amp;_A, Studentinfo <span class="type">const</span> &amp;_B)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (_A.niD &lt; _B.niD)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">if</span> (_A.niD == _B.niD)</span><br><span class="line">			<span class="keyword">return</span> _A.strName.<span class="built_in">compare</span>(_B.strName) &lt; <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">	<span class="comment">//用学生信息映射分数  </span></span><br><span class="line">	map&lt;Studentinfo, <span class="type">int</span>, sort&gt;mapStudent;</span><br><span class="line">	map&lt;Studentinfo, <span class="type">int</span>&gt;::iterator iter;</span><br><span class="line">	Studentinfo studentinfo;</span><br><span class="line">	studentinfo.niD = <span class="number">1</span>;</span><br><span class="line">	studentinfo.strName = <span class="string">&quot;student_one&quot;</span>;</span><br><span class="line">	mapStudent.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;Studentinfo, <span class="type">int</span>&gt;(studentinfo, <span class="number">90</span>));</span><br><span class="line">	studentinfo.niD = <span class="number">2</span>;</span><br><span class="line">	studentinfo.strName = <span class="string">&quot;student_two&quot;</span>;</span><br><span class="line">	mapStudent.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;Studentinfo, <span class="type">int</span>&gt;(studentinfo, <span class="number">80</span>));</span><br><span class="line">	<span class="keyword">for</span> (iter = mapStudent.<span class="built_in">begin</span>(); iter != mapStudent.<span class="built_in">end</span>(); iter++)</span><br><span class="line">		cout &lt;&lt; iter-&gt;first.niD &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; iter-&gt;first.strName &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; iter-&gt;second &lt;&lt; endl;</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-4-8-unordered-map">3.4.8 unordered_map</h3>
<p>在c++11标准前，c++标准库中只有一种map，但是它的底层实现并不是适合所有的场景，如果我们需要其他适合的map实现就不得不使用比如boost库等三方的实现，在c++11中加了一种map unordered_map,unordered_set,他们的实现有什么不同呢？</p>
<p>map底层采用的是红黑树的实现查询的时间复杂度为O(logn),看起来并没有unordered_map快，但是也要看实际的数据量，虽然unordered_map的查询从算法上分析比map快，但是它有一些其它的消耗，比如哈希函数的构造和分析，还有如果出现哈希冲突解决哈希冲突等等都有一定的消耗，因此unordered_map的效率在很大的程度上由它的hash函数算法决定，而红黑树的效率是一个稳定值。</p>
<p>unordered_map的底层采用哈希表的实现，查询的时间复杂度为是O(1)。所以unordered_map内部就是无序的，数据是按散列函数插入到槽里面去的，数据之间无顺序可言，如果我们不需要内部有序，这种实现是没有问题的。unordered_map属于关联式容器，采用std::pair保存key-value形式的数据。用法与map一致。特别的是，STL中的map因为是有序的二叉树存储，所以对key值需要有大小的判断，当使用内置类型时，无需重载operator &lt; ；但是用用户自定义类型的话，就需要重载operator &lt; 。 unoredered_map全程使用不需要比较元素的key值的大小，但是，对于元素的==要有判断，又因为需要使用hash映射，所以，对于非内部类型，需要程序员为其定义这二者的内容，对于内部类型，就不需要了。unordered库使用“桶”来存储元素，散列值相同的被存储在一个桶里。当散列容器中有大量数据时，同一个桶里的数据也会增多，造成访问冲突，降低性能。为了提高散列容器的性能，unordered库会在插入元素是自动增加桶的数量，不需要用户指定。但是，用户也可以在构造函数或者rehash()函数中，指定最小的桶的数量。</p>
<p>还有另外一点从占用内存上来说因为unordered_map才用hash结构会有一定的内存损失，它的内存占用回高于map。</p>
<p>最后就是她们的场景了，首先如果你需要对map中的数据排序，就首选map，他会把你的数据按照key的自然排序排序（由于它的底层实现红黑树机制所以会排序），如果不需要排序，就看你对内存和cpu的选择了，不过一般都会选择unordered_map，它的查找效率会更高。</p>
<p>至于使用方法和函数，两者差不多，由于篇幅限制这里不再赘述，unordered_multimap用法亦可类推。</p>
<h2 id="3-5-set-multiset">3.5 set/multiset</h2>
<p>std::set 是关联容器，含有 Key 类型对象的已排序集。用比较函数compare进行排序。搜索、移除和插入拥有对数复杂度。 set 通常以红黑树实现。</p>
<p>set容器内的元素会被自动排序，set与map不同，set中的元素即是键值又是实值，set不允许两个元素有相同的键值。不能通过set的迭代器去修改set元素，原因是修改元素会破坏set组织。当对容器中的元素进行插入或者删除时，操作之前的所有迭代器在操作之后依然有效。</p>
<p>由于set元素是排好序的，且默认为升序，因此当set集合中的元素为结构体或自定义类时，该结构体或自定义类必须实现运算符‘&lt;’的重载。</p>
<ul>
<li>
<p>multiset特性及用法和set完全相同，唯一的差别在于它允许键值重复。</p>
</li>
<li>
<p>set和multiset的底层实现是一种高效的平衡二叉树，即红黑树（Red-Black Tree）。</p>
</li>
</ul>
<h3 id="3-5-1-set常用成员函数">3.5.1 set常用成员函数</h3>
<blockquote>
<ol>
<li>
<p>begin()–返回指向第一个元素的迭代器</p>
</li>
<li>
<p>clear()–清除所有元素</p>
</li>
<li>
<p>count()–返回某个值元素的个数</p>
</li>
<li>
<p>empty()–如果集合为空，返回true</p>
</li>
<li>
<p>end()–返回指向最后一个元素的迭代器</p>
</li>
<li>
<p>equal_range()–返回集合中与给定值相等的上下限的两个迭代器</p>
</li>
<li>
<p>erase()–删除集合中的元素</p>
</li>
<li>
<p>find()–返回一个指向被查找到元素的迭代器</p>
</li>
<li>
<p>get_allocator()–返回集合的分配器</p>
</li>
<li>
<p>insert()–在集合中插入元素</p>
</li>
<li>
<p>lower_bound()–返回指向大于（或等于）某值的第一个元素的迭代器</p>
</li>
<li>
<p>key_comp()–返回一个用于元素间值比较的函数</p>
</li>
<li>
<p>max_size()–返回集合能容纳的元素的最大限值</p>
</li>
<li>
<p>rbegin()–返回指向集合中最后一个元素的反向迭代器</p>
</li>
<li>
<p>rend()–返回指向集合中第一个元素的反向迭代器</p>
</li>
<li>
<p>size()–集合中元素的数目</p>
</li>
<li>
<p>swap()–交换两个集合变量</p>
</li>
<li>
<p>upper_bound()–返回大于某个值元素的迭代器</p>
</li>
<li>
<p>value_comp()–返回一个用于比较元素间的值的函数</p>
</li>
</ol>
</blockquote>
<h3 id="3-5-2-代码示例">3.5.2 代码示例</h3>
<ul>
<li>以下代码涉及的内容：</li>
</ul>
<p>1、set容器中，元素类型为基本类型，如何让set按照用户意愿来排序？</p>
<p>2、set容器中，如何让元素类型为自定义类型？</p>
<p>3、set容器的insert函数的返回值为什么类型？</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 仿函数CompareSet，在test02使用 */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CompareSet</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//从大到小排序</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> v1, <span class="type">int</span> v2)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v1 &gt; v2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//从小到大排序</span></span><br><span class="line">    <span class="comment">//bool operator()(int v1, int v2)</span></span><br><span class="line">    <span class="comment">//&#123;</span></span><br><span class="line">    <span class="comment">//    return v1 &lt; v2;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* Person类，用于test03 */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">friend</span> ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, <span class="type">const</span> Person &amp;person);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Person</span>(string name, <span class="type">int</span> age)</span><br><span class="line">    &#123;</span><br><span class="line">        mName = name;</span><br><span class="line">        mAge = age;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    string mName;</span><br><span class="line">    <span class="type">int</span> mAge;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, <span class="type">const</span> Person &amp;person)</span><br><span class="line">&#123;</span><br><span class="line">    out &lt;&lt; <span class="string">&quot;name:&quot;</span> &lt;&lt; person.mName &lt;&lt; <span class="string">&quot; age:&quot;</span> &lt;&lt; person.mAge &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 仿函数ComparePerson,用于test03 */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ComparePerson</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//名字大的在前面，如果名字相同，年龄大的排前面</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> Person &amp;p1, <span class="type">const</span> Person &amp;p2)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (p1.mName == p2.mName)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> p1.mAge &gt; p2.mAge;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p1.mName &gt; p2.mName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 打印set类型的函数模板 */</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintSet</span><span class="params">(T &amp;s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (T::iterator iter = s.<span class="built_in">begin</span>(); iter != s.<span class="built_in">end</span>(); ++iter)</span><br><span class="line">        cout &lt;&lt; *iter &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//set容器默认从小到大排序</span></span><br><span class="line">    set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="number">10</span>);</span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="number">20</span>);</span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="number">30</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//输出set</span></span><br><span class="line">    <span class="built_in">PrintSet</span>(s);</span><br><span class="line">    <span class="comment">//结果为:10 20 30</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* set的insert函数返回值为一个对组(pair)。</span></span><br><span class="line"><span class="comment">       对组的第一个值first为set类型的迭代器：</span></span><br><span class="line"><span class="comment">       1、若插入成功，迭代器指向该元素。</span></span><br><span class="line"><span class="comment">       2、若插入失败，迭代器指向之前已经存在的元素</span></span><br><span class="line"><span class="comment">       对组的第二个值seconde为bool类型：</span></span><br><span class="line"><span class="comment">       1、若插入成功，bool值为true</span></span><br><span class="line"><span class="comment">       2、若插入失败，bool值为false</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    pair&lt;set&lt;<span class="type">int</span>&gt;::iterator, <span class="type">bool</span>&gt; ret = s.<span class="built_in">insert</span>(<span class="number">40</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">true</span> == ret.second)</span><br><span class="line">        cout &lt;&lt; *ret.first &lt;&lt; <span class="string">&quot; 插入成功&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout &lt;&lt; *ret.first &lt;&lt; <span class="string">&quot; 插入失败&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/* 如果想让set容器从大到小排序，需要给set容</span></span><br><span class="line"><span class="comment">       器提供一个仿函数,本例的仿函数为CompareSet</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    set&lt;<span class="type">int</span>, CompareSet&gt; s;</span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="number">10</span>);</span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="number">20</span>);</span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="number">30</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//打印set</span></span><br><span class="line">    <span class="built_in">PrintSet</span>(s);</span><br><span class="line">    <span class="comment">//结果为:30,20,10</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/* set元素类型为Person，当set元素类型为自定义类型的时候</span></span><br><span class="line"><span class="comment">       必须给set提供一个仿函数，用于比较自定义类型的大小，</span></span><br><span class="line"><span class="comment">       否则无法通过编译 </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    set&lt;Person,ComparePerson&gt; s;</span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="built_in">Person</span>(<span class="string">&quot;John&quot;</span>, <span class="number">22</span>));</span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="built_in">Person</span>(<span class="string">&quot;Peter&quot;</span>, <span class="number">25</span>));</span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="built_in">Person</span>(<span class="string">&quot;Marry&quot;</span>, <span class="number">18</span>));</span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="built_in">Person</span>(<span class="string">&quot;Peter&quot;</span>, <span class="number">36</span>));</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//打印set</span></span><br><span class="line">    <span class="built_in">PrintSet</span>(s);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//test01();</span></span><br><span class="line">    <span class="comment">//test02();</span></span><br><span class="line">    <span class="comment">//test03();</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>multiset容器的insert函数返回值为什么？</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 打印set类型的函数模板 */</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintSet</span><span class="params">(T &amp;s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (T::iterator iter = s.<span class="built_in">begin</span>(); iter != s.<span class="built_in">end</span>(); ++iter)</span><br><span class="line">        cout &lt;&lt; *iter &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    multiset&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="number">10</span>);</span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="number">20</span>);</span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="number">30</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//打印multiset</span></span><br><span class="line">    <span class="built_in">PrintSet</span>(s);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* multiset的insert函数返回值为multiset类型的迭代器，</span></span><br><span class="line"><span class="comment">       指向新插入的元素。multiset允许插入相同的值，因此</span></span><br><span class="line"><span class="comment">       插入一定成功，因此不需要返回bool类型。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    multiset&lt;<span class="type">int</span>&gt;::iterator iter = s.<span class="built_in">insert</span>(<span class="number">10</span>);</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; *iter &lt;&lt; endl;    </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-5-3-unordered-set">3.5.3 unordered_set</h3>
<p>C++ 11中出现了两种新的关联容器:unordered_set和unordered_map，其内部实现与set和map大有不同，set和map内部实现是基于RB-Tree，而unordered_set和unordered_map内部实现是基于哈希表(hashtable)，由于unordered_set和unordered_map内部实现的公共接口大致相同，所以本文以unordered_set为例。</p>
<p>​    unordered_set是基于哈希表，因此要了解unordered_set，就必须了解哈希表的机制。哈希表是根据关键码值而进行直接访问的数据结构，通过相应的哈希函数(也称散列函数)处理关键字得到相应的关键码值，关键码值对应着一个特定位置，用该位置来存取相应的信息，这样就能以较快的速度获取关键字的信息。比如：现有公司员工的个人信息（包括年龄），需要查询某个年龄的员工个数。由于人的年龄范围大约在[0，200]，所以可以开一个200大小的数组，然后通过哈希函数得到key对应的key-value，这样就能完成统计某个年龄的员工个数。而在这个例子中，也存在这样一个问题，两个员工的年龄相同，但其他信息（如：名字、身份证）不同，通过前面说的哈希函数，会发现其都位于数组的相同位置，这里，就涉及到“冲突”。准确来说，冲突是不可避免的，而解决冲突的方法常见的有：开发地址法、再散列法、链地址法(也称拉链法)。而unordered_set内部解决冲突采用的是----链地址法，当用冲突发生时把具有同一关键码的数据组成一个链表。下图展示了链地址法的使用:</p>
<p><img src="/2022/09/23/C-%E4%B8%ADSTL%E7%94%A8%E6%B3%95%E8%B6%85%E8%AF%A6%E7%BB%86%E6%80%BB%E7%BB%93/images/20150707111017370" alt="链地址法"></p>
<p>使用unordered_set需要包含#include&lt;unordered_set&gt;头文件，同unordered_map类似，用法没有什么太大的区别，参考set/multiset。</p>
<p>除此之外unordered_multiset也是一种可选的容器。</p>
<p><strong>reference：</strong></p>
<p><a href="http://www.runoob.com/w3cnote/cpp-vector-container-analysis.html">http://www.runoob.com/w3cnote/cpp-vector-container-analysis.html</a></p>
<p><a href="https://blog.csdn.net/tianshuai1111/article/details/7687983">https://blog.csdn.net/tianshuai1111/article/details/7687983</a></p>
<hr>
<p>​																																			  ————Designed By 李季鸿</p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3笔记</title>
    <url>/2022/09/19/Vue3%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1>Vue3快速上手</h1>
<img src="https://user-images.githubusercontent.com/499550/93624428-53932780-f9ae-11ea-8d16-af949e16a09f.png" style="width:200px">
<h2 id="1-Vue3简介">1.Vue3简介</h2>
<ul>
<li>2020年9月18日，Vue.js发布3.0版本，代号：One Piece（海贼王）</li>
<li>耗时2年多、<a href="https://github.com/vuejs/vue-next/graphs/commit-activity">2600+次提交</a>、<a href="https://github.com/vuejs/rfcs/tree/master/active-rfcs">30+个RFC</a>、<a href="https://github.com/vuejs/vue-next/pulls?q=is%3Apr+is%3Amerged+-author%3Aapp%2Fdependabot-preview+">600+次PR</a>、<a href="https://github.com/vuejs/vue-next/graphs/contributors">99位贡献者</a></li>
<li>github上的tags地址：<a href="https://github.com/vuejs/vue-next/releases/tag/v3.0.0">https://github.com/vuejs/vue-next/releases/tag/v3.0.0</a></li>
</ul>
<span id="more"></span>
<h2 id="2-Vue3带来了什么">2.Vue3带来了什么</h2>
<h3 id="1-性能的提升">1.性能的提升</h3>
<ul>
<li>
<p>打包大小减少41%</p>
</li>
<li>
<p>初次渲染快55%, 更新渲染快133%</p>
</li>
<li>
<p>内存减少54%</p>
<p>…</p>
</li>
</ul>
<h3 id="2-源码的升级">2.源码的升级</h3>
<ul>
<li>
<p>使用Proxy代替defineProperty实现响应式</p>
</li>
<li>
<p>重写虚拟DOM的实现和Tree-Shaking</p>
<p>…</p>
</li>
</ul>
<h3 id="3-拥抱TypeScript">3.拥抱TypeScript</h3>
<ul>
<li>Vue3可以更好的支持TypeScript</li>
</ul>
<h3 id="4-新的特性">4.新的特性</h3>
<ol>
<li>
<p>Composition API（组合API）</p>
<ul>
<li>setup配置</li>
<li>ref与reactive</li>
<li>watch与watchEffect</li>
<li>provide与inject</li>
<li>…</li>
</ul>
</li>
<li>
<p>新的内置组件</p>
<ul>
<li>Fragment</li>
<li>Teleport</li>
<li>Suspense</li>
</ul>
</li>
<li>
<p>其他改变</p>
<ul>
<li>新的生命周期钩子</li>
<li>data 选项应始终被声明为一个函数</li>
<li>移除keyCode支持作为 v-on 的修饰符</li>
<li>…</li>
</ul>
</li>
</ol>
<h1>一、创建Vue3.0工程</h1>
<h2 id="1-使用-vue-cli-创建">1.使用 vue-cli 创建</h2>
<p>官方文档：<a href="https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create">https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上</span></span><br><span class="line">vue --version</span><br><span class="line"><span class="comment">## 安装或者升级你的@vue/cli</span></span><br><span class="line">npm install -g @vue/cli</span><br><span class="line"><span class="comment">## 创建</span></span><br><span class="line">vue create vue_test</span><br><span class="line"><span class="comment">## 启动</span></span><br><span class="line"><span class="built_in">cd</span> vue_test</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure>
<h2 id="2-使用-vite-创建">2.使用 vite 创建</h2>
<p>官方文档：<a href="https://v3.cn.vuejs.org/guide/installation.html#vite">https://v3.cn.vuejs.org/guide/installation.html#vite</a></p>
<p>vite官网：<a href="https://vitejs.cn">https://vitejs.cn</a></p>
<ul>
<li>什么是vite？—— 新一代前端构建工具。</li>
<li>优势如下：
<ul>
<li>开发环境中，无需打包操作，可快速的冷启动。</li>
<li>轻量快速的热重载（HMR）。</li>
<li>真正的按需编译，不再等待整个应用编译完成。</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 创建工程</span></span><br><span class="line">npm init vite-app &lt;project-name&gt;</span><br><span class="line"><span class="comment">## 进入工程目录</span></span><br><span class="line"><span class="built_in">cd</span> &lt;project-name&gt;</span><br><span class="line"><span class="comment">## 安装依赖</span></span><br><span class="line">npm install</span><br><span class="line"><span class="comment">## 运行</span></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure>
<h1>二、常用 Composition API</h1>
<p>官方文档: <a href="https://v3.cn.vuejs.org/guide/composition-api-introduction.html">https://v3.cn.vuejs.org/guide/composition-api-introduction.html</a></p>
<h2 id="1-拉开序幕的setup">1.拉开序幕的setup</h2>
<ol>
<li>理解：Vue3.0中一个新的配置项，值为一个函数。</li>
<li>setup是所有<strong style="color:#DD5145">Composition API（组合API）</strong><i style="color:gray;font-weight:bold">“ 表演的舞台 ”</i>。</li>
<li>组件中所用到的：数据、方法等等，均要配置在setup中。</li>
<li>setup函数的两种返回值：
<ol>
<li>若返回一个对象，则对象中的属性、方法, 在模板中均可以直接使用。（重点关注！）</li>
<li><span style="color:#aad">若返回一个渲染函数：则可以自定义渲染内容。（了解）</span></li>
</ol>
</li>
<li>注意点：
<ol>
<li>尽量不要与Vue2.x配置混用
<ul>
<li>Vue2.x配置（data、methos、computed…）中<strong style="color:#DD5145">可以访问到</strong>setup中的属性、方法。</li>
<li>但在setup中<strong style="color:#DD5145">不能访问到</strong>Vue2.x配置（data、methos、computed…）。</li>
<li>如果有重名, setup优先。</li>
</ul>
</li>
<li>setup不能是一个async函数，因为返回值不再是return的对象, 而是promise, 模板看不到return对象中的属性。（后期也可以返回一个Promise实例，但需要Suspense和异步组件的配合）</li>
</ol>
</li>
</ol>
<h2 id="2-ref函数">2.ref函数</h2>
<ul>
<li>作用: 定义一个响应式的数据</li>
<li>语法: <code>const xxx = ref(initValue)</code>
<ul>
<li>创建一个包含响应式数据的<strong style="color:#DD5145">引用对象（reference对象，简称ref对象）</strong>。</li>
<li>JS中操作数据： <code>xxx.value</code></li>
<li>模板中读取数据: 不需要.value，直接：<code>&lt;div&gt;&#123;&#123;xxx&#125;&#125;&lt;/div&gt;</code></li>
</ul>
</li>
<li>备注：
<ul>
<li>接收的数据可以是：基本类型、也可以是对象类型。</li>
<li>基本类型的数据：响应式依然是靠<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>完成的。</li>
<li>对象类型的数据：内部 <i style="color:gray;font-weight:bold">“ 求助 ”</i> 了Vue3.0中的一个新函数—— <code>reactive</code>函数。</li>
</ul>
</li>
</ul>
<h2 id="3-reactive函数">3.reactive函数</h2>
<ul>
<li>作用: 定义一个<strong style="color:#DD5145">对象类型</strong>的响应式数据（基本类型不要用它，要用<code>ref</code>函数）</li>
<li>语法：<code>const 代理对象= reactive(源对象)</code>接收一个对象（或数组），返回一个<strong style="color:#DD5145">代理对象（Proxy的实例对象，简称proxy对象）</strong></li>
<li>reactive定义的响应式数据是“深层次的”。</li>
<li>内部基于 ES6 的 Proxy 实现，通过代理对象操作源对象内部数据进行操作。</li>
</ul>
<h2 id="4-Vue3-0中的响应式原理">4.Vue3.0中的响应式原理</h2>
<h3 id="vue2-x的响应式">vue2.x的响应式</h3>
<ul>
<li>
<p>实现原理：</p>
<ul>
<li>
<p>对象类型：通过<code>Object.defineProperty()</code>对属性的读取、修改进行拦截（数据劫持）。</p>
</li>
<li>
<p>数组类型：通过重写更新数组的一系列方法来实现拦截。（对数组的变更方法进行了包裹）。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(data, <span class="string">&#x27;count&#x27;</span>, &#123;</span><br><span class="line">    get () &#123;&#125;, </span><br><span class="line">    set () &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li>
<p>存在问题：</p>
<ul>
<li>新增属性、删除属性, 界面不会更新。</li>
<li>直接通过下标修改数组, 界面不会自动更新。</li>
</ul>
</li>
</ul>
<h3 id="Vue3-0的响应式">Vue3.0的响应式</h3>
<ul>
<li>实现原理:
<ul>
<li>通过Proxy（代理）:  拦截对象中任意属性的变化, 包括：属性值的读写、属性的添加、属性的删除等。</li>
<li>通过Reflect（反射）:  对源对象的属性进行操作。</li>
<li>MDN文档中描述的Proxy与Reflect：
<ul>
<li>
<p>Proxy：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy</a></p>
</li>
<li>
<p>Reflect：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Proxy</span>(data, &#123;</span><br><span class="line">	<span class="comment">// 拦截读取属性值</span></span><br><span class="line">    get (target, prop) &#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, prop)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 拦截设置属性值或添加新属性</span></span><br><span class="line">    set (target, prop, value) &#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, prop, value)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 拦截删除属性</span></span><br><span class="line">    deleteProperty (target, prop) &#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">deleteProperty</span>(target, prop)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">proxy.<span class="property">name</span> = <span class="string">&#x27;tom&#x27;</span>   </span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="5-reactive对比ref">5.reactive对比ref</h2>
<ul>
<li>从定义数据角度对比：
<ul>
<li>ref用来定义：<strong style="color:#DD5145">基本类型数据</strong>。</li>
<li>reactive用来定义：<strong style="color:#DD5145">对象（或数组）类型数据</strong>。</li>
<li>备注：ref也可以用来定义<strong style="color:#DD5145">对象（或数组）类型数据</strong>, 它内部会自动通过<code>reactive</code>转为<strong style="color:#DD5145">代理对象</strong>。</li>
</ul>
</li>
<li>从原理角度对比：
<ul>
<li>ref通过<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>来实现响应式（数据劫持）。</li>
<li>reactive通过使用<strong style="color:#DD5145">Proxy</strong>来实现响应式（数据劫持）, 并通过<strong style="color:#DD5145">Reflect</strong>操作<strong style="color:orange">源对象</strong>内部的数据。</li>
</ul>
</li>
<li>从使用角度对比：
<ul>
<li>ref定义的数据：操作数据<strong style="color:#DD5145">需要</strong><code>.value</code>，读取数据时模板中直接读取<strong style="color:#DD5145">不需要</strong><code>.value</code>。</li>
<li>reactive定义的数据：操作数据与读取数据：<strong style="color:#DD5145">均不需要</strong><code>.value</code>。</li>
</ul>
</li>
</ul>
<h2 id="6-setup的两个注意点">6.setup的两个注意点</h2>
<ul>
<li>
<p>setup执行的时机</p>
<ul>
<li>在beforeCreate之前执行一次，this是undefined。</li>
</ul>
</li>
<li>
<p>setup的参数</p>
<ul>
<li>props：值为对象，包含：组件外部传递过来，且组件内部声明接收了的属性。</li>
<li>context：上下文对象
<ul>
<li>attrs: 值为对象，包含：组件外部传递过来，但没有在props配置中声明的属性, 相当于 <code>this.$attrs</code>。</li>
<li>slots: 收到的插槽内容, 相当于 <code>this.$slots</code>。</li>
<li>emit: 分发自定义事件的函数, 相当于 <code>this.$emit</code>。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="7-计算属性与监视">7.计算属性与监视</h2>
<h3 id="1-computed函数">1.computed函数</h3>
<ul>
<li>
<p>与Vue2.x中computed配置功能一致</p>
</li>
<li>
<p>写法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;computed&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">    ...</span><br><span class="line">	<span class="comment">//计算属性——简写</span></span><br><span class="line">    <span class="keyword">let</span> fullName = <span class="title function_">computed</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> person.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + person.<span class="property">lastName</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//计算属性——完整</span></span><br><span class="line">    <span class="keyword">let</span> fullName = <span class="title function_">computed</span>(&#123;</span><br><span class="line">        <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> person.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + person.<span class="property">lastName</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">set</span>(<span class="params">value</span>)&#123;</span><br><span class="line">            <span class="keyword">const</span> nameArr = value.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            person.<span class="property">firstName</span> = nameArr[<span class="number">0</span>]</span><br><span class="line">            person.<span class="property">lastName</span> = nameArr[<span class="number">1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="2-watch函数">2.watch函数</h3>
<ul>
<li>
<p>与Vue2.x中watch配置功能一致</p>
</li>
<li>
<p>两个小“坑”：</p>
<ul>
<li>监视reactive定义的响应式数据时：oldValue无法正确获取、强制开启了深度监视（deep配置失效）。</li>
<li>监视reactive定义的响应式数据中某个属性时：deep配置有效。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//情况一：监视ref定义的响应式数据</span></span><br><span class="line"><span class="title function_">watch</span>(sum,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;sum变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//情况二：监视多个ref定义的响应式数据</span></span><br><span class="line"><span class="title function_">watch</span>([sum,msg],<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;sum或msg变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;) </span><br><span class="line"></span><br><span class="line"><span class="comment">/* 情况三：监视reactive定义的响应式数据</span></span><br><span class="line"><span class="comment">			若watch监视的是reactive定义的响应式数据，则无法正确获得oldValue！！</span></span><br><span class="line"><span class="comment">			若watch监视的是reactive定义的响应式数据，则强制开启了深度监视 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="title function_">watch</span>(person,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>,<span class="attr">deep</span>:<span class="literal">false</span>&#125;) <span class="comment">//此处的deep配置不再奏效</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//情况四：监视reactive定义的响应式数据中的某个属性</span></span><br><span class="line"><span class="title function_">watch</span>(<span class="function">()=&gt;</span>person.<span class="property">job</span>,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>,<span class="attr">deep</span>:<span class="literal">true</span>&#125;) </span><br><span class="line"></span><br><span class="line"><span class="comment">//情况五：监视reactive定义的响应式数据中的某些属性</span></span><br><span class="line"><span class="title function_">watch</span>([<span class="function">()=&gt;</span>person.<span class="property">job</span>,<span class="function">()=&gt;</span>person.<span class="property">name</span>],<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>,<span class="attr">deep</span>:<span class="literal">true</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//特殊情况</span></span><br><span class="line"><span class="title function_">watch</span>(<span class="function">()=&gt;</span>person.<span class="property">job</span>,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">deep</span>:<span class="literal">true</span>&#125;) <span class="comment">//此处由于监视的是reactive素定义的对象中的某个属性，所以deep配置有效</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="3-watchEffect函数">3.watchEffect函数</h3>
<ul>
<li>
<p>watch的套路是：既要指明监视的属性，也要指明监视的回调。</p>
</li>
<li>
<p>watchEffect的套路是：不用指明监视哪个属性，监视的回调中用到哪个属性，那就监视哪个属性。</p>
</li>
<li>
<p>watchEffect有点像computed：</p>
<ul>
<li>但computed注重的计算出来的值（回调函数的返回值），所以必须要写返回值。</li>
<li>而watchEffect更注重的是过程（回调函数的函数体），所以不用写返回值。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//watchEffect所指定的回调中用到的数据只要发生变化，则直接重新执行回调。</span></span><br><span class="line"><span class="title function_">watchEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> x1 = sum.<span class="property">value</span></span><br><span class="line">    <span class="keyword">const</span> x2 = person.<span class="property">age</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;watchEffect配置的回调执行了&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="8-生命周期">8.生命周期</h2>
<ul>
<li>Vue3.0中可以继续使用Vue2.x中的生命周期钩子，但有有两个被更名：
<ul>
<li><code>beforeDestroy</code>改名为 <code>beforeUnmount</code></li>
<li><code>destroyed</code>改名为 <code>unmounted</code></li>
</ul>
</li>
<li>Vue3.0也提供了 Composition API 形式的生命周期钩子，与Vue2.x中钩子对应关系如下：
<ul>
<li><code>beforeCreate</code>===&gt;<code>setup()</code></li>
<li><code>created</code>=======&gt;<code>setup()</code></li>
<li><code>beforeMount</code> ===&gt;<code>onBeforeMount</code></li>
<li><code>mounted</code>=======&gt;<code>onMounted</code></li>
<li><code>beforeUpdate</code>===&gt;<code>onBeforeUpdate</code></li>
<li><code>updated</code> =======&gt;<code>onUpdated</code></li>
<li><code>beforeUnmount</code> ==&gt;<code>onBeforeUnmount</code></li>
<li><code>unmounted</code> =====&gt;<code>onUnmounted</code></li>
</ul>
</li>
</ul>
<h2 id="9-自定义hook函数">9.自定义hook函数</h2>
<ul>
<li>
<p>什么是hook？—— 本质是一个函数，把setup函数中使用的Composition API进行了封装。</p>
</li>
<li>
<p>类似于vue2.x中的mixin。</p>
</li>
<li>
<p>自定义hook的优势: 复用代码, 让setup中的逻辑更清楚易懂。</p>
</li>
</ul>
<h2 id="10-toRef">10.toRef</h2>
<ul>
<li>
<p>作用：创建一个 ref 对象，其value值指向另一个对象中的某个属性。</p>
</li>
<li>
<p>语法：<code>const name = toRef(person,'name')</code></p>
</li>
<li>
<p>应用:   要将响应式对象中的某个属性单独提供给外部使用时。</p>
</li>
<li>
<p>扩展：<code>toRefs</code> 与<code>toRef</code>功能一致，但可以批量创建多个 ref 对象，语法：<code>toRefs(person)</code></p>
</li>
</ul>
<h1>三、其它 Composition API</h1>
<h2 id="1-shallowReactive-与-shallowRef">1.shallowReactive 与 shallowRef</h2>
<ul>
<li>
<p>shallowReactive：只处理对象最外层属性的响应式（浅响应式）。</p>
</li>
<li>
<p>shallowRef：只处理基本数据类型的响应式, 不进行对象的响应式处理。</p>
</li>
<li>
<p>什么时候使用?</p>
<ul>
<li>如果有一个对象数据，结构比较深, 但变化时只是外层属性变化 ===&gt; shallowReactive。</li>
<li>如果有一个对象数据，后续功能不会修改该对象中的属性，而是生新的对象来替换 ===&gt; shallowRef。</li>
</ul>
</li>
</ul>
<h2 id="2-readonly-与-shallowReadonly">2.readonly 与 shallowReadonly</h2>
<ul>
<li>readonly: 让一个响应式数据变为只读的（深只读）。</li>
<li>shallowReadonly：让一个响应式数据变为只读的（浅只读）。</li>
<li>应用场景: 不希望数据被修改时。</li>
</ul>
<h2 id="3-toRaw-与-markRaw">3.toRaw 与 markRaw</h2>
<ul>
<li>toRaw：
<ul>
<li>作用：将一个由<code>reactive</code>生成的<strong style="color:orange">响应式对象</strong>转为<strong style="color:orange">普通对象</strong>。</li>
<li>使用场景：用于读取响应式对象对应的普通对象，对这个普通对象的所有操作，不会引起页面更新。</li>
</ul>
</li>
<li>markRaw：
<ul>
<li>作用：标记一个对象，使其永远不会再成为响应式对象。</li>
<li>应用场景:
<ol>
<li>有些值不应被设置为响应式的，例如复杂的第三方类库等。</li>
<li>当渲染具有不可变数据源的大列表时，跳过响应式转换可以提高性能。</li>
</ol>
</li>
</ul>
</li>
</ul>
<h2 id="4-customRef">4.customRef</h2>
<ul>
<li>
<p>作用：创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制。</p>
</li>
<li>
<p>实现防抖效果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;input type=&quot;text&quot; v-model=&quot;keyword&quot;&gt;</span><br><span class="line">	&lt;h3&gt;&#123;&#123;keyword&#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">	import &#123;ref,customRef&#125; from &#x27;vue&#x27;</span><br><span class="line">	export default &#123;</span><br><span class="line">		name:&#x27;Demo&#x27;,</span><br><span class="line">		setup()&#123;</span><br><span class="line">			// let keyword = ref(&#x27;hello&#x27;) //使用Vue准备好的内置ref</span><br><span class="line">			//自定义一个myRef</span><br><span class="line">			function myRef(value,delay)&#123;</span><br><span class="line">				let timer</span><br><span class="line">				//通过customRef去实现自定义</span><br><span class="line">				return customRef((track,trigger)=&gt;&#123;</span><br><span class="line">					return&#123;</span><br><span class="line">						get()&#123;</span><br><span class="line">							track() //告诉Vue这个value值是需要被“追踪”的</span><br><span class="line">							return value</span><br><span class="line">						&#125;,</span><br><span class="line">						set(newValue)&#123;</span><br><span class="line">							clearTimeout(timer)</span><br><span class="line">							timer = setTimeout(()=&gt;&#123;</span><br><span class="line">								value = newValue</span><br><span class="line">								trigger() //告诉Vue去更新界面</span><br><span class="line">							&#125;,delay)</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;)</span><br><span class="line">			&#125;</span><br><span class="line">			let keyword = myRef(&#x27;hello&#x27;,500) //使用程序员自定义的ref</span><br><span class="line">			return &#123;</span><br><span class="line">				keyword</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="5-provide-与-inject">5.provide 与 inject</h2>
<ul>
<li>
<p>作用：实现<strong style="color:#DD5145">祖与后代组件间</strong>通信</p>
</li>
<li>
<p>套路：父组件有一个 <code>provide</code> 选项来提供数据，后代组件有一个 <code>inject</code> 选项来开始使用这些数据</p>
</li>
<li>
<p>具体写法：</p>
<ol>
<li>
<p>祖组件中：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">	......</span><br><span class="line">    <span class="keyword">let</span> car = <span class="title function_">reactive</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;奔驰&#x27;</span>,<span class="attr">price</span>:<span class="string">&#x27;40万&#x27;</span>&#125;)</span><br><span class="line">    <span class="title function_">provide</span>(<span class="string">&#x27;car&#x27;</span>,car)</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>后代组件中：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params">props,context</span>)&#123;</span><br><span class="line">	......</span><br><span class="line">    <span class="keyword">const</span> car = <span class="title function_">inject</span>(<span class="string">&#x27;car&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;car&#125;</span><br><span class="line">	......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ul>
<h2 id="6-响应式数据的判断">6.响应式数据的判断</h2>
<ul>
<li>isRef: 检查一个值是否为一个 ref 对象</li>
<li>isReactive: 检查一个对象是否是由 <code>reactive</code> 创建的响应式代理</li>
<li>isReadonly: 检查一个对象是否是由 <code>readonly</code> 创建的只读代理</li>
<li>isProxy: 检查一个对象是否是由 <code>reactive</code> 或者 <code>readonly</code> 方法创建的代理</li>
</ul>
<h1>四、Composition API 的优势</h1>
<h2 id="1-Options-API-存在的问题">1.Options API 存在的问题</h2>
<p>使用传统OptionsAPI中，新增或者修改一个需求，就需要分别在data，methods，computed里修改 。<br>
<img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f84e4e2c02424d9a99862ade0a2e4114~tplv-k3u1fbpfcp-watermark.image"><br>
<img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e5ac7e20d1784887a826f6360768a368~tplv-k3u1fbpfcp-watermark.image"></p>
<h2 id="2-Composition-API-的优势">2.Composition API 的优势</h2>
<p>我们可以更加优雅的组织我们的代码，函数。让相关功能的代码更加有序的组织在一起。<br>
<img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bc0be8211fc54b6c941c036791ba4efe~tplv-k3u1fbpfcp-watermark.image"><br>
<img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6cc55165c0e34069a75fe36f8712eb80~tplv-k3u1fbpfcp-watermark.image"></p>
<h1>五、新的组件</h1>
<h2 id="1-Fragment">1.Fragment</h2>
<ul>
<li>在Vue2中: 组件必须有一个根标签</li>
<li>在Vue3中: 组件可以没有根标签, 内部会将多个标签包含在一个Fragment虚拟元素中</li>
<li>好处: 减少标签层级, 减小内存占用</li>
</ul>
<h2 id="2-Teleport">2.Teleport</h2>
<ul>
<li>
<p>什么是Teleport？—— <code>Teleport</code> 是一种能够将我们的<strong style="color:#DD5145">组件html结构</strong>移动到指定位置的技术。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;teleport to=&quot;移动位置&quot;&gt;</span><br><span class="line">	&lt;div v-if=&quot;isShow&quot; class=&quot;mask&quot;&gt;</span><br><span class="line">		&lt;div class=&quot;dialog&quot;&gt;</span><br><span class="line">			&lt;h3&gt;我是一个弹窗&lt;/h3&gt;</span><br><span class="line">			&lt;button @click=&quot;isShow = false&quot;&gt;关闭弹窗&lt;/button&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/teleport&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="3-Suspense">3.Suspense</h2>
<ul>
<li>
<p>等待异步组件时渲染一些额外内容，让应用有更好的用户体验</p>
</li>
<li>
<p>使用步骤：</p>
<ul>
<li>
<p>异步引入组件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;defineAsyncComponent&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Child</span> = <span class="title function_">defineAsyncComponent</span>(<span class="function">()=&gt;</span><span class="title function_">import</span>(<span class="string">&#x27;./components/Child.vue&#x27;</span>))</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>使用<code>Suspense</code>包裹组件，并配置好<code>default</code> 与 <code>fallback</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div class=&quot;app&quot;&gt;</span><br><span class="line">		&lt;h3&gt;我是App组件&lt;/h3&gt;</span><br><span class="line">		&lt;Suspense&gt;</span><br><span class="line">			&lt;template v-slot:default&gt;</span><br><span class="line">				&lt;Child/&gt;</span><br><span class="line">			&lt;/template&gt;</span><br><span class="line">			&lt;template v-slot:fallback&gt;</span><br><span class="line">				&lt;h3&gt;加载中.....&lt;/h3&gt;</span><br><span class="line">			&lt;/template&gt;</span><br><span class="line">		&lt;/Suspense&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h1>六、其他</h1>
<h2 id="1-全局API的转移">1.全局API的转移</h2>
<ul>
<li>
<p>Vue 2.x 有许多全局 API 和配置。</p>
<ul>
<li>
<p>例如：注册全局组件、注册全局指令等。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注册全局组件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;MyButton&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">data</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;button @click=&quot;count++&quot;&gt;Clicked &#123;&#123; count &#125;&#125; times.&lt;/button&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//注册全局指令</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;focus&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">inserted</span>: <span class="function"><span class="params">el</span> =&gt;</span> el.<span class="title function_">focus</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li>
<p>Vue3.0中对这些API做出了调整：</p>
<ul>
<li>
<p>将全局的API，即：<code>Vue.xxx</code>调整到应用实例（<code>app</code>）上</p>
<table>
<thead>
<tr>
<th>2.x 全局 API（<code>Vue</code>）</th>
<th>3.x 实例 API (<code>app</code>)</th>
</tr>
</thead>
<tbody>
<tr>
<td>Vue.config.xxxx</td>
<td>app.config.xxxx</td>
</tr>
<tr>
<td>Vue.config.productionTip</td>
<td><strong style="color:#DD5145">移除</strong></td>
</tr>
<tr>
<td>Vue.component</td>
<td>app.component</td>
</tr>
<tr>
<td>Vue.directive</td>
<td>app.directive</td>
</tr>
<tr>
<td>Vue.mixin</td>
<td>app.mixin</td>
</tr>
<tr>
<td>Vue.use</td>
<td>app.use</td>
</tr>
<tr>
<td>Vue.prototype</td>
<td>app.config.globalProperties</td>
</tr>
</tbody>
</table>
</li>
</ul>
</li>
</ul>
<h2 id="2-其他改变">2.其他改变</h2>
<ul>
<li>
<p>data选项应始终被声明为一个函数。</p>
</li>
<li>
<p>过度类名的更改：</p>
<ul>
<li>
<p>Vue2.x写法</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.v-enter</span>,</span><br><span class="line"><span class="selector-class">.v-leave-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.v-leave</span>,</span><br><span class="line"><span class="selector-class">.v-enter-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Vue3.x写法</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.v-enter-from</span>,</span><br><span class="line"><span class="selector-class">.v-leave-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.v-leave-from</span>,</span><br><span class="line"><span class="selector-class">.v-enter-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li>
<p><strong style="color:#DD5145">移除</strong>keyCode作为 v-on 的修饰符，同时也不再支持<code>config.keyCodes</code></p>
</li>
<li>
<p><strong style="color:#DD5145">移除</strong><code>v-on.native</code>修饰符</p>
<ul>
<li>
<p>父组件中绑定事件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;my-component</span><br><span class="line">  v-on:close=&quot;handleComponentEvent&quot;</span><br><span class="line">  v-on:click=&quot;handleNativeClickEvent&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>子组件中声明自定义事件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    emits: [&#x27;close&#x27;]</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li>
<p><strong style="color:#DD5145">移除</strong>过滤器（filter）</p>
<blockquote>
<p>过滤器虽然这看起来很方便，但它需要一个自定义语法，打破大括号内表达式是 “只是 JavaScript” 的假设，这不仅有学习成本，而且有实现成本！建议用方法调用或计算属性去替换过滤器。</p>
</blockquote>
</li>
<li>
<p>…</p>
</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue3</tag>
      </tags>
  </entry>
  <entry>
    <title>L1-018 大笨钟</title>
    <url>/2022/09/19/L1-018-%E5%A4%A7%E7%AC%A8%E9%92%9F/</url>
    <content><![CDATA[<p><a href="https://pintia.cn/problem-sets/994805046380707840/problems/994805119944605696">PTA-天梯赛——L1-018 大笨钟</a></p>
<p>微博上有个自称“大笨钟V”的家伙，每天敲钟催促码农们爱惜身体早点睡觉。不过由于笨钟自己作息也不是很规律，所以敲钟并不定时。一般敲钟的点数是根据敲钟时间而定的，如果正好在某个整点敲，那么“当”数就等于那个整点数；如果过了整点，就敲下一个整点数。另外，虽然一天有24小时，钟却是只在后半天敲1~12下。例如在23:00敲钟，就是“当当当当当当当当当当当”，而到了23:01就会是“当当当当当当当当当当当当”。在午夜00:00到中午12:00期间（端点时间包括在内），笨钟是不敲的。</p>
<p>下面就请你写个程序，根据当前时间替大笨钟敲钟。</p>
<h6 id="输入格式：">输入格式：</h6>
<p>输入第一行按照hh:mm的格式给出当前时间。其中hh是小时，在00到23之间；mm是分钟，在00到59之间。</p>
<h6 id="输出格式：">输出格式：</h6>
<p>根据当前时间替大笨钟敲钟，即在一行中输出相应数量个Dang。如果不是敲钟期，则输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Only hh:mm.  Too early to Dang.</span><br></pre></td></tr></table></figure>
<p>其中hh:mm是输入的时间。</p>
<span id="more"></span>
<h6 id="输入样例1：">输入样例1：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">19:05</span><br></pre></td></tr></table></figure>
<h6 id="输出样例1：">输出样例1：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DangDangDangDangDangDangDangDang</span><br></pre></td></tr></table></figure>
<h6 id="输入样例2：">输入样例2：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">07:05</span><br></pre></td></tr></table></figure>
<h6 id="输出样例2：">输出样例2：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Only 07:05.  Too early to Dang.</span><br></pre></td></tr></table></figure>
<h6 id="我的解法（十分通俗易懂）">我的解法（十分通俗易懂）</h6>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"> <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> hh,mm;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d:%d&quot;</span>,&amp;hh,&amp;mm);</span><br><span class="line">    <span class="keyword">if</span>(hh&lt;<span class="number">12</span>||(hh==<span class="number">12</span>&amp;&amp;mm==<span class="number">0</span>))<span class="comment">//小于12时或者恰好等于12时都是不dang</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Only %02d:%02d.  Too early to Dang.&quot;</span>,hh,mm);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> n=hh<span class="number">-12</span>;</span><br><span class="line">        <span class="keyword">if</span>(mm&gt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            n++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Dang&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>刷题</category>
        <category>PTA</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>天梯赛</tag>
      </tags>
  </entry>
  <entry>
    <title>L1-017 到底有多二</title>
    <url>/2022/09/19/L1-017-%E5%88%B0%E5%BA%95%E6%9C%89%E5%A4%9A%E4%BA%8C/</url>
    <content><![CDATA[<p><a href="https://pintia.cn/problem-sets/994805046380707840/problems/994805121500692480">PTA-天梯赛——L1-017 到底有多二</a></p>
<p>一个整数“犯二的程度”定义为该数字中包含2的个数与其位数的比值。如果这个数是负数，则程度增加0.5倍；如果还是个偶数，则再增加1倍。例如数字-13142223336是个11位数，其中有3个2，并且是负数，也是偶数，则它的犯二程度计算为：3/11×1.5×2×100%，约为81.82%。本题就请你计算一个给定整数到底有多二。</p>
<h6 id="输入格式：">输入格式：</h6>
<p>输入第一行给出一个不超过50位的整数N。</p>
<h6 id="输出格式：">输出格式：</h6>
<p>在一行中输出N犯二的程度，保留小数点后两位。</p>
<span id="more"></span>
<h6 id="输入样例：">输入样例：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-13142223336</span><br></pre></td></tr></table></figure>
<h6 id="输出样例：">输出样例：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">81.82%</span><br></pre></td></tr></table></figure>
<p>鸣谢安阳师范学院段晓云老师和软件工程五班李富龙同学补充测试数据！</p>
<h6 id="我的解法（十分通俗易懂）">我的解法（十分通俗易懂）</h6>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"> <span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"> <span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"> <span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> <span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">     string number;</span><br><span class="line">     cin&gt;&gt;number;</span><br><span class="line">     <span class="type">int</span> c;</span><br><span class="line">     <span class="type">double</span> sum;</span><br><span class="line">     c=number.<span class="built_in">length</span>();</span><br><span class="line">     <span class="type">int</span> i,k=<span class="number">0</span>,len;</span><br><span class="line">     <span class="keyword">if</span>(number[<span class="number">0</span>]==<span class="string">&#x27;-&#x27;</span>)&#123;</span><br><span class="line">         len=c<span class="number">-1</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">else</span> &#123;</span><br><span class="line">         len=c;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;c;i++)&#123;</span><br><span class="line">         <span class="keyword">if</span>(number[i]==<span class="string">&#x27;2&#x27;</span>)k=k+<span class="number">1</span>;</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="keyword">if</span>(number[c<span class="number">-1</span>]%<span class="number">2</span>==<span class="number">0</span>&amp;&amp;number[<span class="number">0</span>]==<span class="string">&#x27;-&#x27;</span>)&#123;</span><br><span class="line">        sum=(<span class="type">double</span>)k/(<span class="type">double</span>)len*<span class="number">1.5</span>*<span class="number">2</span>*<span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(number[c<span class="number">-1</span>]%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">        sum=(<span class="type">double</span>)k/(<span class="type">double</span>)len*<span class="number">2</span>*<span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(number[<span class="number">0</span>]==<span class="string">&#x27;-&#x27;</span>)&#123;</span><br><span class="line">        sum=(<span class="type">double</span>)k/(<span class="type">double</span>)len*<span class="number">1.5</span>*<span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        sum=(<span class="type">double</span>)k/(<span class="type">double</span>)len*<span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;%.2f&quot;</span>,sum);</span><br><span class="line">     cout&lt;&lt;<span class="string">&quot;%&quot;</span>&lt;&lt;endl;</span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>刷题</category>
        <category>PTA</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>天梯赛</tag>
      </tags>
  </entry>
  <entry>
    <title>我写了一首诗</title>
    <url>/2022/09/12/%E6%88%91%E5%86%99%E4%BA%86%E4%B8%80%E9%A6%96%E8%AF%97/</url>
    <content><![CDATA[<p>没有大结局的故事值得品味吗?</p>
]]></content>
      <categories>
        <category>李季鸿的日常随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>如果再来一次,,,,,,,,,,,,,哪有如果啊</title>
    <url>/2022/09/11/%E6%97%A5%E5%B8%B8%E6%84%9F%E6%82%9F/</url>
    <content><![CDATA[<p><strong>音乐真的可以表达心情，睡不着的每个夜全靠以前的每个律动进行催眠</strong></p>
<p>如果再来一次，我可能会选择不遇见你。</p>
<p>如果再来一次，我可能尽量不和你接触，不说话，平平淡淡的相逢可能也会比现在的结局好看。</p>
<p>如果再来一次，我可能变得开朗，至少不像现在那么迷茫。</p>
<p>如果再来一次，我可能会选择远远观赏，而不是放大缺点，人的成长总是悄无声息的，而我却失去了耐心去等待。</p>
<span id="more"></span>
<p>如果再来一次，我可能会选择遵从内心，不想活的那么累。</p>
<p>如果再来一次，我可能选择珍惜，珍惜每天转头就能看到你的日子。</p>
<p>如果再来一次，我可能会更多点耐心，多点温柔。</p>
<p>如果再来一次，我可能会活成自己想要的样子。</p>
<p>如果再来一次，我可能选择。。。。。。。。。。。。。。。。。可是没有如果啊。。。。。</p>
<p>人活着的意义到底是什么？</p>
<p>什么叫做热爱生活？</p>
<p>怎么才叫成功？</p>
<p>怎样才叫爱上一个人？</p>
<p>为什么相爱的人不能在一起？</p>
<p>什么叫所爱隔山海？</p>
<p>什么叫爱情？</p>
<p>赢了世界又如何？</p>
<h2 id="《当》：">《当》：</h2>
<blockquote>
<p>当山峰没有棱角的时候  当河水不再流</p>
<p>当时间停住日夜不分  当天地万物化为虚有</p>
<p>我还是不能和你分手  不能和你分手</p>
<p>你的温柔是我今生最大的守候</p>
<p>当太阳不再上升的时候  当地球不再转动</p>
<p>当春夏秋冬不再变换  当花草树木全部凋残</p>
<p>我还是不能和你分散  不能和你分散</p>
<p>你的笑容是我今生最大的眷恋</p>
<p>让我们红尘作伴活得潇潇洒洒  策马奔腾共享人世繁华</p>
<p>对酒当歌唱出心中喜悦  轰轰烈烈把握青春年华</p>
<p>让我们红尘作伴活得潇潇洒洒  策马奔腾共享人世繁华</p>
<p>对酒当歌唱出心中喜悦  轰轰烈烈把握青春年华</p>
</blockquote>
<h2 id="《明天过后》：（我的闹钟）">《明天过后》：（我的闹钟）</h2>
<blockquote>
<p>没有星星的夜空</p>
<p>没有话题能补充</p>
<p>太多承诺从指缝中溜走</p>
<p>不敢奢求什么</p>
<p>回忆将我们扣留</p>
<p>一瞬间亲吻的时候</p>
<p>一切就好像轮回般朦胧</p>
<p>心动渐渐的失控</p>
<p>是否两个人足够捕捉爱的镜头</p>
<p>闭上了眼睛记得你的笑容</p>
<p>幸福的从容将灵魂都掏空</p>
<p>享受一分钟的感动</p>
<p>是否爱上一个人不问明天过后</p>
<p>山明和水秀不比你有看头</p>
<p>牵着你的手一直走到最后</p>
<p>这一刻怎么回头</p>
</blockquote>
<h2 id="《后悔无期》：">《后悔无期》：</h2>
<blockquote>
<p>合：你若离去 后会无期</p>
<p>你若离去 后会无期</p>
<p>你若离去 后会无期</p>
<p>徐：等不到 风中你的脸颊</p>
<p>眼泪都美到很融洽</p>
<p>等不到 掩饰的雨落下</p>
<p>我的眼泪被你觉察</p>
<p>汪：等不到 你的雪月风花</p>
<p>我们的爱也有时差</p>
<p>等不到 不经意的牵挂</p>
<p>却没出息的放不下</p>
<p>徐：你说陪我到某年某月某天</p>
<p>却把我丢在某日某夜某街</p>
<p>错的并不是你 而是全世界</p>
<p>汪：你带走我的思念</p>
<p>却没说抱歉</p>
<p>一起走过的黑夜</p>
<p>变一地白雪</p>
<p>合：我把记忆都翻遍</p>
<p>却没有发现</p>
<p>我们约好的明天</p>
<p>你留给昨天</p>
<p>你若离去 后会无期</p>
<p>你若离去 后会无期</p>
<p>你若离去 后会无期</p>
<p>汪：等不到 手中松开的沙</p>
<p>被风扬起的很优雅</p>
<p>等不到 送你蝴蝶发卡</p>
<p>你的他爱上了短发</p>
<p>徐：你说陪我到某年某月某天</p>
<p>却把我丢在某日某夜某街</p>
<p>错的并不是你 而是全世界</p>
<p>合：你带走我的思念</p>
<p>却没说抱歉</p>
<p>一起走过的黑夜</p>
<p>变一地白雪</p>
<p>我把记忆都翻遍</p>
<p>却没有发现</p>
<p>我们约好的明天</p>
<p>你留给昨天</p>
<p>你带走我的思念</p>
<p>却没说抱歉</p>
<p>一起走过的黑夜</p>
<p>变一地白雪</p>
<p>我把记忆都翻遍</p>
<p>却没有发现</p>
<p>我们约好的明天</p>
<p>你留给昨天</p>
<p>汪：我们约好的明天</p>
<p>合：你留给昨天</p>
</blockquote>
<h1>夜空中最亮的星</h1>
<blockquote>
<p>夜空中最亮的星  能否听清  那仰望的人</p>
<p>心底的孤独和叹息  oh  夜空中最亮的星</p>
<p>能否记起  曾与我同行  消失在风里的身影</p>
<p>我祈祷拥有一颗透明的心灵  和会流泪的眼睛</p>
<p>给我再去相信的勇气  oh越过谎言去拥抱你</p>
<p>每当我找不到存在的意义  每当我迷失在黑夜里</p>
<p>oh~夜空中最亮的星  请指引我靠近你  夜空中最亮的星</p>
<p>是否知道  曾与我同行的身影  如今在哪里</p>
<p>oh夜空中最亮的星  是否在意  是等太阳升起</p>
<p>还是意外先来临  我宁愿所有痛苦都留在心里</p>
<p>也不愿忘记你的眼睛  给我再去相信的勇气</p>
<p>oh越过谎言去拥抱你  每当我找不到存在的意义</p>
<p>每当我迷失在黑夜里  oh~夜空中最亮的星</p>
<p>oh请照亮我前行  我祈祷拥有一颗透明的心灵</p>
<p>和会流泪的眼睛  给我再去相信的勇气</p>
<p>oh越过谎言去拥抱你  每当我找不到存在的意义</p>
<p>每当我迷失在黑夜里  oh~夜空中最亮的星</p>
<p>请照亮我前行  夜空中最亮的星</p>
<p>能否听清  那仰望的人  心底的孤独和叹息</p>
</blockquote>
]]></content>
      <categories>
        <category>李季鸿的日常随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>深度学习之——卷积神经网络</title>
    <url>/2022/09/11/%E5%BA%A6%E5%AD%A6%E4%B9%A0%E4%B9%8B%E2%80%94%E2%80%94%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<h6 id="背景">背景</h6>
<img src="/images/image-20220911114410844.png" alt="引申背景" style="zoom:40%;">
> 是否可能进─步减少训练参数数量?
> 办法:提取出图像中的关键信息(轮廓)，再建立MLP模型进行训练
<h6 id="图像卷积运算">图像卷积运算</h6>
<blockquote>
<p>对图像矩阵与滤波器矩阵进行对应相乘再求和运算，转化得到新的矩阵,作用:<strong>快速定位图像中某些边缘特征</strong><br>
英文: convolution  —&gt; CNN</p>
</blockquote>
<p>A与B的卷积通常表示为:  A * B或convolution(A,B)<br>
<img src="/images/image-20220911121624085.png" alt="运算规则" style="zoom:33%;"><br>
<img src="/images/image-20220911122142445.png" alt="转换后" style="zoom:33%;"></p>
<span id="more"></span>
<h6 id="寻找竖向轮廓">寻找竖向轮廓</h6>
<img src="/images/image-20220911122445784.png" alt="转换后" style="zoom:33%;">
> 结论：包含竖向轮廓的区域非常亮（灰度值高)
###### 寻找竖向轮廓
<img src="/images/image-20220911122733403.png" alt="转换后" style="zoom:33%;">
<blockquote>
<p>结论：将图片与轮廓滤波器进行卷积运算,可快速定位固定轮廓特征的位置</p>
</blockquote>
<img src="/images/image-20220911122938543.png" alt="转换后" style="zoom:33%;">
> 结论：一个过滤器不够，需要寻找很多过滤器
<img src="/images/image-20220911123154171.png" alt="转换后" style="zoom:33%;">
<h6 id="池化层实现维度缩减">池化层实现维度缩减</h6>
<blockquote>
<p>池化:按照一个固定规则对图像矩阵进行处理,将其转换为更低维度的矩阵</p>
</blockquote>
<h6 id="最大法池化-Max-pooling-（常用）">最大法池化(Max-pooling)（常用）</h6>
<blockquote>
<p>保留核心信息的情况下，实现维度缩减</p>
</blockquote>
<img src="/images/image-20220911123436374.png" alt="转换后" style="zoom:33%;">
<p>平均法池化(Avg-pooling)（取平均值）</p>
<h6 id="卷积神经网络">卷积神经网络</h6>
<blockquote>
<p>把卷积、池化、mlp先后连接在一起，组成卷积神经网络。</p>
</blockquote>
<img src="/images/image-20220911124154268.png" alt="转换后" style="zoom:33%;">
###### 卷积神经网络两大特点
<ol>
<li>参数共享(parameter sharing): 同一个特征过滤器可用于整张图片</li>
<li>稀疏连接（sparsity of connections): 生成的特征图片每个节点只与原图片中特定节点连接 =&gt; 将特征区域化，减小误差</li>
</ol>
<img src="/images/image-20220911124431218.png" alt="转换后" style="zoom:33%;">
<hr>
<h6 id="卷积运算导致的两个问题">卷积运算导致的两个问题</h6>
<ol>
<li>图像被压缩，造成信息丢失</li>
<li>边缘信息使用少，容易被忽略</li>
</ol>
<img src="/images/image-20220911125159146.png" alt="转换后" style="zoom:33%;">
通过padding增加像素的数量，由过滤器尺stride决定
<img src="/images/image-20220911132254701.png" alt="转换后" style="zoom:33%;">
###### 有效解决方法：图像填充（padding）
<blockquote>
<p>通过在图像各边增加像素，使其在进行卷积运算维持原图大小</p>
</blockquote>
<img src="/images/image-20220911125159146.png" alt="转换后" style="zoom:33%;">
<p>通过padding增加像素的数量，由过滤器尺stride决定</p>
<img src="/images/image-20220911132254701.png" alt="转换后" style="zoom:33%;">
<h6 id="经典的CNN模型">经典的CNN模型</h6>
<ol>
<li>LeNet-5</li>
<li>AlexNet</li>
<li>VGG</li>
</ol>
<blockquote>
<p>参考经典的CNN结构搭建新模型<br>
使用经典的CNN模型结构对图像预处理，再建立MLP模型</p>
</blockquote>
<h6 id="LeNet-5">LeNet-5</h6>
<img src="/images/image-20220911132841327.png" alt="转换后" style="zoom:33%;">
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://yann.lecun.com/exdb/publis/pdf/lecun-01a.pdf</span><br></pre></td></tr></table></figure>
<h6 id="AlexNet">AlexNet</h6>
<img src="/images/image-20220911133208675.png" alt="转换后" style="zoom:33%;">
<p>AlexNet论文：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://papers.nips.cc/paper/4824-imagenet-classification-with-deep-convolutional-neural-networks.pdf</span><br></pre></td></tr></table></figure>
<blockquote>
<p>输入图像: 227X 227X 3RGB图，3个通道</p>
<p>训练参数:约60,000,000个</p>
<p>特点:</p>
<p>1、适用于识别较为复杂的彩色图，可识别1000种类别<br>
2、结构比LeNet更为复杂，使用Relu作为激活函数</p>
</blockquote>
<p>AlexNet的出现使得：</p>
<blockquote>
<p>学术界开始相信深度学习技术,<br>
在计算机视觉立用中可以得到很不错的结果。</p>
</blockquote>
<h6 id="VGG-16">VGG-16</h6>
<img src="/images/image-20220911133838642.png" alt="转换后" style="zoom:33%;">
<p>VGG-16论文：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://arxiv.org/pdf/1409.1556.pdf</span><br></pre></td></tr></table></figure>
<blockquote>
<p>输入图像:227 X 227X 3 RGB图，3个通道</p>
<p>训练参数:约138,000,000个</p>
<p>特点:</p>
<p>1、所有卷积层tilter 宽和高都是3、步长为1，padding都使用same convolution;<br>
2、所有池化层的 filtey宽和高都是况，步长都是2;<br>
3、相比alexnet，有更多的filter用于提取轮廓信息，具有更高精准性</p>
</blockquote>
<img src="/images/image-20220911134438302.png" alt="转换后" style="zoom:33%;">
<img src="/images/image-20220911134500337.png" alt="转换后" style="zoom:33%;">
<hr>
]]></content>
      <categories>
        <category>人工智能</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title>PTA-天梯赛——L1-016 查验身份证</title>
    <url>/2022/09/08/PTA-%E5%A4%A9%E6%A2%AF%E8%B5%9B%E2%80%94%E2%80%94L1-016-%E6%9F%A5%E9%AA%8C%E8%BA%AB%E4%BB%BD%E8%AF%81/</url>
    <content><![CDATA[<p><a href="https://pintia.cn/problem-sets/994805046380707840/problems/994805122985476096">PTA-天梯赛——L1-016 查验身份证</a></p>
<p>一个合法的身份证号码由17位地区、日期编号和顺序编号加1位校验码组成。校验码的计算规则如下：</p>
<p>首先对前17位数字加权求和，权重分配为：{7，9，10，5，8，4，2，1，6，3，7，9，10，5，8，4，2}；然后将计算的和对11取模得到值Z；最后按照以下关系对应Z值与校验码M的值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Z：0 1 2 3 4 5 6 7 8 9 10</span><br><span class="line">M：1 0 X 9 8 7 6 5 4 3 2</span><br></pre></td></tr></table></figure>
<p>现在给定一些身份证号码，请你验证校验码的有效性，并输出有问题的号码。</p>
<h6 id="输入格式：">输入格式：</h6>
<p>输入第一行给出正整数N（≤100）是输入的身份证号码的个数。随后N行，每行给出1个18位身份证号码。</p>
<h6 id="输出格式：">输出格式：</h6>
<p>按照输入的顺序每行输出1个有问题的身份证号码。这里并不检验前17位是否合理，只检查前17位是否全为数字且最后1位校验码计算准确。如果所有号码都正常，则输出All passed。</p>
<span id="more"></span>
<h6 id="输入样例1：">输入样例1：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">320124198808240056</span><br><span class="line">12010X198901011234</span><br><span class="line">110108196711301866</span><br><span class="line">37070419881216001X</span><br></pre></td></tr></table></figure>
<h6 id="输出样例1：">输出样例1：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">12010X198901011234</span><br><span class="line">110108196711301866</span><br><span class="line">37070419881216001X</span><br></pre></td></tr></table></figure>
<h6 id="输入样例2：">输入样例2：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">320124198808240056</span><br><span class="line">110108196711301862</span><br></pre></td></tr></table></figure>
<h6 id="输出样例2：">输出样例2：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">All passed</span><br></pre></td></tr></table></figure>
<h6 id="C-高级解法">C++高级解法</h6>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    map&lt;<span class="type">int</span>, <span class="type">char</span>&gt; m;</span><br><span class="line"> </span><br><span class="line">    m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">char</span>&gt;(<span class="number">0</span>, <span class="string">&#x27;1&#x27;</span>));</span><br><span class="line">    m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">char</span>&gt;(<span class="number">1</span>, <span class="string">&#x27;0&#x27;</span>));</span><br><span class="line">    m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">char</span>&gt;(<span class="number">2</span>, <span class="string">&#x27;X&#x27;</span>));</span><br><span class="line">    m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">char</span>&gt;(<span class="number">3</span>, <span class="string">&#x27;9&#x27;</span>));</span><br><span class="line">    m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">char</span>&gt;(<span class="number">4</span>, <span class="string">&#x27;8&#x27;</span>));</span><br><span class="line">    m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">char</span>&gt;(<span class="number">5</span>, <span class="string">&#x27;7&#x27;</span>));</span><br><span class="line">    m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">char</span>&gt;(<span class="number">6</span>, <span class="string">&#x27;6&#x27;</span>));</span><br><span class="line">    m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">char</span>&gt;(<span class="number">7</span>, <span class="string">&#x27;5&#x27;</span>));</span><br><span class="line">    m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">char</span>&gt;(<span class="number">8</span>, <span class="string">&#x27;4&#x27;</span>));</span><br><span class="line">    m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">char</span>&gt;(<span class="number">9</span>, <span class="string">&#x27;3&#x27;</span>));</span><br><span class="line">    m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">char</span>&gt;(<span class="number">10</span>, <span class="string">&#x27;2&#x27;</span>));</span><br><span class="line"> </span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    string num[<span class="number">100</span>];</span><br><span class="line">    <span class="type">int</span> quan[<span class="number">17</span>]=&#123;<span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span>&#125;;</span><br><span class="line">    <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        cin&gt;&gt;num[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; num[i].<span class="built_in">size</span>()<span class="number">-1</span>; ++j) &#123;</span><br><span class="line">             sum+=quan[j]*(num[i][j]<span class="number">-48</span>);<span class="comment">//48为字符&#x27;0&#x27;的十进制数</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> Z=sum%<span class="number">11</span>;</span><br><span class="line">        <span class="type">char</span> M=m[Z];</span><br><span class="line">        <span class="keyword">if</span> (M==num[i][<span class="number">17</span>])&#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cout&lt;&lt;num[i]&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (count==n)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;All passed&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="C-一般解法">C++一般解法</h6>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*三个变量分别储存权重、对应值、输入的身份证号*/</span></span><br><span class="line"><span class="type">int</span> quanzhong[<span class="number">17</span>]=&#123;<span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span>&#125;;</span><br><span class="line"><span class="type">int</span> m[<span class="number">11</span>]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>&#125;; <span class="comment">//这里把X转化为10，方便之后的操作 </span></span><br><span class="line">string s;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*用来判断身份证号是否正确*/</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isTrue</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">17</span>;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(s[i]&lt;<span class="string">&#x27;0&#x27;</span> || s[i]&gt;<span class="string">&#x27;9&#x27;</span>)&#123;  <span class="comment">//先判断输入的值是否合法，如果不合法直接返回false </span></span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			sum += (s[i]-<span class="string">&#x27;0&#x27;</span>)*quanzhong[i];  <span class="comment">//用sum来保存每一位与权重相乘的和 </span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> temp = (s[<span class="number">17</span>]==<span class="string">&#x27;X&#x27;</span>)?<span class="number">10</span>:(s[<span class="number">17</span>]-<span class="string">&#x27;0&#x27;</span>); <span class="comment">//如果最后一位是X的话就转化为10，其他不变 </span></span><br><span class="line">	<span class="keyword">return</span> (m[sum%<span class="number">11</span>] == temp);   <span class="comment">//返回的值就是校验值与身份证最后一位是否相同 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> n,flag=<span class="number">0</span>;</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		cin&gt;&gt;s;</span><br><span class="line">		<span class="keyword">if</span>(!<span class="built_in">isTrue</span>())&#123;   <span class="comment">//如果校验没有通过就把这个身份证输出，并把flag置1 </span></span><br><span class="line">			cout&lt;&lt;s&lt;&lt;endl;</span><br><span class="line">			flag = <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(flag == <span class="number">0</span>)&#123;  <span class="comment">//如果flag为0的话说明所有输入的身份证都通过校验 </span></span><br><span class="line">		cout&lt;&lt;<span class="string">&quot;All passed&quot;</span>;</span><br><span class="line">	&#125;		</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>刷题</category>
        <category>PTA</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>天梯赛</tag>
      </tags>
  </entry>
  <entry>
    <title>早知道暑假不留校了</title>
    <url>/2022/09/08/%E6%97%A9%E7%9F%A5%E9%81%93%E6%9A%91%E5%81%87%E4%B8%8D%E7%95%99%E6%A0%A1%E4%BA%86/</url>
    <content><![CDATA[<img src="/images/ljh.png" alt="早知道暑假不留校了" style="zoom:50%;">]]></content>
      <categories>
        <category>李季鸿的日常随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>PTA-天梯赛——L1-015 跟奥巴马一起画方块</title>
    <url>/2022/09/08/PTA-%E5%A4%A9%E6%A2%AF%E8%B5%9B%E2%80%94%E2%80%94L1-015-%E8%B7%9F%E5%A5%A5%E5%B7%B4%E9%A9%AC%E4%B8%80%E8%B5%B7%E7%94%BB%E6%96%B9%E5%9D%97/</url>
    <content><![CDATA[<p><a href="https://pintia.cn/problem-sets/994805046380707840/problems/994805124398956544">PTA-天梯赛——L1-015 跟奥巴马一起画方块</a></p>
<p>美国总统奥巴马不仅呼吁所有人都学习编程，甚至以身作则编写代码，成为美国历史上首位编写计算机代码的总统。2014年底，为庆祝“计算机科学教育周”正式启动，奥巴马编写了很简单的计算机代码：在屏幕上画一个正方形。现在你也跟他一起画吧！</p>
<h6 id="输入格式：">输入格式：</h6>
<p>输入在一行中给出正方形边长N（3≤N≤21）和组成正方形边的某种字符C，间隔一个空格。</p>
<h6 id="输出格式：">输出格式：</h6>
<p>输出由给定字符C画出的正方形。但是注意到行间距比列间距大，所以为了让结果看上去更像正方形，我们输出的行数实际上是列数的50%（四舍五入取整）。</p>
<h6 id="输入样例：">输入样例：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10 a</span><br></pre></td></tr></table></figure>
<h6 id="输出样例：">输出样例：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aaaaaaaaaa</span><br><span class="line">aaaaaaaaaa</span><br><span class="line">aaaaaaaaaa</span><br><span class="line">aaaaaaaaaa</span><br><span class="line">aaaaaaaaaa</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h6 id="我的解法">我的解法</h6>
<p>简单又容易理解，但一看就很low</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> N;</span><br><span class="line">    string x;</span><br><span class="line">    cin&gt;&gt;N;</span><br><span class="line">    cin&gt;&gt;x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;((N<span class="number">-1</span>)/<span class="number">2</span>)+<span class="number">1</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;N; j++) &#123;</span><br><span class="line">		    cout&lt;&lt;x[<span class="number">0</span>];</span><br><span class="line">	    &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="网上的思路——Java">网上的思路——Java</h6>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 李季鸿</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		Scanner s=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="comment">//		int n=s.nextInt();</span></span><br><span class="line"><span class="comment">//		char ch1=s.</span></span><br><span class="line">		<span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> s.nextLine();</span><br><span class="line">		String[] ch=str.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">		<span class="type">int</span> n=Integer.parseInt(ch[<span class="number">0</span>]);</span><br><span class="line">		<span class="type">int</span> b=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>) &#123;</span><br><span class="line">			b=n/<span class="number">2</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			b=(<span class="type">int</span>)(n/<span class="number">2</span>)+<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="comment">//		System.out.println(b);</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;b;i++) &#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n-<span class="number">1</span>;j++) &#123;</span><br><span class="line">				System.out.print(ch[<span class="number">1</span>]);</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println(ch[<span class="number">1</span>]);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>刷题</category>
        <category>PTA</category>
      </categories>
      <tags>
        <tag>天梯赛</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>PTA-天梯赛——L1-013 计算阶乘和</title>
    <url>/2022/09/08/PTA-%E5%A4%A9%E6%A2%AF%E8%B5%9B%E2%80%94%E2%80%94L1-013-%E8%AE%A1%E7%AE%97%E9%98%B6%E4%B9%98%E5%92%8C/</url>
    <content><![CDATA[<p><a href="https://pintia.cn/problem-sets/994805046380707840/problems/994805127389495296">PTA-天梯赛——L1-013 计算阶乘和</a></p>
<p>对于给定的正整数N，需要你计算 S=1!+2!+3!+…+N!。</p>
<h6 id="输入格式：">输入格式：</h6>
<p>输入在一行中给出一个不超过10的正整数N。</p>
<h6 id="输出格式：">输出格式：</h6>
<p>在一行中输出S的值。</p>
<h6 id="输入样例：">输入样例：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure>
<h6 id="输出样例：">输出样例：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">9</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h6 id="我的解法">我的解法</h6>
<p>简单又容易理解，但一看就很low</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">JieCheng</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> x*(<span class="built_in">JieCheng</span>(x<span class="number">-1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> N;</span><br><span class="line">    <span class="type">int</span> SUM = <span class="number">0</span>;</span><br><span class="line">    cin&gt;&gt;N;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=N; i&gt;<span class="number">0</span>; i--) &#123;</span><br><span class="line">		SUM+=<span class="built_in">JieCheng</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">    cout&lt;&lt;SUM;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="网上的思路">网上的思路</h6>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">	<span class="type">int</span> n;    </span><br><span class="line">	cin&gt;&gt;n;    </span><br><span class="line">	<span class="type">int</span> sum=<span class="number">0</span>;    </span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)    </span><br><span class="line">	&#123;        </span><br><span class="line">		<span class="type">int</span> temp=<span class="number">1</span>;        </span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=i;j++)        </span><br><span class="line">		&#123;            </span><br><span class="line">			temp=temp*j;        </span><br><span class="line">		&#125;        </span><br><span class="line">		sum=sum+temp;    </span><br><span class="line">	&#125;    </span><br><span class="line">	cout&lt;&lt;sum;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>刷题</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>天梯赛</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ STL库中map的常见操作</title>
    <url>/2022/09/08/C-STL%E5%BA%93%E4%B8%ADmap%E7%9A%84%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h6 id="头文件：">头文件：</h6>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br></pre></td></tr></table></figure>
<h6 id="定义：">定义：</h6>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">map&lt;<span class="type">char</span>,<span class="type">int</span>&gt;m;</span><br><span class="line"><span class="comment">//char是下面中括号中元素的数据类型（当然可以换成其他的），</span></span><br><span class="line"><span class="comment">//int是等号右边的元素的数据类型。定义什么样的类型是随便的，现在听着可能有点迷，看了下面的赋值可能就懂了</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对m进行赋值</span></span><br><span class="line">map&lt;<span class="type">char</span>,<span class="type">int</span>&gt;m;</span><br><span class="line">m[<span class="string">&#x27;a&#x27;</span>]=<span class="number">4</span>;</span><br><span class="line">m[<span class="string">&#x27;d&#x27;</span>]=<span class="number">1</span>;</span><br><span class="line">m[<span class="string">&#x27;c&#x27;</span>]=<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//还是对m进行赋值</span></span><br><span class="line">map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;m;</span><br><span class="line">m[<span class="number">1</span>]=<span class="number">6</span>;</span><br><span class="line">m[<span class="number">3</span>]=<span class="number">4</span>;</span><br><span class="line">m[<span class="number">2</span>]=<span class="number">8</span>;</span><br><span class="line"><span class="comment">//这些数值均没有任何特殊意义，都是随便赋的值</span></span><br></pre></td></tr></table></figure>
<h6 id="常用函数">常用函数</h6>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">m.<span class="built_in">push</span>();</span><br><span class="line">m.<span class="built_in">pop</span>(); </span><br><span class="line"><span class="comment">//emmmmmm,上面这两个函数在map里面都没有</span></span><br><span class="line"></span><br><span class="line">m.<span class="built_in">clear</span>();     <span class="comment">//清空m中的所有元素</span></span><br><span class="line">m.<span class="built_in">empty</span>();     <span class="comment">//判断m是否为空</span></span><br><span class="line">m.<span class="built_in">begin</span>();     <span class="comment">//返回指向map头部的迭代器</span></span><br><span class="line">m.<span class="built_in">end</span>();       <span class="comment">//返回指向map尾部的迭代器</span></span><br><span class="line">m.<span class="built_in">rbegin</span>();    <span class="comment">//返回一个指向map尾部的逆向迭代器</span></span><br><span class="line">m.<span class="built_in">rend</span>();      <span class="comment">//返回一个指向map头部的逆向迭代器</span></span><br><span class="line">m.<span class="built_in">erase</span>();     <span class="comment">//删除指定元素</span></span><br><span class="line">m.<span class="built_in">inser</span>();     <span class="comment">//插入元素</span></span><br><span class="line">m.<span class="built_in">find</span>();      <span class="comment">//查找指定元素</span></span><br><span class="line">m.<span class="built_in">swap</span>();      <span class="comment">//交换两个map中的所有元素（注意：两个map中定义的类型需要完全一致）</span></span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	string s1,s2;</span><br><span class="line">	<span class="built_in">getline</span>(cin,s1);</span><br><span class="line">	<span class="built_in">getline</span>(cin,s2);</span><br><span class="line">	set&lt;<span class="type">char</span>&gt; b;</span><br><span class="line">	<span class="comment">//cout&lt;&lt;s1&lt;&lt;endl&lt;&lt;s2&lt;&lt;endl;</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;s2.<span class="built_in">length</span>(); i++) &#123;</span><br><span class="line">		b.<span class="built_in">insert</span>(s2[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;s1.<span class="built_in">length</span>(); i++) &#123;</span><br><span class="line">		set&lt;<span class="type">char</span>&gt;::iterator it=b.<span class="built_in">find</span>(s1[i]);</span><br><span class="line">		<span class="keyword">if</span>(*it!=s1[i])</span><br><span class="line">			cout&lt;&lt;s1[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>提前说明：</p>
<p>其实在map内部，已经默认将其中的元素按照中括号中的元素的大小，按照从小到大的顺序排列好了</p>
</blockquote>
<h6 id="示例">示例</h6>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   map&lt;<span class="type">char</span>,<span class="type">int</span>&gt;m1;</span><br><span class="line">   map&lt;<span class="type">char</span>,<span class="type">int</span>&gt;m2;</span><br><span class="line"></span><br><span class="line">   m1[<span class="string">&#x27;q&#x27;</span>] = <span class="number">1</span>;</span><br><span class="line">   m1[<span class="string">&#x27;w&#x27;</span>] = <span class="number">2</span>;</span><br><span class="line">   m1[<span class="string">&#x27;e&#x27;</span>] = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">   m2[<span class="string">&#x27;a&#x27;</span>] = <span class="number">4</span>;</span><br><span class="line">   m2[<span class="string">&#x27;s&#x27;</span>] = <span class="number">5</span>;</span><br><span class="line">   m2[<span class="string">&#x27;d&#x27;</span>] = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">   cout&lt;&lt;m1.<span class="built_in">size</span>()&lt;&lt;endl;<span class="comment">//运算结果：3</span></span><br><span class="line">   </span><br><span class="line">   m1.<span class="built_in">erase</span>(m1.<span class="built_in">begin</span>());<span class="comment">//删除m1中的第一个元素（指的是中括号中所有元素中最小的，即m1[&#x27;e&#x27;] = 3）</span></span><br><span class="line">   map&lt;<span class="type">char</span>,<span class="type">int</span>&gt;::iterator it;<span class="comment">//使用迭代器将map中的元素输出</span></span><br><span class="line">   <span class="keyword">for</span>(it=m1.<span class="built_in">begin</span>();it!=m1.<span class="built_in">end</span>();it++)</span><br><span class="line">   &#123; </span><br><span class="line">      cout&lt;&lt;it-&gt;first&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;it-&gt;second&lt;&lt;endl;<span class="comment">//该语句等价于 cout&lt;&lt;(*it).first&lt;&lt;&#x27; &#x27;&lt;&lt;(*it).second&lt;&lt;endl;</span></span><br><span class="line">      <span class="comment">//这是map的固定输出格式</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//运算结果：q 1</span></span><br><span class="line">   <span class="comment">//         w 2</span></span><br><span class="line">   </span><br><span class="line">   m1.<span class="built_in">swap</span>(m2);<span class="comment">//交换两个map中的所有元素</span></span><br><span class="line">   map&lt;<span class="type">char</span>,<span class="type">int</span>&gt;::reverse_iterator rit;</span><br><span class="line">   <span class="keyword">for</span>(rit=m1.<span class="built_in">rbegin</span>();rit!=m1.<span class="built_in">rend</span>();rit++)<span class="comment">//逆向输出，可以看成从大到小输出</span></span><br><span class="line">   &#123;</span><br><span class="line">      cout&lt;&lt;(*rit).first&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;(*rit).second&lt;&lt;endl;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//运算结果：s 5</span></span><br><span class="line">   <span class="comment">//         d 5</span></span><br><span class="line">   <span class="comment">//         a 4</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面是整个代码的运算结果：</p>
<p><img src="https://img-blog.csdnimg.cn/20200202231054222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MDIwODU4,size_16,color_FFFFFF,t_70" alt="运算结果"></p>
]]></content>
      <categories>
        <category>语法</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>STL</tag>
        <tag>map</tag>
      </tags>
  </entry>
  <entry>
    <title>PTA-天梯赛——L1-011 A-B</title>
    <url>/2022/09/07/PTA-%E5%A4%A9%E6%A2%AF%E8%B5%9B%E2%80%94%E2%80%94L1-011-A-B/</url>
    <content><![CDATA[<p><a href="https://pintia.cn/problem-sets/994805046380707840/problems/994805130426171392">PTA-天梯赛——L1-011 A-B</a></p>
<p>本题要求你计算A−B。不过麻烦的是，A和B都是字符串 —— 即从字符串A中把字符串B所包含的字符全删掉，剩下的字符组成的就是字符串A−B。</p>
<h6 id="输入格式：">输入格式：</h6>
<p>输入在2行中先后给出字符串A和B。两字符串的长度都不超过10e4 ，并且保证每个字符串都是由可见的ASCII码和空白字符组成，最后以换行符结束。</p>
<h6 id="输出格式：">输出格式：</h6>
<p>在一行中打印出A−B的结果字符串。</p>
<h6 id="输入样例：">输入样例：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">I love GPLT!  It&#x27;s a fun game!</span><br><span class="line">aeiou</span><br></pre></td></tr></table></figure>
<h6 id="输出样例：">输出样例：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">I lv GPLT!  It&#x27;s  fn gm!</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h6 id="AC【map】">AC【map】</h6>
<p>简单又容易理解，但是我不会想到的啊！！！</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	string a,b;</span><br><span class="line">	<span class="built_in">getline</span>(cin,a);</span><br><span class="line">	<span class="built_in">getline</span>(cin,b);</span><br><span class="line">	map&lt;<span class="type">char</span>,<span class="type">int</span>&gt; m;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;b.<span class="built_in">length</span>(); i++) &#123;</span><br><span class="line">		m[b[i]]=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;a.<span class="built_in">length</span>(); i++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(m[a[i]]!=<span class="number">1</span>) &#123;</span><br><span class="line">			cout&lt;&lt;a[i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="【set】">【set】</h6>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	string s1,s2;</span><br><span class="line">	<span class="built_in">getline</span>(cin,s1);</span><br><span class="line">	<span class="built_in">getline</span>(cin,s2);</span><br><span class="line">	set&lt;<span class="type">char</span>&gt; s;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;s2.<span class="built_in">length</span>(); i++) &#123;</span><br><span class="line">		s.<span class="built_in">insert</span>(s2[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;s1.<span class="built_in">length</span>(); i++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(s.<span class="built_in">find</span>(s1[i])==s.<span class="built_in">end</span>())</span><br><span class="line">			cout&lt;&lt;s1[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	string s1,s2;</span><br><span class="line">	<span class="built_in">getline</span>(cin,s1);</span><br><span class="line">	<span class="built_in">getline</span>(cin,s2);</span><br><span class="line">	set&lt;<span class="type">char</span>&gt; b;</span><br><span class="line">	<span class="comment">//cout&lt;&lt;s1&lt;&lt;endl&lt;&lt;s2&lt;&lt;endl;</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;s2.<span class="built_in">length</span>(); i++) &#123;</span><br><span class="line">		b.<span class="built_in">insert</span>(s2[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;s1.<span class="built_in">length</span>(); i++) &#123;</span><br><span class="line">		set&lt;<span class="type">char</span>&gt;::iterator it=b.<span class="built_in">find</span>(s1[i]);</span><br><span class="line">		<span class="keyword">if</span>(*it!=s1[i])</span><br><span class="line">			cout&lt;&lt;s1[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="普通方法1">普通方法1</h6>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	string a,b,c=<span class="string">&quot;&quot;</span>;</span><br><span class="line">	<span class="built_in">getline</span>(cin,a);</span><br><span class="line">	<span class="built_in">getline</span>(cin,b);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;a.<span class="built_in">length</span>(); i++) &#123;</span><br><span class="line">		<span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;b.<span class="built_in">length</span>(); j++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(a[i]==b[j])</span><br><span class="line">				f=<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(f==<span class="number">0</span>)</span><br><span class="line">			c=c+a[i];</span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;c;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="普通方法2">普通方法2</h6>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	string a,b;</span><br><span class="line">	<span class="built_in">getline</span>(cin,a);</span><br><span class="line">	<span class="built_in">getline</span>(cin,b);</span><br><span class="line">	<span class="type">int</span> len=a.<span class="built_in">length</span>();</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;b.<span class="built_in">length</span>(); i++) &#123;</span><br><span class="line">		<span class="type">char</span> s=b[i];</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;len; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(s==a[j]) &#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> k=j; k&lt;len<span class="number">-1</span>; k++) &#123;</span><br><span class="line">					a[k]=a[k+<span class="number">1</span>];</span><br><span class="line">				&#125;</span><br><span class="line">				len--;</span><br><span class="line">				j--;<span class="comment">//这里要-- 就是排除连着两个一样的字符</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;len; i++)</span><br><span class="line">		cout&lt;&lt;a[i];</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>刷题</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>天梯赛</tag>
      </tags>
  </entry>
  <entry>
    <title>前端笔记</title>
    <url>/2022/09/06/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1>前端笔记</h1>
<p><strong>字体图标-Iconfont</strong></p>
<p>引用字体图标样式表</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./iconfont.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>调用图标对应的类名，必须调用两个类名</p>
<ul>
<li>iconfont类：基本样式，包含字体的使用等</li>
<li>icon-xxx:图标对应的类名</li>
</ul>
<hr>
<h2 id="表格隔行换色">表格隔行换色:</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.bg</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 用到新的鼠标事件鼠标经过onmouseover鼠标离开onmouseout</span></span><br><span class="line"><span class="comment">核心思路∶鼠标经过tr行，当前的行变背景颜色，鼠标离开去掉当前的背景颜色</span></span><br><span class="line"><span class="comment">注意:第一行( thead里面的行）不需要变换颜色，因此我们获取的是tbody里面的行 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1.获取元素 获取的是 tbody里面的所有行</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> trs = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;tbody&#x27;</span>).<span class="title function_">querySelector</span>(<span class="string">&#x27;tr&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2.利用循环绑定注册事件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;trs.<span class="property">length</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 3.鼠标经过事件 onmouseover</span></span></span><br><span class="line"><span class="language-javascript">            trs[i].<span class="property">onmouseover</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// console.log(11);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">className</span> = <span class="string">&#x27;bg&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 4.鼠标离开事件 onmouseout</span></span></span><br><span class="line"><span class="language-javascript">            trs[i].<span class="property">onmouseout</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// console.log(11);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">className</span> = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h2 id="表单全选">表单全选:</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> j_caAll = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;j_caAll&#x27;</span>);   <span class="comment">//j_caAll是全局选项</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> j_tbs = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;j_tbs&#x27;</span>).<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;input&#x27;</span>);     <span class="comment">//下面所有的复选框 </span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//注册事件</span></span></span><br><span class="line"><span class="language-javascript">        j_caAll.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//this.checked 它可以得到当前复选框的选中状态，如果是true就是选中，如果是false就是未选中</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; j_tbs.<span class="property">length</span>; i++)&#123;</span></span><br><span class="line"><span class="language-javascript">                j_tbs[i].<span class="property">checked</span> = <span class="variable language_">this</span>.<span class="property">checked</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; j_tbs.<span class="property">length</span>; i++)&#123;</span></span><br><span class="line"><span class="language-javascript">            j_tbs[i].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> flag = <span class="literal">true</span>; <span class="comment">//控制全选按钮是否选中</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//每次点击下面的复选框都要检查4个小按钮是否被选中</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span>; i &lt; j_tbs.<span class="property">length</span>; i++)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span>(!j_tbs[i].<span class="property">checked</span>)&#123;<span class="comment">//有一个按钮没有被选中</span></span></span><br><span class="line"><span class="language-javascript">                        flag = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">break</span>; <span class="comment">//退出for循环，这样可以提高只要效率，因为只要有一个没被选中，就无需循环</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                j_caAll.<span class="property">checked</span> = flag;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Tab栏切换">Tab栏切换:</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> tab_list = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.tab_list&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> lis = tab_list.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> items = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.item&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//for循环绑定点击事件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt; lis.<span class="property">length</span>; i++)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//开始给5个小li 设置索引号</span></span></span><br><span class="line"><span class="language-javascript">            lis[i].<span class="title function_">setAttribute</span>(<span class="string">&#x27;index&#x27;</span>, i);</span></span><br><span class="line"><span class="language-javascript">            lis[i].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//1.上的模块选项卡，点击某一个，当前这个底色会是红色，其余不变（排他思想）修改类名的方式</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//获取元素</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//干掉所有人 其余的li清除class 这个类</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span> ;i &lt; lis.<span class="property">length</span>; i++)&#123;</span></span><br><span class="line"><span class="language-javascript">                    lis[i].<span class="property">className</span> = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//留下我自己</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">className</span> = <span class="string">&#x27;current&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//2.下面的显示内容模块</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> index = <span class="variable language_">this</span>.<span class="title function_">getAttribute</span>(<span class="string">&#x27;index&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(index);</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//干掉所有人 让其余的item 这些div隐藏</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; items.<span class="property">length</span>; i++)&#123;</span></span><br><span class="line"><span class="language-javascript">                    items[i].<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//留下我自己 让对应的item 显示出来</span></span></span><br><span class="line"><span class="language-javascript">                items[index].<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="下拉菜单">下拉菜单:</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//1. 获取元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> nav = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.nav&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> lis = nav.<span class="property">children</span>; <span class="comment">//得到四个小li</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//2. 循环注册事件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.<span class="property">length</span>; i++)&#123;</span></span><br><span class="line"><span class="language-javascript">            lis[i].<span class="property">onmouseover</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">children</span>[<span class="number">1</span>].<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            lis[i].<span class="property">onmouseout</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">children</span>[<span class="number">1</span>].<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="简单留言板">简单留言板:</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//1. 获取元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> text = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;textarea&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//2. 注册事件</span></span></span><br><span class="line"><span class="language-javascript">        btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(text.<span class="property">value</span> == <span class="string">&#x27;&#x27;</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&#x27;您没有输入内容&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// console.log(text.value);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//(1)创建元素</span></span></span><br><span class="line"><span class="language-javascript">                 <span class="keyword">var</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                 <span class="comment">//现有li 才能赋值</span></span></span><br><span class="line"><span class="language-javascript">                 li.<span class="property">innerHTML</span> = text.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//(2)添加元素</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// ul.appendChild(li);</span></span></span><br><span class="line"><span class="language-javascript">                ul.<span class="title function_">insertBefore</span>(li,ul.<span class="property">children</span>[<span class="number">0</span>]);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="删除留言">删除留言:</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//1. 获取元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> text = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;textarea&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//2. 注册事件</span></span></span><br><span class="line"><span class="language-javascript">        btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(text.<span class="property">value</span> == <span class="string">&#x27;&#x27;</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&#x27;您没有输入内容&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// console.log(text.value);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//(1)创建元素</span></span></span><br><span class="line"><span class="language-javascript">                 <span class="keyword">var</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                 <span class="comment">//现有li 才能赋值</span></span></span><br><span class="line"><span class="language-javascript">                 li.<span class="property">innerHTML</span> = text.<span class="property">value</span>  +  <span class="string">&quot;&lt;a href=&#x27;javascript:;&#x27;&gt;删除&lt;/a&gt;&quot;</span>;<span class="comment">//javascript:;可以阻止链接跳转</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//(2)添加元素</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// ul.appendChild(li);</span></span></span><br><span class="line"><span class="language-javascript">                ul.<span class="title function_">insertBefore</span>(li,ul.<span class="property">children</span>[<span class="number">0</span>]);</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//(3)删除元素 删除的是当前链接的li 它的父亲</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> <span class="keyword">as</span> = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;a&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt; <span class="keyword">as</span>.<span class="property">length</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">as</span>[i].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">//node.removeChild(child); 删除的是li当前所在的li this.parentNode;</span></span></span><br><span class="line"><span class="language-javascript">                        ul.<span class="title function_">removeChild</span>(<span class="variable language_">this</span>.<span class="property">parentNode</span>);</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="动态生成表格：">动态生成表格：</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"> * @Author: error: git config user.name &amp;&amp; git config user.email &amp; please set dead value or install git</span></span><br><span class="line"><span class="comment"> * @Date: 2022-08-17 12:40:22</span></span><br><span class="line"><span class="comment"> * @LastEditors: error: git config user.name &amp;&amp; git config user.email &amp; please set dead value or install git</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2022-08-17 14:20:42</span></span><br><span class="line"><span class="comment"> * @FilePath: \JS\动态生成表格.html</span></span><br><span class="line"><span class="comment"> * @Description: 这是默认设置,请设置`customMade`, 打开koroFileHeader查看配置 进行设置: https://github.com/OBKoro1/koro1FileHeader/wiki/%E9%85%8D%E7%BD%AE</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">table</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-collapse</span>: collapse;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">td</span>,</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">th</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">thead</span> <span class="selector-tag">tr</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">cellspacing</span>=<span class="string">&quot;&#x27;0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>科目<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>成绩<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//1.先去准备好学生的数据</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> datas =[</span></span><br><span class="line"><span class="language-javascript">            &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>: <span class="string">&#x27;李季鸿&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">subject</span>: <span class="string">&#x27;javascript&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">score</span>:<span class="number">100</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>: <span class="string">&#x27;李季鸿&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">subject</span>: <span class="string">&#x27;C++&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">score</span>:<span class="number">100</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>: <span class="string">&#x27;李季鸿&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">subject</span>: <span class="string">&#x27;java&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">score</span>:<span class="number">100</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>: <span class="string">&#x27;李季鸿&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">subject</span>: <span class="string">&#x27;linux&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">score</span>:<span class="number">100</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">        ];</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//2. 往tbody里面创建行：有几个人（通过数组的长度）我们就创建几行</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> tbody = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;tbody&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; datas.<span class="property">length</span>; i++)&#123;<span class="comment">//外面的for循环管是行 tr</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//1.创建 tr 行</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> tr = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;tr&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            tbody.<span class="title function_">appendChild</span>(tr);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//2.行里面创建单元格(跟数据有关系的3个单元格)  td 单元格的数量取决于每个对象里面的属性个数 for循环遍历对象</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> datas[i])&#123;  <span class="comment">//里卖弄的for循环管的是列 td</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//创建单元格</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> td = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;td&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//吧对象里面的属性值 datas[i][k] 给td</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// console.log(datas[i][k]);</span></span></span><br><span class="line"><span class="language-javascript">                td.<span class="property">innerHTML</span> = datas[i][k];</span></span><br><span class="line"><span class="language-javascript">                tr.<span class="title function_">appendChild</span>(td);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//3.创建有删除2个字的单元格</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> td = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;td&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            td.<span class="property">innerHTML</span> = <span class="string">&quot;&lt;a href=&#x27;javascript:;&#x27;&gt;删除&lt;/a&gt;&quot;</span>;<span class="comment">//javascript:;可以阻止链接跳转</span></span></span><br><span class="line"><span class="language-javascript">            tr.<span class="title function_">appendChild</span>(td);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//4. 删除操作开始</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> <span class="keyword">as</span> = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;a&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">as</span>.<span class="property">length</span>; i++)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">as</span>[i].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//点击a 删除当前a所在的行(链接的爸爸的爸爸) node.removeChild(child)</span></span></span><br><span class="line"><span class="language-javascript">                tbody.<span class="title function_">removeChild</span>(<span class="variable language_">this</span>.<span class="property">parentNode</span>.<span class="property">parentNode</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
</search>
